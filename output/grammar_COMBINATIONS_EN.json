{
  "grammarEntries" : [ {
    "id" : "63",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of the spouse of $x?", "Tell me the Alma Mater of the spouse of $x?", "What is the Alma Mater of the spouse of $x?", "What was the Alma Mater of the spouse of $x?", "Which educational institution is the Alma Mater of the spouse of $x?", "Which educational institution was the Alma Mater of the spouse of $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "Sylvia Plath",
        "uri" : "http://dbpedia.org/resource/Sylvia_Plath"
      }, {
        "label" : "Joanne Whalley",
        "uri" : "http://dbpedia.org/resource/Joanne_Whalley"
      }, {
        "label" : "Minnie Maddern Fiske",
        "uri" : "http://dbpedia.org/resource/Minnie_Maddern_Fiske"
      }, {
        "label" : "Padma Lakshmi",
        "uri" : "http://dbpedia.org/resource/Padma_Lakshmi"
      }, {
        "label" : "Savitri (actress)",
        "uri" : "http://dbpedia.org/resource/Savitri_(actress)"
      }, {
        "label" : "Aaron Spelling",
        "uri" : "http://dbpedia.org/resource/Aaron_Spelling"
      }, {
        "label" : "Adam Hochschild",
        "uri" : "http://dbpedia.org/resource/Adam_Hochschild"
      }, {
        "label" : "Barbara Simons",
        "uri" : "http://dbpedia.org/resource/Barbara_Simons"
      }, {
        "label" : "Candy Spelling",
        "uri" : "http://dbpedia.org/resource/Candy_Spelling"
      }, {
        "label" : "Eleanor Silliman Belknap Humphrey",
        "uri" : "http://dbpedia.org/resource/Eleanor_Silliman_Belknap_Humphrey"
      }, {
        "label" : "James Harris Simons",
        "uri" : "http://dbpedia.org/resource/James_Harris_Simons"
      }, {
        "label" : "Loret Miller Ruppe",
        "uri" : "http://dbpedia.org/resource/Loret_Miller_Ruppe"
      }, {
        "label" : "Clara McMillen",
        "uri" : "http://dbpedia.org/resource/Clara_McMillen"
      }, {
        "label" : "Deborah Walley",
        "uri" : "http://dbpedia.org/resource/Deborah_Walley"
      }, {
        "label" : "Sarala Roy",
        "uri" : "http://dbpedia.org/resource/Sarala_Roy"
      }, {
        "label" : "Lydia Lopokova",
        "uri" : "http://dbpedia.org/resource/Lydia_Lopokova"
      }, {
        "label" : "Lydia Clarke",
        "uri" : "http://dbpedia.org/resource/Lydia_Clarke"
      }, {
        "label" : "Eliza Jumel",
        "uri" : "http://dbpedia.org/resource/Eliza_Jumel"
      }, {
        "label" : "Lady Caroline Lamb",
        "uri" : "http://dbpedia.org/resource/Lady_Caroline_Lamb"
      }, {
        "label" : "Margaret Sullavan",
        "uri" : "http://dbpedia.org/resource/Margaret_Sullavan"
      }, {
        "label" : "Frank Bunker Gilbreth Sr.",
        "uri" : "http://dbpedia.org/resource/Frank_Bunker_Gilbreth_Sr."
      }, {
        "label" : "David Evans Shaw",
        "uri" : "http://dbpedia.org/resource/David_Evans_Shaw"
      }, {
        "label" : "John Jay O'Connor",
        "uri" : "http://dbpedia.org/resource/John_Jay_O'Connor"
      }, {
        "label" : "Luma de Oliveira",
        "uri" : "http://dbpedia.org/resource/Luma_de_Oliveira"
      }, {
        "label" : "Bernadette Chirac",
        "uri" : "http://dbpedia.org/resource/Bernadette_Chirac"
      }, {
        "label" : "Leonard Woolf",
        "uri" : "http://dbpedia.org/resource/Leonard_Woolf"
      }, {
        "label" : "Loki Schmidt",
        "uri" : "http://dbpedia.org/resource/Loki_Schmidt"
      }, {
        "label" : "Richard Sennett",
        "uri" : "http://dbpedia.org/resource/Richard_Sennett"
      }, {
        "label" : "Marion Mahony Griffin",
        "uri" : "http://dbpedia.org/resource/Marion_Mahony_Griffin"
      }, {
        "label" : "Robert Gist",
        "uri" : "http://dbpedia.org/resource/Robert_Gist"
      }, {
        "label" : "Bill Gates",
        "uri" : "http://dbpedia.org/resource/Bill_Gates"
      }, {
        "label" : "Carl Sagan",
        "uri" : "http://dbpedia.org/resource/Carl_Sagan"
      }, {
        "label" : "Chiang Kai-shek",
        "uri" : "http://dbpedia.org/resource/Chiang_Kai-shek"
      }, {
        "label" : "Frank Sinatra",
        "uri" : "http://dbpedia.org/resource/Frank_Sinatra"
      }, {
        "label" : "Gene Roddenberry",
        "uri" : "http://dbpedia.org/resource/Gene_Roddenberry"
      }, {
        "label" : "Jehan Sadat",
        "uri" : "http://dbpedia.org/resource/Jehan_Sadat"
      }, {
        "label" : "Sargent Shriver",
        "uri" : "http://dbpedia.org/resource/Sargent_Shriver"
      }, {
        "label" : "Sylvia Llewelyn Davies",
        "uri" : "http://dbpedia.org/resource/Sylvia_Llewelyn_Davies"
      }, {
        "label" : "Anna Maria Corazza Bildt",
        "uri" : "http://dbpedia.org/resource/Anna_Maria_Corazza_Bildt"
      }, {
        "label" : "Nelson Mandela",
        "uri" : "http://dbpedia.org/resource/Nelson_Mandela"
      }, {
        "label" : "Janette Howard",
        "uri" : "http://dbpedia.org/resource/Janette_Howard"
      }, {
        "label" : "Erika Mann",
        "uri" : "http://dbpedia.org/resource/Erika_Mann"
      }, {
        "label" : "Lynn Abbey",
        "uri" : "http://dbpedia.org/resource/Lynn_Abbey"
      }, {
        "label" : "Jane Engelhard",
        "uri" : "http://dbpedia.org/resource/Jane_Engelhard"
      }, {
        "label" : "Morfydd Llwyn Owen",
        "uri" : "http://dbpedia.org/resource/Morfydd_Llwyn_Owen"
      }, {
        "label" : "Zoë Baird",
        "uri" : "http://dbpedia.org/resource/Zoë_Baird"
      }, {
        "label" : "Henry Hillman",
        "uri" : "http://dbpedia.org/resource/Henry_Hillman"
      }, {
        "label" : "Lavinia Spencer, Countess Spencer",
        "uri" : "http://dbpedia.org/resource/Lavinia_Spencer,_Countess_Spencer"
      }, {
        "label" : "Robin Lakoff",
        "uri" : "http://dbpedia.org/resource/Robin_Lakoff"
      }, {
        "label" : "Andrea Conte",
        "uri" : "http://dbpedia.org/resource/Andrea_Conte"
      }, {
        "label" : "Cindy McCain",
        "uri" : "http://dbpedia.org/resource/Cindy_McCain"
      }, {
        "label" : "Emma Gifford",
        "uri" : "http://dbpedia.org/resource/Emma_Gifford"
      }, {
        "label" : "Lucinda Franks",
        "uri" : "http://dbpedia.org/resource/Lucinda_Franks"
      }, {
        "label" : "Lucy Baldwin, Countess Baldwin of Bewdley",
        "uri" : "http://dbpedia.org/resource/Lucy_Baldwin,_Countess_Baldwin_of_Bewdley"
      }, {
        "label" : "Betty Bumpers",
        "uri" : "http://dbpedia.org/resource/Betty_Bumpers"
      }, {
        "label" : "Brigitte Bodenheimer",
        "uri" : "http://dbpedia.org/resource/Brigitte_Bodenheimer"
      }, {
        "label" : "Bryan Greenberg",
        "uri" : "http://dbpedia.org/resource/Bryan_Greenberg"
      }, {
        "label" : "Elizabeth Dole",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Dole"
      }, {
        "label" : "Emma Georgina Rothschild",
        "uri" : "http://dbpedia.org/resource/Emma_Georgina_Rothschild"
      }, {
        "label" : "Hester Pitt, Countess of Chatham",
        "uri" : "http://dbpedia.org/resource/Hester_Pitt,_Countess_of_Chatham"
      }, {
        "label" : "Mary Stuart, Countess of Bute",
        "uri" : "http://dbpedia.org/resource/Mary_Stuart,_Countess_of_Bute"
      }, {
        "label" : "Jane Fonda",
        "uri" : "http://dbpedia.org/resource/Jane_Fonda"
      }, {
        "label" : "Emilie Benes Brzezinski",
        "uri" : "http://dbpedia.org/resource/Emilie_Benes_Brzezinski"
      }, {
        "label" : "Anna Harrison",
        "uri" : "http://dbpedia.org/resource/Anna_Harrison"
      }, {
        "label" : "Caroline Harrison",
        "uri" : "http://dbpedia.org/resource/Caroline_Harrison"
      }, {
        "label" : "Florence Harding",
        "uri" : "http://dbpedia.org/resource/Florence_Harding"
      }, {
        "label" : "Helen Herron Taft",
        "uri" : "http://dbpedia.org/resource/Helen_Herron_Taft"
      }, {
        "label" : "Hugo van Lawick",
        "uri" : "http://dbpedia.org/resource/Hugo_van_Lawick"
      }, {
        "label" : "Nabaneeta Dev Sen",
        "uri" : "http://dbpedia.org/resource/Nabaneeta_Dev_Sen"
      }, {
        "label" : "Angélica Rivera",
        "uri" : "http://dbpedia.org/resource/Angélica_Rivera"
      }, {
        "label" : "Cornelia Wallace",
        "uri" : "http://dbpedia.org/resource/Cornelia_Wallace"
      }, {
        "label" : "Pushpavalli",
        "uri" : "http://dbpedia.org/resource/Pushpavalli"
      }, {
        "label" : "Alison White (bishop)",
        "uri" : "http://dbpedia.org/resource/Alison_White_(bishop)"
      }, {
        "label" : "Anna Nicole Smith",
        "uri" : "http://dbpedia.org/resource/Anna_Nicole_Smith"
      }, {
        "label" : "Nena von Schlebrügge",
        "uri" : "http://dbpedia.org/resource/Nena_von_Schlebrügge"
      }, {
        "label" : "Olga Scheinpflugová",
        "uri" : "http://dbpedia.org/resource/Olga_Scheinpflugová"
      }, {
        "label" : "Adrienne Barbeau",
        "uri" : "http://dbpedia.org/resource/Adrienne_Barbeau"
      }, {
        "label" : "Caroline Kennedy",
        "uri" : "http://dbpedia.org/resource/Caroline_Kennedy"
      }, {
        "label" : "Fred Thompson",
        "uri" : "http://dbpedia.org/resource/Fred_Thompson"
      }, {
        "label" : "Jesse James (customizer)",
        "uri" : "http://dbpedia.org/resource/Jesse_James_(customizer)"
      }, {
        "label" : "Julia Wolfe",
        "uri" : "http://dbpedia.org/resource/Julia_Wolfe"
      }, {
        "label" : "Marta Sahagún de Fox",
        "uri" : "http://dbpedia.org/resource/Marta_Sahagún_de_Fox"
      }, {
        "label" : "Sarah Brightman",
        "uri" : "http://dbpedia.org/resource/Sarah_Brightman"
      }, {
        "label" : "Tony Benn",
        "uri" : "http://dbpedia.org/resource/Tony_Benn"
      }, {
        "label" : "Lyudmila Putina",
        "uri" : "http://dbpedia.org/resource/Lyudmila_Putina"
      }, {
        "label" : "Nicole Farhi",
        "uri" : "http://dbpedia.org/resource/Nicole_Farhi"
      }, {
        "label" : "Samantha Bee",
        "uri" : "http://dbpedia.org/resource/Samantha_Bee"
      }, {
        "label" : "Alexis Denisof",
        "uri" : "http://dbpedia.org/resource/Alexis_Denisof"
      }, {
        "label" : "Hume Cronyn",
        "uri" : "http://dbpedia.org/resource/Hume_Cronyn"
      }, {
        "label" : "Muriel Humphrey Brown",
        "uri" : "http://dbpedia.org/resource/Muriel_Humphrey_Brown"
      }, {
        "label" : "Mary Matalin",
        "uri" : "http://dbpedia.org/resource/Mary_Matalin"
      }, {
        "label" : "Michael Huffington",
        "uri" : "http://dbpedia.org/resource/Michael_Huffington"
      }, {
        "label" : "Pentti Arajärvi",
        "uri" : "http://dbpedia.org/resource/Pentti_Arajärvi"
      }, {
        "label" : "Lisbet Palme",
        "uri" : "http://dbpedia.org/resource/Lisbet_Palme"
      }, {
        "label" : "Marisabel Rodríguez de Chávez",
        "uri" : "http://dbpedia.org/resource/Marisabel_Rodríguez_de_Chávez"
      }, {
        "label" : "Wu Shu-chen",
        "uri" : "http://dbpedia.org/resource/Wu_Shu-chen"
      }, {
        "label" : "Jacqueline Beer",
        "uri" : "http://dbpedia.org/resource/Jacqueline_Beer"
      }, {
        "label" : "Dingdong Dantes",
        "uri" : "http://dbpedia.org/resource/Dingdong_Dantes"
      }, {
        "label" : "Floride Calhoun",
        "uri" : "http://dbpedia.org/resource/Floride_Calhoun"
      }, {
        "label" : "Joan Mondale",
        "uri" : "http://dbpedia.org/resource/Joan_Mondale"
      } ]
    },
    "combination" : true
  }, {
    "id" : "64",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian cleric?", "Give me the Alma Mater of Belgian clerics?", "Tell me the Alma Mater of a Belgian cleric?", "Tell me the Alma Mater of Belgian clerics?", "What is the Alma Mater of a Belgian cleric?", "What is the Alma Mater of Belgian clerics?", "What was the Alma Mater of a Belgian cleric?", "What was the Alma Mater of Belgian clerics?", "Which educational institution is the Alma Mater of a Belgian cleric?", "Which educational institution is the Alma Mater of Belgian clerics?", "Which educational institution was the Alma Mater of a Belgian cleric?", "Which educational institution was the Alma Mater of Belgian clerics?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cleric>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "65",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian office holder?", "Give me the Alma Mater of Belgian office holders?", "Tell me the Alma Mater of a Belgian office holder?", "Tell me the Alma Mater of Belgian office holders?", "What is the Alma Mater of a Belgian office holder?", "What is the Alma Mater of Belgian office holders?", "What was the Alma Mater of a Belgian office holder?", "What was the Alma Mater of Belgian office holders?", "Which educational institution is the Alma Mater of a Belgian office holder?", "Which educational institution is the Alma Mater of Belgian office holders?", "Which educational institution was the Alma Mater of a Belgian office holder?", "Which educational institution was the Alma Mater of Belgian office holders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "66",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian agent?", "Give me the Alma Mater of Belgian agents?", "Tell me the Alma Mater of a Belgian agent?", "Tell me the Alma Mater of Belgian agents?", "What is the Alma Mater of a Belgian agent?", "What is the Alma Mater of Belgian agents?", "What was the Alma Mater of a Belgian agent?", "What was the Alma Mater of Belgian agents?", "Which educational institution is the Alma Mater of a Belgian agent?", "Which educational institution is the Alma Mater of Belgian agents?", "Which educational institution was the Alma Mater of a Belgian agent?", "Which educational institution was the Alma Mater of Belgian agents?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Agent>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "67",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian economist?", "Give me the Alma Mater of Belgian economists?", "Tell me the Alma Mater of a Belgian economist?", "Tell me the Alma Mater of Belgian economists?", "What is the Alma Mater of a Belgian economist?", "What is the Alma Mater of Belgian economists?", "What was the Alma Mater of a Belgian economist?", "What was the Alma Mater of Belgian economists?", "Which educational institution is the Alma Mater of a Belgian economist?", "Which educational institution is the Alma Mater of Belgian economists?", "Which educational institution was the Alma Mater of a Belgian economist?", "Which educational institution was the Alma Mater of Belgian economists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Economist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "68",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian motorcycle rider?", "Give me the Alma Mater of Belgian motorcycle riders?", "Tell me the Alma Mater of a Belgian motorcycle rider?", "Tell me the Alma Mater of Belgian motorcycle riders?", "What is the Alma Mater of a Belgian motorcycle rider?", "What is the Alma Mater of Belgian motorcycle riders?", "What was the Alma Mater of a Belgian motorcycle rider?", "What was the Alma Mater of Belgian motorcycle riders?", "Which educational institution is the Alma Mater of a Belgian motorcycle rider?", "Which educational institution is the Alma Mater of Belgian motorcycle riders?", "Which educational institution was the Alma Mater of a Belgian motorcycle rider?", "Which educational institution was the Alma Mater of Belgian motorcycle riders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorcycleRider>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "69",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian artist?", "Give me the Alma Mater of Belgian artists?", "Tell me the Alma Mater of a Belgian artist?", "Tell me the Alma Mater of Belgian artists?", "What is the Alma Mater of a Belgian artist?", "What is the Alma Mater of Belgian artists?", "What was the Alma Mater of a Belgian artist?", "What was the Alma Mater of Belgian artists?", "Which educational institution is the Alma Mater of a Belgian artist?", "Which educational institution is the Alma Mater of Belgian artists?", "Which educational institution was the Alma Mater of a Belgian artist?", "Which educational institution was the Alma Mater of Belgian artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "70",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian athlete?", "Give me the Alma Mater of Belgian athletes?", "Tell me the Alma Mater of a Belgian athlete?", "Tell me the Alma Mater of Belgian athletes?", "What is the Alma Mater of a Belgian athlete?", "What is the Alma Mater of Belgian athletes?", "What was the Alma Mater of a Belgian athlete?", "What was the Alma Mater of Belgian athletes?", "Which educational institution is the Alma Mater of a Belgian athlete?", "Which educational institution is the Alma Mater of Belgian athletes?", "Which educational institution was the Alma Mater of a Belgian athlete?", "Which educational institution was the Alma Mater of Belgian athletes?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "71",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian scientist?", "Give me the Alma Mater of Belgian scientists?", "Tell me the Alma Mater of a Belgian scientist?", "Tell me the Alma Mater of Belgian scientists?", "What is the Alma Mater of a Belgian scientist?", "What is the Alma Mater of Belgian scientists?", "What was the Alma Mater of a Belgian scientist?", "What was the Alma Mater of Belgian scientists?", "Which educational institution is the Alma Mater of a Belgian scientist?", "Which educational institution is the Alma Mater of Belgian scientists?", "Which educational institution was the Alma Mater of a Belgian scientist?", "Which educational institution was the Alma Mater of Belgian scientists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "72",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian architect?", "Give me the Alma Mater of Belgian architects?", "Tell me the Alma Mater of a Belgian architect?", "Tell me the Alma Mater of Belgian architects?", "What is the Alma Mater of a Belgian architect?", "What is the Alma Mater of Belgian architects?", "What was the Alma Mater of a Belgian architect?", "What was the Alma Mater of Belgian architects?", "Which educational institution is the Alma Mater of a Belgian architect?", "Which educational institution is the Alma Mater of Belgian architects?", "Which educational institution was the Alma Mater of a Belgian architect?", "Which educational institution was the Alma Mater of Belgian architects?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "73",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian golf player?", "Give me the Alma Mater of Belgian golf players?", "Tell me the Alma Mater of a Belgian golf player?", "Tell me the Alma Mater of Belgian golf players?", "What is the Alma Mater of a Belgian golf player?", "What is the Alma Mater of Belgian golf players?", "What was the Alma Mater of a Belgian golf player?", "What was the Alma Mater of Belgian golf players?", "Which educational institution is the Alma Mater of a Belgian golf player?", "Which educational institution is the Alma Mater of Belgian golf players?", "Which educational institution was the Alma Mater of a Belgian golf player?", "Which educational institution was the Alma Mater of Belgian golf players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "74",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian racing driver?", "Give me the Alma Mater of Belgian racing drivers?", "Tell me the Alma Mater of a Belgian racing driver?", "Tell me the Alma Mater of Belgian racing drivers?", "What is the Alma Mater of a Belgian racing driver?", "What is the Alma Mater of Belgian racing drivers?", "What was the Alma Mater of a Belgian racing driver?", "What was the Alma Mater of Belgian racing drivers?", "Which educational institution is the Alma Mater of a Belgian racing driver?", "Which educational institution is the Alma Mater of Belgian racing drivers?", "Which educational institution was the Alma Mater of a Belgian racing driver?", "Which educational institution was the Alma Mater of Belgian racing drivers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RacingDriver>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "75",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian politician?", "Give me the Alma Mater of Belgian politicians?", "Tell me the Alma Mater of a Belgian politician?", "Tell me the Alma Mater of Belgian politicians?", "What is the Alma Mater of a Belgian politician?", "What is the Alma Mater of Belgian politicians?", "What was the Alma Mater of a Belgian politician?", "What was the Alma Mater of Belgian politicians?", "Which educational institution is the Alma Mater of a Belgian politician?", "Which educational institution is the Alma Mater of Belgian politicians?", "Which educational institution was the Alma Mater of a Belgian politician?", "Which educational institution was the Alma Mater of Belgian politicians?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "76",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian swimmer?", "Give me the Alma Mater of Belgian swimmers?", "Tell me the Alma Mater of a Belgian swimmer?", "Tell me the Alma Mater of Belgian swimmers?", "What is the Alma Mater of a Belgian swimmer?", "What is the Alma Mater of Belgian swimmers?", "What was the Alma Mater of a Belgian swimmer?", "What was the Alma Mater of Belgian swimmers?", "Which educational institution is the Alma Mater of a Belgian swimmer?", "Which educational institution is the Alma Mater of Belgian swimmers?", "Which educational institution was the Alma Mater of a Belgian swimmer?", "Which educational institution was the Alma Mater of Belgian swimmers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Swimmer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "77",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian volleyball player?", "Give me the Alma Mater of Belgian volleyball players?", "Tell me the Alma Mater of a Belgian volleyball player?", "Tell me the Alma Mater of Belgian volleyball players?", "What is the Alma Mater of a Belgian volleyball player?", "What is the Alma Mater of Belgian volleyball players?", "What was the Alma Mater of a Belgian volleyball player?", "What was the Alma Mater of Belgian volleyball players?", "Which educational institution is the Alma Mater of a Belgian volleyball player?", "Which educational institution is the Alma Mater of Belgian volleyball players?", "Which educational institution was the Alma Mater of a Belgian volleyball player?", "Which educational institution was the Alma Mater of Belgian volleyball players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VolleyballPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "78",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian person?", "Give me the Alma Mater of Belgian persons?", "Tell me the Alma Mater of a Belgian person?", "Tell me the Alma Mater of Belgian persons?", "What is the Alma Mater of a Belgian person?", "What is the Alma Mater of Belgian persons?", "What was the Alma Mater of a Belgian person?", "What was the Alma Mater of Belgian persons?", "Which educational institution is the Alma Mater of a Belgian person?", "Which educational institution is the Alma Mater of Belgian persons?", "Which educational institution was the Alma Mater of a Belgian person?", "Which educational institution was the Alma Mater of Belgian persons?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "79",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian Christian Bishop?", "Give me the Alma Mater of Belgian Christian Bishops?", "Tell me the Alma Mater of a Belgian Christian Bishop?", "Tell me the Alma Mater of Belgian Christian Bishops?", "What is the Alma Mater of a Belgian Christian Bishop?", "What is the Alma Mater of Belgian Christian Bishops?", "What was the Alma Mater of a Belgian Christian Bishop?", "What was the Alma Mater of Belgian Christian Bishops?", "Which educational institution is the Alma Mater of a Belgian Christian Bishop?", "Which educational institution is the Alma Mater of Belgian Christian Bishops?", "Which educational institution was the Alma Mater of a Belgian Christian Bishop?", "Which educational institution was the Alma Mater of Belgian Christian Bishops?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ChristianBishop>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "80",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian comics creator?", "Give me the Alma Mater of Belgian comics creators?", "Tell me the Alma Mater of a Belgian comics creator?", "Tell me the Alma Mater of Belgian comics creators?", "What is the Alma Mater of a Belgian comics creator?", "What is the Alma Mater of Belgian comics creators?", "What was the Alma Mater of a Belgian comics creator?", "What was the Alma Mater of Belgian comics creators?", "Which educational institution is the Alma Mater of a Belgian comics creator?", "Which educational institution is the Alma Mater of Belgian comics creators?", "Which educational institution was the Alma Mater of a Belgian comics creator?", "Which educational institution was the Alma Mater of Belgian comics creators?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCreator>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "81",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian writer?", "Give me the Alma Mater of Belgian writers?", "Tell me the Alma Mater of a Belgian writer?", "Tell me the Alma Mater of Belgian writers?", "What is the Alma Mater of a Belgian writer?", "What is the Alma Mater of Belgian writers?", "What was the Alma Mater of a Belgian writer?", "What was the Alma Mater of Belgian writers?", "Which educational institution is the Alma Mater of a Belgian writer?", "Which educational institution is the Alma Mater of Belgian writers?", "Which educational institution was the Alma Mater of a Belgian writer?", "Which educational institution was the Alma Mater of Belgian writers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "82",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian motorsport racer?", "Give me the Alma Mater of Belgian motorsport racers?", "Tell me the Alma Mater of a Belgian motorsport racer?", "Tell me the Alma Mater of Belgian motorsport racers?", "What is the Alma Mater of a Belgian motorsport racer?", "What is the Alma Mater of Belgian motorsport racers?", "What was the Alma Mater of a Belgian motorsport racer?", "What was the Alma Mater of Belgian motorsport racers?", "Which educational institution is the Alma Mater of a Belgian motorsport racer?", "Which educational institution is the Alma Mater of Belgian motorsport racers?", "Which educational institution was the Alma Mater of a Belgian motorsport racer?", "Which educational institution was the Alma Mater of Belgian motorsport racers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorsportRacer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "83",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian musical artist?", "Give me the Alma Mater of Belgian musical artists?", "Tell me the Alma Mater of a Belgian musical artist?", "Tell me the Alma Mater of Belgian musical artists?", "What is the Alma Mater of a Belgian musical artist?", "What is the Alma Mater of Belgian musical artists?", "What was the Alma Mater of a Belgian musical artist?", "What was the Alma Mater of Belgian musical artists?", "Which educational institution is the Alma Mater of a Belgian musical artist?", "Which educational institution is the Alma Mater of Belgian musical artists?", "Which educational institution was the Alma Mater of a Belgian musical artist?", "Which educational institution was the Alma Mater of Belgian musical artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "84",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of the spouse of $x?", "Tell me the birth date of the spouse of $x?", "What is the birth date of the spouse of $x?", "What was the birth date of the spouse of $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "Andrzej Wajda",
        "uri" : "http://dbpedia.org/resource/Andrzej_Wajda"
      }, {
        "label" : "Brad Pitt",
        "uri" : "http://dbpedia.org/resource/Brad_Pitt"
      }, {
        "label" : "Carole Lombard",
        "uri" : "http://dbpedia.org/resource/Carole_Lombard"
      }, {
        "label" : "Caroline of Brunswick",
        "uri" : "http://dbpedia.org/resource/Caroline_of_Brunswick"
      }, {
        "label" : "Catherine I of Russia",
        "uri" : "http://dbpedia.org/resource/Catherine_I_of_Russia"
      }, {
        "label" : "Christopher Lambert",
        "uri" : "http://dbpedia.org/resource/Christopher_Lambert"
      }, {
        "label" : "Clark Gable",
        "uri" : "http://dbpedia.org/resource/Clark_Gable"
      }, {
        "label" : "Cnut the Great",
        "uri" : "http://dbpedia.org/resource/Cnut_the_Great"
      }, {
        "label" : "Edmond Hamilton",
        "uri" : "http://dbpedia.org/resource/Edmond_Hamilton"
      }, {
        "label" : "Elizabeth Taylor",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Taylor"
      }, {
        "label" : "Elizabeth Woodville",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Woodville"
      }, {
        "label" : "Emma of Normandy",
        "uri" : "http://dbpedia.org/resource/Emma_of_Normandy"
      }, {
        "label" : "George IV of the United Kingdom",
        "uri" : "http://dbpedia.org/resource/George_IV_of_the_United_Kingdom"
      }, {
        "label" : "Gwyneth Paltrow",
        "uri" : "http://dbpedia.org/resource/Gwyneth_Paltrow"
      }, {
        "label" : "Ingrid Bergman",
        "uri" : "http://dbpedia.org/resource/Ingrid_Bergman"
      }, {
        "label" : "Jennifer Aniston",
        "uri" : "http://dbpedia.org/resource/Jennifer_Aniston"
      }, {
        "label" : "Leigh Brackett",
        "uri" : "http://dbpedia.org/resource/Leigh_Brackett"
      }, {
        "label" : "Louis XVI of France",
        "uri" : "http://dbpedia.org/resource/Louis_XVI_of_France"
      }, {
        "label" : "Marie Antoinette",
        "uri" : "http://dbpedia.org/resource/Marie_Antoinette"
      }, {
        "label" : "Peter the Great",
        "uri" : "http://dbpedia.org/resource/Peter_the_Great"
      }, {
        "label" : "Richard Burton",
        "uri" : "http://dbpedia.org/resource/Richard_Burton"
      }, {
        "label" : "Roberto Rossellini",
        "uri" : "http://dbpedia.org/resource/Roberto_Rossellini"
      }, {
        "label" : "Salman Rushdie",
        "uri" : "http://dbpedia.org/resource/Salman_Rushdie"
      }, {
        "label" : "Sylvia Plath",
        "uri" : "http://dbpedia.org/resource/Sylvia_Plath"
      }, {
        "label" : "Ted Hughes",
        "uri" : "http://dbpedia.org/resource/Ted_Hughes"
      }, {
        "label" : "Theophanu",
        "uri" : "http://dbpedia.org/resource/Theophanu"
      }, {
        "label" : "Val Kilmer",
        "uri" : "http://dbpedia.org/resource/Val_Kilmer"
      }, {
        "label" : "Vivien Leigh",
        "uri" : "http://dbpedia.org/resource/Vivien_Leigh"
      }, {
        "label" : "Camille Flammarion",
        "uri" : "http://dbpedia.org/resource/Camille_Flammarion"
      }, {
        "label" : "Chris Martin",
        "uri" : "http://dbpedia.org/resource/Chris_Martin"
      }, {
        "label" : "Céline Bara",
        "uri" : "http://dbpedia.org/resource/Céline_Bara"
      }, {
        "label" : "Dennis Quaid",
        "uri" : "http://dbpedia.org/resource/Dennis_Quaid"
      }, {
        "label" : "Joanne Whalley",
        "uri" : "http://dbpedia.org/resource/Joanne_Whalley"
      }, {
        "label" : "John Grey of Groby",
        "uri" : "http://dbpedia.org/resource/John_Grey_of_Groby"
      }, {
        "label" : "Minnie Maddern Fiske",
        "uri" : "http://dbpedia.org/resource/Minnie_Maddern_Fiske"
      }, {
        "label" : "Padma Lakshmi",
        "uri" : "http://dbpedia.org/resource/Padma_Lakshmi"
      }, {
        "label" : "Talisa Soto",
        "uri" : "http://dbpedia.org/resource/Talisa_Soto"
      }, {
        "label" : "Aaron Spelling",
        "uri" : "http://dbpedia.org/resource/Aaron_Spelling"
      }, {
        "label" : "Adam Hochschild",
        "uri" : "http://dbpedia.org/resource/Adam_Hochschild"
      }, {
        "label" : "Alastair Dunnett",
        "uri" : "http://dbpedia.org/resource/Alastair_Dunnett"
      }, {
        "label" : "Arlie Russell Hochschild",
        "uri" : "http://dbpedia.org/resource/Arlie_Russell_Hochschild"
      }, {
        "label" : "Beata Tyszkiewicz",
        "uri" : "http://dbpedia.org/resource/Beata_Tyszkiewicz"
      }, {
        "label" : "Benjamin Bratt",
        "uri" : "http://dbpedia.org/resource/Benjamin_Bratt"
      }, {
        "label" : "Bunker Roy",
        "uri" : "http://dbpedia.org/resource/Bunker_Roy"
      }, {
        "label" : "Candy Spelling",
        "uri" : "http://dbpedia.org/resource/Candy_Spelling"
      }, {
        "label" : "Cyrille Bara",
        "uri" : "http://dbpedia.org/resource/Cyrille_Bara"
      }, {
        "label" : "Dorothy Dunnett",
        "uri" : "http://dbpedia.org/resource/Dorothy_Dunnett"
      }, {
        "label" : "Ehud Olmert",
        "uri" : "http://dbpedia.org/resource/Ehud_Olmert"
      }, {
        "label" : "Elvira of Castile, Queen of León",
        "uri" : "http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_León"
      }, {
        "label" : "Gemini Ganesan",
        "uri" : "http://dbpedia.org/resource/Gemini_Ganesan"
      }, {
        "label" : "Harriet Smithson",
        "uri" : "http://dbpedia.org/resource/Harriet_Smithson"
      }, {
        "label" : "James Harris Simons",
        "uri" : "http://dbpedia.org/resource/James_Harris_Simons"
      }, {
        "label" : "Lewis Craig Humphrey",
        "uri" : "http://dbpedia.org/resource/Lewis_Craig_Humphrey"
      }, {
        "label" : "Paul Hasluck",
        "uri" : "http://dbpedia.org/resource/Paul_Hasluck"
      }, {
        "label" : "Paula Dockery",
        "uri" : "http://dbpedia.org/resource/Paula_Dockery"
      }, {
        "label" : "Robert Sidney, 2nd Earl of Leicester",
        "uri" : "http://dbpedia.org/resource/Robert_Sidney,_2nd_Earl_of_Leicester"
      }, {
        "label" : "Rolly Bester",
        "uri" : "http://dbpedia.org/resource/Rolly_Bester"
      }, {
        "label" : "Ruy Guerra",
        "uri" : "http://dbpedia.org/resource/Ruy_Guerra"
      }, {
        "label" : "Clara McMillen",
        "uri" : "http://dbpedia.org/resource/Clara_McMillen"
      }, {
        "label" : "Diana Gould (dancer)",
        "uri" : "http://dbpedia.org/resource/Diana_Gould_(dancer)"
      }, {
        "label" : "Sidney Miller (actor)",
        "uri" : "http://dbpedia.org/resource/Sidney_Miller_(actor)"
      }, {
        "label" : "Sir Edward Burgh",
        "uri" : "http://dbpedia.org/resource/Sir_Edward_Burgh"
      }, {
        "label" : "Henry Morgenthau Jr.",
        "uri" : "http://dbpedia.org/resource/Henry_Morgenthau_Jr."
      }, {
        "label" : "Lydia Lopokova",
        "uri" : "http://dbpedia.org/resource/Lydia_Lopokova"
      }, {
        "label" : "Maxwell Reed",
        "uri" : "http://dbpedia.org/resource/Maxwell_Reed"
      }, {
        "label" : "Sigrid the Haughty",
        "uri" : "http://dbpedia.org/resource/Sigrid_the_Haughty"
      }, {
        "label" : "Elena Ceaușescu",
        "uri" : "http://dbpedia.org/resource/Elena_Ceaușescu"
      }, {
        "label" : "Lydia Clarke",
        "uri" : "http://dbpedia.org/resource/Lydia_Clarke"
      }, {
        "label" : "Ruqaiya Sultan Begum",
        "uri" : "http://dbpedia.org/resource/Ruqaiya_Sultan_Begum"
      }, {
        "label" : "Eliza Jumel",
        "uri" : "http://dbpedia.org/resource/Eliza_Jumel"
      }, {
        "label" : "Lena Herzog",
        "uri" : "http://dbpedia.org/resource/Lena_Herzog"
      }, {
        "label" : "Katie Lee (chef)",
        "uri" : "http://dbpedia.org/resource/Katie_Lee_(chef)"
      }, {
        "label" : "Elsa Pataky",
        "uri" : "http://dbpedia.org/resource/Elsa_Pataky"
      }, {
        "label" : "Maïwenn",
        "uri" : "http://dbpedia.org/resource/Maïwenn"
      }, {
        "label" : "Tom Courtenay",
        "uri" : "http://dbpedia.org/resource/Tom_Courtenay"
      }, {
        "label" : "Christian I of Denmark",
        "uri" : "http://dbpedia.org/resource/Christian_I_of_Denmark"
      }, {
        "label" : "Edward of Westminster, Prince of Wales",
        "uri" : "http://dbpedia.org/resource/Edward_of_Westminster,_Prince_of_Wales"
      }, {
        "label" : "Joanne Woodward",
        "uri" : "http://dbpedia.org/resource/Joanne_Woodward"
      }, {
        "label" : "Lady Caroline Lamb",
        "uri" : "http://dbpedia.org/resource/Lady_Caroline_Lamb"
      }, {
        "label" : "Margaret Sullavan",
        "uri" : "http://dbpedia.org/resource/Margaret_Sullavan"
      }, {
        "label" : "Maria Fitzherbert",
        "uri" : "http://dbpedia.org/resource/Maria_Fitzherbert"
      }, {
        "label" : "Mickey Deans",
        "uri" : "http://dbpedia.org/resource/Mickey_Deans"
      }, {
        "label" : "Alice Hathaway Lee Roosevelt",
        "uri" : "http://dbpedia.org/resource/Alice_Hathaway_Lee_Roosevelt"
      }, {
        "label" : "Frank Bunker Gilbreth Sr.",
        "uri" : "http://dbpedia.org/resource/Frank_Bunker_Gilbreth_Sr."
      }, {
        "label" : "Alfred Steele",
        "uri" : "http://dbpedia.org/resource/Alfred_Steele"
      }, {
        "label" : "Barbara Hutton",
        "uri" : "http://dbpedia.org/resource/Barbara_Hutton"
      }, {
        "label" : "Sidney Luft",
        "uri" : "http://dbpedia.org/resource/Sidney_Luft"
      }, {
        "label" : "Sylvia Ashley",
        "uri" : "http://dbpedia.org/resource/Sylvia_Ashley"
      }, {
        "label" : "Salima Sultan Begum",
        "uri" : "http://dbpedia.org/resource/Salima_Sultan_Begum"
      }, {
        "label" : "Cecily Neville, Duchess of Warwick",
        "uri" : "http://dbpedia.org/resource/Cecily_Neville,_Duchess_of_Warwick"
      }, {
        "label" : "David Evans Shaw",
        "uri" : "http://dbpedia.org/resource/David_Evans_Shaw"
      }, {
        "label" : "John Jay O'Connor",
        "uri" : "http://dbpedia.org/resource/John_Jay_O'Connor"
      }, {
        "label" : "Marta Fernandez Miranda de Batista",
        "uri" : "http://dbpedia.org/resource/Marta_Fernandez_Miranda_de_Batista"
      }, {
        "label" : "Josephine Dillon",
        "uri" : "http://dbpedia.org/resource/Josephine_Dillon"
      }, {
        "label" : "Sunita Deshpande",
        "uri" : "http://dbpedia.org/resource/Sunita_Deshpande"
      }, {
        "label" : "Bettina Gorton",
        "uri" : "http://dbpedia.org/resource/Bettina_Gorton"
      }, {
        "label" : "Luma de Oliveira",
        "uri" : "http://dbpedia.org/resource/Luma_de_Oliveira"
      }, {
        "label" : "Tove of the Obotrites",
        "uri" : "http://dbpedia.org/resource/Tove_of_the_Obotrites"
      }, {
        "label" : "Gelli de Belen",
        "uri" : "http://dbpedia.org/resource/Gelli_de_Belen"
      }, {
        "label" : "Albia Dominica",
        "uri" : "http://dbpedia.org/resource/Albia_Dominica"
      } ]
    },
    "combination" : true
  }, {
    "id" : "85",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian cleric?", "Give me the birth date of Belgian clerics?", "Tell me the birth date of a Belgian cleric?", "Tell me the birth date of Belgian clerics?", "What is the birth date of a Belgian cleric?", "What is the birth date of Belgian clerics?", "What was the birth date of a Belgian cleric?", "What was the birth date of Belgian clerics?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cleric>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "86",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian office holder?", "Give me the birth date of Belgian office holders?", "Tell me the birth date of a Belgian office holder?", "Tell me the birth date of Belgian office holders?", "What is the birth date of a Belgian office holder?", "What is the birth date of Belgian office holders?", "What was the birth date of a Belgian office holder?", "What was the birth date of Belgian office holders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "87",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian agent?", "Give me the birth date of Belgian agents?", "Tell me the birth date of a Belgian agent?", "Tell me the birth date of Belgian agents?", "What is the birth date of a Belgian agent?", "What is the birth date of Belgian agents?", "What was the birth date of a Belgian agent?", "What was the birth date of Belgian agents?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Agent>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "88",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian economist?", "Give me the birth date of Belgian economists?", "Tell me the birth date of a Belgian economist?", "Tell me the birth date of Belgian economists?", "What is the birth date of a Belgian economist?", "What is the birth date of Belgian economists?", "What was the birth date of a Belgian economist?", "What was the birth date of Belgian economists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Economist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "89",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian motorcycle rider?", "Give me the birth date of Belgian motorcycle riders?", "Tell me the birth date of a Belgian motorcycle rider?", "Tell me the birth date of Belgian motorcycle riders?", "What is the birth date of a Belgian motorcycle rider?", "What is the birth date of Belgian motorcycle riders?", "What was the birth date of a Belgian motorcycle rider?", "What was the birth date of Belgian motorcycle riders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorcycleRider>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "90",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian artist?", "Give me the birth date of Belgian artists?", "Tell me the birth date of a Belgian artist?", "Tell me the birth date of Belgian artists?", "What is the birth date of a Belgian artist?", "What is the birth date of Belgian artists?", "What was the birth date of a Belgian artist?", "What was the birth date of Belgian artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "91",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian athlete?", "Give me the birth date of Belgian athletes?", "Tell me the birth date of a Belgian athlete?", "Tell me the birth date of Belgian athletes?", "What is the birth date of a Belgian athlete?", "What is the birth date of Belgian athletes?", "What was the birth date of a Belgian athlete?", "What was the birth date of Belgian athletes?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "92",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian scientist?", "Give me the birth date of Belgian scientists?", "Tell me the birth date of a Belgian scientist?", "Tell me the birth date of Belgian scientists?", "What is the birth date of a Belgian scientist?", "What is the birth date of Belgian scientists?", "What was the birth date of a Belgian scientist?", "What was the birth date of Belgian scientists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "93",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian architect?", "Give me the birth date of Belgian architects?", "Tell me the birth date of a Belgian architect?", "Tell me the birth date of Belgian architects?", "What is the birth date of a Belgian architect?", "What is the birth date of Belgian architects?", "What was the birth date of a Belgian architect?", "What was the birth date of Belgian architects?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "94",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian golf player?", "Give me the birth date of Belgian golf players?", "Tell me the birth date of a Belgian golf player?", "Tell me the birth date of Belgian golf players?", "What is the birth date of a Belgian golf player?", "What is the birth date of Belgian golf players?", "What was the birth date of a Belgian golf player?", "What was the birth date of Belgian golf players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "95",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian racing driver?", "Give me the birth date of Belgian racing drivers?", "Tell me the birth date of a Belgian racing driver?", "Tell me the birth date of Belgian racing drivers?", "What is the birth date of a Belgian racing driver?", "What is the birth date of Belgian racing drivers?", "What was the birth date of a Belgian racing driver?", "What was the birth date of Belgian racing drivers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RacingDriver>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "96",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian politician?", "Give me the birth date of Belgian politicians?", "Tell me the birth date of a Belgian politician?", "Tell me the birth date of Belgian politicians?", "What is the birth date of a Belgian politician?", "What is the birth date of Belgian politicians?", "What was the birth date of a Belgian politician?", "What was the birth date of Belgian politicians?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "97",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian swimmer?", "Give me the birth date of Belgian swimmers?", "Tell me the birth date of a Belgian swimmer?", "Tell me the birth date of Belgian swimmers?", "What is the birth date of a Belgian swimmer?", "What is the birth date of Belgian swimmers?", "What was the birth date of a Belgian swimmer?", "What was the birth date of Belgian swimmers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Swimmer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "98",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian volleyball player?", "Give me the birth date of Belgian volleyball players?", "Tell me the birth date of a Belgian volleyball player?", "Tell me the birth date of Belgian volleyball players?", "What is the birth date of a Belgian volleyball player?", "What is the birth date of Belgian volleyball players?", "What was the birth date of a Belgian volleyball player?", "What was the birth date of Belgian volleyball players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VolleyballPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "99",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian person?", "Give me the birth date of Belgian persons?", "Tell me the birth date of a Belgian person?", "Tell me the birth date of Belgian persons?", "What is the birth date of a Belgian person?", "What is the birth date of Belgian persons?", "What was the birth date of a Belgian person?", "What was the birth date of Belgian persons?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "100",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian Christian Bishop?", "Give me the birth date of Belgian Christian Bishops?", "Tell me the birth date of a Belgian Christian Bishop?", "Tell me the birth date of Belgian Christian Bishops?", "What is the birth date of a Belgian Christian Bishop?", "What is the birth date of Belgian Christian Bishops?", "What was the birth date of a Belgian Christian Bishop?", "What was the birth date of Belgian Christian Bishops?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ChristianBishop>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "101",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian comics creator?", "Give me the birth date of Belgian comics creators?", "Tell me the birth date of a Belgian comics creator?", "Tell me the birth date of Belgian comics creators?", "What is the birth date of a Belgian comics creator?", "What is the birth date of Belgian comics creators?", "What was the birth date of a Belgian comics creator?", "What was the birth date of Belgian comics creators?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCreator>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "102",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian writer?", "Give me the birth date of Belgian writers?", "Tell me the birth date of a Belgian writer?", "Tell me the birth date of Belgian writers?", "What is the birth date of a Belgian writer?", "What is the birth date of Belgian writers?", "What was the birth date of a Belgian writer?", "What was the birth date of Belgian writers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "103",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian motorsport racer?", "Give me the birth date of Belgian motorsport racers?", "Tell me the birth date of a Belgian motorsport racer?", "Tell me the birth date of Belgian motorsport racers?", "What is the birth date of a Belgian motorsport racer?", "What is the birth date of Belgian motorsport racers?", "What was the birth date of a Belgian motorsport racer?", "What was the birth date of Belgian motorsport racers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorsportRacer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "104",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian musical artist?", "Give me the birth date of Belgian musical artists?", "Tell me the birth date of a Belgian musical artist?", "Tell me the birth date of Belgian musical artists?", "What is the birth date of a Belgian musical artist?", "What is the birth date of Belgian musical artists?", "What was the birth date of a Belgian musical artist?", "What was the birth date of Belgian musical artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "105",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of the spouse of $x?", "Tell me the occupation of the spouse of $x?", "What is the occupation of the spouse of $x?", "What was the occupation of the spouse of $x?", "Which person function is the occupation of the spouse of $x?", "Which person function was the occupation of the spouse of $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "Alfred Bester",
        "uri" : "http://dbpedia.org/resource/Alfred_Bester"
      }, {
        "label" : "Brad Pitt",
        "uri" : "http://dbpedia.org/resource/Brad_Pitt"
      }, {
        "label" : "Carole Lombard",
        "uri" : "http://dbpedia.org/resource/Carole_Lombard"
      }, {
        "label" : "Christopher Lambert",
        "uri" : "http://dbpedia.org/resource/Christopher_Lambert"
      }, {
        "label" : "Clark Gable",
        "uri" : "http://dbpedia.org/resource/Clark_Gable"
      }, {
        "label" : "Edmond Hamilton",
        "uri" : "http://dbpedia.org/resource/Edmond_Hamilton"
      }, {
        "label" : "Elizabeth Taylor",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Taylor"
      }, {
        "label" : "Gwyneth Paltrow",
        "uri" : "http://dbpedia.org/resource/Gwyneth_Paltrow"
      }, {
        "label" : "Ingrid Bergman",
        "uri" : "http://dbpedia.org/resource/Ingrid_Bergman"
      }, {
        "label" : "Jennifer Aniston",
        "uri" : "http://dbpedia.org/resource/Jennifer_Aniston"
      }, {
        "label" : "Richard Burton",
        "uri" : "http://dbpedia.org/resource/Richard_Burton"
      }, {
        "label" : "Roberto Rossellini",
        "uri" : "http://dbpedia.org/resource/Roberto_Rossellini"
      }, {
        "label" : "Val Kilmer",
        "uri" : "http://dbpedia.org/resource/Val_Kilmer"
      }, {
        "label" : "Chris Martin",
        "uri" : "http://dbpedia.org/resource/Chris_Martin"
      }, {
        "label" : "Dennis Quaid",
        "uri" : "http://dbpedia.org/resource/Dennis_Quaid"
      }, {
        "label" : "Joanne Whalley",
        "uri" : "http://dbpedia.org/resource/Joanne_Whalley"
      }, {
        "label" : "Minnie Maddern Fiske",
        "uri" : "http://dbpedia.org/resource/Minnie_Maddern_Fiske"
      }, {
        "label" : "Savitri (actress)",
        "uri" : "http://dbpedia.org/resource/Savitri_(actress)"
      }, {
        "label" : "Talisa Soto",
        "uri" : "http://dbpedia.org/resource/Talisa_Soto"
      }, {
        "label" : "Aaron Spelling",
        "uri" : "http://dbpedia.org/resource/Aaron_Spelling"
      }, {
        "label" : "Alastair Dunnett",
        "uri" : "http://dbpedia.org/resource/Alastair_Dunnett"
      }, {
        "label" : "Arlie Russell Hochschild",
        "uri" : "http://dbpedia.org/resource/Arlie_Russell_Hochschild"
      }, {
        "label" : "Barbara Simons",
        "uri" : "http://dbpedia.org/resource/Barbara_Simons"
      }, {
        "label" : "Beata Tyszkiewicz",
        "uri" : "http://dbpedia.org/resource/Beata_Tyszkiewicz"
      }, {
        "label" : "Benjamin Bratt",
        "uri" : "http://dbpedia.org/resource/Benjamin_Bratt"
      }, {
        "label" : "Bunker Roy",
        "uri" : "http://dbpedia.org/resource/Bunker_Roy"
      }, {
        "label" : "Candy Spelling",
        "uri" : "http://dbpedia.org/resource/Candy_Spelling"
      }, {
        "label" : "Eleanor Silliman Belknap Humphrey",
        "uri" : "http://dbpedia.org/resource/Eleanor_Silliman_Belknap_Humphrey"
      }, {
        "label" : "Lewis Craig Humphrey",
        "uri" : "http://dbpedia.org/resource/Lewis_Craig_Humphrey"
      }, {
        "label" : "Ruy Guerra",
        "uri" : "http://dbpedia.org/resource/Ruy_Guerra"
      }, {
        "label" : "Yuri Rasovsky",
        "uri" : "http://dbpedia.org/resource/Yuri_Rasovsky"
      }, {
        "label" : "Deborah Walley",
        "uri" : "http://dbpedia.org/resource/Deborah_Walley"
      }, {
        "label" : "Sarala Roy",
        "uri" : "http://dbpedia.org/resource/Sarala_Roy"
      }, {
        "label" : "Sidney Miller (actor)",
        "uri" : "http://dbpedia.org/resource/Sidney_Miller_(actor)"
      }, {
        "label" : "Henry Morgenthau Jr.",
        "uri" : "http://dbpedia.org/resource/Henry_Morgenthau_Jr."
      }, {
        "label" : "Maxwell Reed",
        "uri" : "http://dbpedia.org/resource/Maxwell_Reed"
      }, {
        "label" : "Lydia Clarke",
        "uri" : "http://dbpedia.org/resource/Lydia_Clarke"
      }, {
        "label" : "Kiran Juneja",
        "uri" : "http://dbpedia.org/resource/Kiran_Juneja"
      }, {
        "label" : "Lena Herzog",
        "uri" : "http://dbpedia.org/resource/Lena_Herzog"
      }, {
        "label" : "Elsa Pataky",
        "uri" : "http://dbpedia.org/resource/Elsa_Pataky"
      }, {
        "label" : "Maïwenn",
        "uri" : "http://dbpedia.org/resource/Maïwenn"
      }, {
        "label" : "Joanne Woodward",
        "uri" : "http://dbpedia.org/resource/Joanne_Woodward"
      }, {
        "label" : "Margaret Sullavan",
        "uri" : "http://dbpedia.org/resource/Margaret_Sullavan"
      }, {
        "label" : "Mickey Deans",
        "uri" : "http://dbpedia.org/resource/Mickey_Deans"
      }, {
        "label" : "Gustaf Gründgens",
        "uri" : "http://dbpedia.org/resource/Gustaf_Gründgens"
      }, {
        "label" : "Frank Bunker Gilbreth Sr.",
        "uri" : "http://dbpedia.org/resource/Frank_Bunker_Gilbreth_Sr."
      }, {
        "label" : "Alfred Steele",
        "uri" : "http://dbpedia.org/resource/Alfred_Steele"
      }, {
        "label" : "Ralph Forbes",
        "uri" : "http://dbpedia.org/resource/Ralph_Forbes"
      }, {
        "label" : "Sidney Luft",
        "uri" : "http://dbpedia.org/resource/Sidney_Luft"
      }, {
        "label" : "Sylvia Ashley",
        "uri" : "http://dbpedia.org/resource/Sylvia_Ashley"
      }, {
        "label" : "David Evans Shaw",
        "uri" : "http://dbpedia.org/resource/David_Evans_Shaw"
      }, {
        "label" : "Josephine Dillon",
        "uri" : "http://dbpedia.org/resource/Josephine_Dillon"
      }, {
        "label" : "Lucy Barker",
        "uri" : "http://dbpedia.org/resource/Lucy_Barker"
      }, {
        "label" : "Sunita Deshpande",
        "uri" : "http://dbpedia.org/resource/Sunita_Deshpande"
      }, {
        "label" : "Amy Holden Jones",
        "uri" : "http://dbpedia.org/resource/Amy_Holden_Jones"
      }, {
        "label" : "Luma de Oliveira",
        "uri" : "http://dbpedia.org/resource/Luma_de_Oliveira"
      }, {
        "label" : "Gelli de Belen",
        "uri" : "http://dbpedia.org/resource/Gelli_de_Belen"
      }, {
        "label" : "Amelia Warner",
        "uri" : "http://dbpedia.org/resource/Amelia_Warner"
      }, {
        "label" : "Bianca Jagger",
        "uri" : "http://dbpedia.org/resource/Bianca_Jagger"
      }, {
        "label" : "Daniel Massey (actor)",
        "uri" : "http://dbpedia.org/resource/Daniel_Massey_(actor)"
      }, {
        "label" : "Jack Ryan (politician)",
        "uri" : "http://dbpedia.org/resource/Jack_Ryan_(politician)"
      }, {
        "label" : "Kay Adams-Corleone",
        "uri" : "http://dbpedia.org/resource/Kay_Adams-Corleone"
      }, {
        "label" : "Leonard Woolf",
        "uri" : "http://dbpedia.org/resource/Leonard_Woolf"
      }, {
        "label" : "Michael Wilding (actor)",
        "uri" : "http://dbpedia.org/resource/Michael_Wilding_(actor)"
      }, {
        "label" : "Robert Williams (actor)",
        "uri" : "http://dbpedia.org/resource/Robert_Williams_(actor)"
      }, {
        "label" : "Carl Koch (director)",
        "uri" : "http://dbpedia.org/resource/Carl_Koch_(director)"
      }, {
        "label" : "Hank Azaria",
        "uri" : "http://dbpedia.org/resource/Hank_Azaria"
      }, {
        "label" : "Shabnam",
        "uri" : "http://dbpedia.org/resource/Shabnam"
      }, {
        "label" : "Dilys Hamlett",
        "uri" : "http://dbpedia.org/resource/Dilys_Hamlett"
      }, {
        "label" : "Elizabeth Corday",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Corday"
      }, {
        "label" : "Marion Mahony Griffin",
        "uri" : "http://dbpedia.org/resource/Marion_Mahony_Griffin"
      }, {
        "label" : "Mary Hay (actress)",
        "uri" : "http://dbpedia.org/resource/Mary_Hay_(actress)"
      }, {
        "label" : "Russell Lloyd (film editor)",
        "uri" : "http://dbpedia.org/resource/Russell_Lloyd_(film_editor)"
      }, {
        "label" : "Tom Moore (actor)",
        "uri" : "http://dbpedia.org/resource/Tom_Moore_(actor)"
      }, {
        "label" : "Carlos the Jackal",
        "uri" : "http://dbpedia.org/resource/Carlos_the_Jackal"
      }, {
        "label" : "Rob Pike",
        "uri" : "http://dbpedia.org/resource/Rob_Pike"
      }, {
        "label" : "Helen Dallimore",
        "uri" : "http://dbpedia.org/resource/Helen_Dallimore"
      }, {
        "label" : "Proinsias Mac Aonghusa",
        "uri" : "http://dbpedia.org/resource/Proinsias_Mac_Aonghusa"
      }, {
        "label" : "Raza Jaffrey",
        "uri" : "http://dbpedia.org/resource/Raza_Jaffrey"
      }, {
        "label" : "Robert Gist",
        "uri" : "http://dbpedia.org/resource/Robert_Gist"
      }, {
        "label" : "Rutanya Alda",
        "uri" : "http://dbpedia.org/resource/Rutanya_Alda"
      }, {
        "label" : "Taryn Simon",
        "uri" : "http://dbpedia.org/resource/Taryn_Simon"
      }, {
        "label" : "Chrissie White",
        "uri" : "http://dbpedia.org/resource/Chrissie_White"
      }, {
        "label" : "Aaliyah",
        "uri" : "http://dbpedia.org/resource/Aaliyah"
      }, {
        "label" : "Bill Gates",
        "uri" : "http://dbpedia.org/resource/Bill_Gates"
      }, {
        "label" : "Calista Flockhart",
        "uri" : "http://dbpedia.org/resource/Calista_Flockhart"
      }, {
        "label" : "Chiang Kai-shek",
        "uri" : "http://dbpedia.org/resource/Chiang_Kai-shek"
      }, {
        "label" : "David Beckham",
        "uri" : "http://dbpedia.org/resource/David_Beckham"
      }, {
        "label" : "Frank Sinatra",
        "uri" : "http://dbpedia.org/resource/Frank_Sinatra"
      }, {
        "label" : "Gene Roddenberry",
        "uri" : "http://dbpedia.org/resource/Gene_Roddenberry"
      }, {
        "label" : "Jet Li",
        "uri" : "http://dbpedia.org/resource/Jet_Li"
      }, {
        "label" : "Nicole Kidman",
        "uri" : "http://dbpedia.org/resource/Nicole_Kidman"
      }, {
        "label" : "Patrick Macnee",
        "uri" : "http://dbpedia.org/resource/Patrick_Macnee"
      }, {
        "label" : "Roman Polanski",
        "uri" : "http://dbpedia.org/resource/Roman_Polanski"
      }, {
        "label" : "Stephen King",
        "uri" : "http://dbpedia.org/resource/Stephen_King"
      }, {
        "label" : "Anne Hathaway (Shakespeare's wife)",
        "uri" : "http://dbpedia.org/resource/Anne_Hathaway_(Shakespeare's_wife)"
      }, {
        "label" : "Evelyn Keyes",
        "uri" : "http://dbpedia.org/resource/Evelyn_Keyes"
      }, {
        "label" : "Gauri Shinde",
        "uri" : "http://dbpedia.org/resource/Gauri_Shinde"
      }, {
        "label" : "Ichirō Hatoyama",
        "uri" : "http://dbpedia.org/resource/Ichirō_Hatoyama"
      }, {
        "label" : "Jesse Birdsall",
        "uri" : "http://dbpedia.org/resource/Jesse_Birdsall"
      } ]
    },
    "combination" : true
  }, {
    "id" : "106",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian cleric?", "Give me the occupation of Belgian clerics?", "Tell me the occupation of a Belgian cleric?", "Tell me the occupation of Belgian clerics?", "What is the occupation of a Belgian cleric?", "What is the occupation of Belgian clerics?", "What was the occupation of a Belgian cleric?", "What was the occupation of Belgian clerics?", "Which person function is the occupation of a Belgian cleric?", "Which person function is the occupation of Belgian clerics?", "Which person function was the occupation of a Belgian cleric?", "Which person function was the occupation of Belgian clerics?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cleric>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "107",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian office holder?", "Give me the occupation of Belgian office holders?", "Tell me the occupation of a Belgian office holder?", "Tell me the occupation of Belgian office holders?", "What is the occupation of a Belgian office holder?", "What is the occupation of Belgian office holders?", "What was the occupation of a Belgian office holder?", "What was the occupation of Belgian office holders?", "Which person function is the occupation of a Belgian office holder?", "Which person function is the occupation of Belgian office holders?", "Which person function was the occupation of a Belgian office holder?", "Which person function was the occupation of Belgian office holders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "108",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian agent?", "Give me the occupation of Belgian agents?", "Tell me the occupation of a Belgian agent?", "Tell me the occupation of Belgian agents?", "What is the occupation of a Belgian agent?", "What is the occupation of Belgian agents?", "What was the occupation of a Belgian agent?", "What was the occupation of Belgian agents?", "Which person function is the occupation of a Belgian agent?", "Which person function is the occupation of Belgian agents?", "Which person function was the occupation of a Belgian agent?", "Which person function was the occupation of Belgian agents?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Agent>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "109",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian economist?", "Give me the occupation of Belgian economists?", "Tell me the occupation of a Belgian economist?", "Tell me the occupation of Belgian economists?", "What is the occupation of a Belgian economist?", "What is the occupation of Belgian economists?", "What was the occupation of a Belgian economist?", "What was the occupation of Belgian economists?", "Which person function is the occupation of a Belgian economist?", "Which person function is the occupation of Belgian economists?", "Which person function was the occupation of a Belgian economist?", "Which person function was the occupation of Belgian economists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Economist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "110",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian motorcycle rider?", "Give me the occupation of Belgian motorcycle riders?", "Tell me the occupation of a Belgian motorcycle rider?", "Tell me the occupation of Belgian motorcycle riders?", "What is the occupation of a Belgian motorcycle rider?", "What is the occupation of Belgian motorcycle riders?", "What was the occupation of a Belgian motorcycle rider?", "What was the occupation of Belgian motorcycle riders?", "Which person function is the occupation of a Belgian motorcycle rider?", "Which person function is the occupation of Belgian motorcycle riders?", "Which person function was the occupation of a Belgian motorcycle rider?", "Which person function was the occupation of Belgian motorcycle riders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorcycleRider>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "111",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian artist?", "Give me the occupation of Belgian artists?", "Tell me the occupation of a Belgian artist?", "Tell me the occupation of Belgian artists?", "What is the occupation of a Belgian artist?", "What is the occupation of Belgian artists?", "What was the occupation of a Belgian artist?", "What was the occupation of Belgian artists?", "Which person function is the occupation of a Belgian artist?", "Which person function is the occupation of Belgian artists?", "Which person function was the occupation of a Belgian artist?", "Which person function was the occupation of Belgian artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "112",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian athlete?", "Give me the occupation of Belgian athletes?", "Tell me the occupation of a Belgian athlete?", "Tell me the occupation of Belgian athletes?", "What is the occupation of a Belgian athlete?", "What is the occupation of Belgian athletes?", "What was the occupation of a Belgian athlete?", "What was the occupation of Belgian athletes?", "Which person function is the occupation of a Belgian athlete?", "Which person function is the occupation of Belgian athletes?", "Which person function was the occupation of a Belgian athlete?", "Which person function was the occupation of Belgian athletes?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "113",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian scientist?", "Give me the occupation of Belgian scientists?", "Tell me the occupation of a Belgian scientist?", "Tell me the occupation of Belgian scientists?", "What is the occupation of a Belgian scientist?", "What is the occupation of Belgian scientists?", "What was the occupation of a Belgian scientist?", "What was the occupation of Belgian scientists?", "Which person function is the occupation of a Belgian scientist?", "Which person function is the occupation of Belgian scientists?", "Which person function was the occupation of a Belgian scientist?", "Which person function was the occupation of Belgian scientists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "114",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian architect?", "Give me the occupation of Belgian architects?", "Tell me the occupation of a Belgian architect?", "Tell me the occupation of Belgian architects?", "What is the occupation of a Belgian architect?", "What is the occupation of Belgian architects?", "What was the occupation of a Belgian architect?", "What was the occupation of Belgian architects?", "Which person function is the occupation of a Belgian architect?", "Which person function is the occupation of Belgian architects?", "Which person function was the occupation of a Belgian architect?", "Which person function was the occupation of Belgian architects?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "115",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian golf player?", "Give me the occupation of Belgian golf players?", "Tell me the occupation of a Belgian golf player?", "Tell me the occupation of Belgian golf players?", "What is the occupation of a Belgian golf player?", "What is the occupation of Belgian golf players?", "What was the occupation of a Belgian golf player?", "What was the occupation of Belgian golf players?", "Which person function is the occupation of a Belgian golf player?", "Which person function is the occupation of Belgian golf players?", "Which person function was the occupation of a Belgian golf player?", "Which person function was the occupation of Belgian golf players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "116",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian racing driver?", "Give me the occupation of Belgian racing drivers?", "Tell me the occupation of a Belgian racing driver?", "Tell me the occupation of Belgian racing drivers?", "What is the occupation of a Belgian racing driver?", "What is the occupation of Belgian racing drivers?", "What was the occupation of a Belgian racing driver?", "What was the occupation of Belgian racing drivers?", "Which person function is the occupation of a Belgian racing driver?", "Which person function is the occupation of Belgian racing drivers?", "Which person function was the occupation of a Belgian racing driver?", "Which person function was the occupation of Belgian racing drivers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RacingDriver>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "117",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian politician?", "Give me the occupation of Belgian politicians?", "Tell me the occupation of a Belgian politician?", "Tell me the occupation of Belgian politicians?", "What is the occupation of a Belgian politician?", "What is the occupation of Belgian politicians?", "What was the occupation of a Belgian politician?", "What was the occupation of Belgian politicians?", "Which person function is the occupation of a Belgian politician?", "Which person function is the occupation of Belgian politicians?", "Which person function was the occupation of a Belgian politician?", "Which person function was the occupation of Belgian politicians?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "118",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian swimmer?", "Give me the occupation of Belgian swimmers?", "Tell me the occupation of a Belgian swimmer?", "Tell me the occupation of Belgian swimmers?", "What is the occupation of a Belgian swimmer?", "What is the occupation of Belgian swimmers?", "What was the occupation of a Belgian swimmer?", "What was the occupation of Belgian swimmers?", "Which person function is the occupation of a Belgian swimmer?", "Which person function is the occupation of Belgian swimmers?", "Which person function was the occupation of a Belgian swimmer?", "Which person function was the occupation of Belgian swimmers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Swimmer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "119",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian volleyball player?", "Give me the occupation of Belgian volleyball players?", "Tell me the occupation of a Belgian volleyball player?", "Tell me the occupation of Belgian volleyball players?", "What is the occupation of a Belgian volleyball player?", "What is the occupation of Belgian volleyball players?", "What was the occupation of a Belgian volleyball player?", "What was the occupation of Belgian volleyball players?", "Which person function is the occupation of a Belgian volleyball player?", "Which person function is the occupation of Belgian volleyball players?", "Which person function was the occupation of a Belgian volleyball player?", "Which person function was the occupation of Belgian volleyball players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VolleyballPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "120",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian person?", "Give me the occupation of Belgian persons?", "Tell me the occupation of a Belgian person?", "Tell me the occupation of Belgian persons?", "What is the occupation of a Belgian person?", "What is the occupation of Belgian persons?", "What was the occupation of a Belgian person?", "What was the occupation of Belgian persons?", "Which person function is the occupation of a Belgian person?", "Which person function is the occupation of Belgian persons?", "Which person function was the occupation of a Belgian person?", "Which person function was the occupation of Belgian persons?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "121",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian Christian Bishop?", "Give me the occupation of Belgian Christian Bishops?", "Tell me the occupation of a Belgian Christian Bishop?", "Tell me the occupation of Belgian Christian Bishops?", "What is the occupation of a Belgian Christian Bishop?", "What is the occupation of Belgian Christian Bishops?", "What was the occupation of a Belgian Christian Bishop?", "What was the occupation of Belgian Christian Bishops?", "Which person function is the occupation of a Belgian Christian Bishop?", "Which person function is the occupation of Belgian Christian Bishops?", "Which person function was the occupation of a Belgian Christian Bishop?", "Which person function was the occupation of Belgian Christian Bishops?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ChristianBishop>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "122",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian comics creator?", "Give me the occupation of Belgian comics creators?", "Tell me the occupation of a Belgian comics creator?", "Tell me the occupation of Belgian comics creators?", "What is the occupation of a Belgian comics creator?", "What is the occupation of Belgian comics creators?", "What was the occupation of a Belgian comics creator?", "What was the occupation of Belgian comics creators?", "Which person function is the occupation of a Belgian comics creator?", "Which person function is the occupation of Belgian comics creators?", "Which person function was the occupation of a Belgian comics creator?", "Which person function was the occupation of Belgian comics creators?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCreator>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "123",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian writer?", "Give me the occupation of Belgian writers?", "Tell me the occupation of a Belgian writer?", "Tell me the occupation of Belgian writers?", "What is the occupation of a Belgian writer?", "What is the occupation of Belgian writers?", "What was the occupation of a Belgian writer?", "What was the occupation of Belgian writers?", "Which person function is the occupation of a Belgian writer?", "Which person function is the occupation of Belgian writers?", "Which person function was the occupation of a Belgian writer?", "Which person function was the occupation of Belgian writers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "124",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian motorsport racer?", "Give me the occupation of Belgian motorsport racers?", "Tell me the occupation of a Belgian motorsport racer?", "Tell me the occupation of Belgian motorsport racers?", "What is the occupation of a Belgian motorsport racer?", "What is the occupation of Belgian motorsport racers?", "What was the occupation of a Belgian motorsport racer?", "What was the occupation of Belgian motorsport racers?", "Which person function is the occupation of a Belgian motorsport racer?", "Which person function is the occupation of Belgian motorsport racers?", "Which person function was the occupation of a Belgian motorsport racer?", "Which person function was the occupation of Belgian motorsport racers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorsportRacer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "125",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian musical artist?", "Give me the occupation of Belgian musical artists?", "Tell me the occupation of a Belgian musical artist?", "Tell me the occupation of Belgian musical artists?", "What is the occupation of a Belgian musical artist?", "What is the occupation of Belgian musical artists?", "What was the occupation of a Belgian musical artist?", "What was the occupation of Belgian musical artists?", "Which person function is the occupation of a Belgian musical artist?", "Which person function is the occupation of Belgian musical artists?", "Which person function was the occupation of a Belgian musical artist?", "Which person function was the occupation of Belgian musical artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "126",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of the spouse of $x?", "Tell me the birth place of the spouse of $x?", "What is the birth place of the spouse of $x?", "What was the birth place of the spouse of $x?", "Which place is the birth place of the spouse of $x?", "Which place was the birth place of the spouse of $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "Brad Pitt",
        "uri" : "http://dbpedia.org/resource/Brad_Pitt"
      }, {
        "label" : "Carole Lombard",
        "uri" : "http://dbpedia.org/resource/Carole_Lombard"
      }, {
        "label" : "Caroline of Brunswick",
        "uri" : "http://dbpedia.org/resource/Caroline_of_Brunswick"
      }, {
        "label" : "Catherine I of Russia",
        "uri" : "http://dbpedia.org/resource/Catherine_I_of_Russia"
      }, {
        "label" : "Christopher Lambert",
        "uri" : "http://dbpedia.org/resource/Christopher_Lambert"
      }, {
        "label" : "Clark Gable",
        "uri" : "http://dbpedia.org/resource/Clark_Gable"
      }, {
        "label" : "Cnut the Great",
        "uri" : "http://dbpedia.org/resource/Cnut_the_Great"
      }, {
        "label" : "Edmond Hamilton",
        "uri" : "http://dbpedia.org/resource/Edmond_Hamilton"
      }, {
        "label" : "Elizabeth Taylor",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Taylor"
      }, {
        "label" : "Emma of Normandy",
        "uri" : "http://dbpedia.org/resource/Emma_of_Normandy"
      }, {
        "label" : "George IV of the United Kingdom",
        "uri" : "http://dbpedia.org/resource/George_IV_of_the_United_Kingdom"
      }, {
        "label" : "Gwyneth Paltrow",
        "uri" : "http://dbpedia.org/resource/Gwyneth_Paltrow"
      }, {
        "label" : "Ingrid Bergman",
        "uri" : "http://dbpedia.org/resource/Ingrid_Bergman"
      }, {
        "label" : "Jennifer Aniston",
        "uri" : "http://dbpedia.org/resource/Jennifer_Aniston"
      }, {
        "label" : "Leigh Brackett",
        "uri" : "http://dbpedia.org/resource/Leigh_Brackett"
      }, {
        "label" : "Louis XVI of France",
        "uri" : "http://dbpedia.org/resource/Louis_XVI_of_France"
      }, {
        "label" : "Marie Antoinette",
        "uri" : "http://dbpedia.org/resource/Marie_Antoinette"
      }, {
        "label" : "Peter the Great",
        "uri" : "http://dbpedia.org/resource/Peter_the_Great"
      }, {
        "label" : "Richard Burton",
        "uri" : "http://dbpedia.org/resource/Richard_Burton"
      }, {
        "label" : "Roberto Rossellini",
        "uri" : "http://dbpedia.org/resource/Roberto_Rossellini"
      }, {
        "label" : "Salman Rushdie",
        "uri" : "http://dbpedia.org/resource/Salman_Rushdie"
      }, {
        "label" : "Sylvia Plath",
        "uri" : "http://dbpedia.org/resource/Sylvia_Plath"
      }, {
        "label" : "Ted Hughes",
        "uri" : "http://dbpedia.org/resource/Ted_Hughes"
      }, {
        "label" : "Theophanu",
        "uri" : "http://dbpedia.org/resource/Theophanu"
      }, {
        "label" : "Val Kilmer",
        "uri" : "http://dbpedia.org/resource/Val_Kilmer"
      }, {
        "label" : "Vivien Leigh",
        "uri" : "http://dbpedia.org/resource/Vivien_Leigh"
      }, {
        "label" : "Camille Flammarion",
        "uri" : "http://dbpedia.org/resource/Camille_Flammarion"
      }, {
        "label" : "Chris Martin",
        "uri" : "http://dbpedia.org/resource/Chris_Martin"
      }, {
        "label" : "Dennis Quaid",
        "uri" : "http://dbpedia.org/resource/Dennis_Quaid"
      }, {
        "label" : "Joanne Whalley",
        "uri" : "http://dbpedia.org/resource/Joanne_Whalley"
      }, {
        "label" : "John Grey of Groby",
        "uri" : "http://dbpedia.org/resource/John_Grey_of_Groby"
      }, {
        "label" : "Minnie Maddern Fiske",
        "uri" : "http://dbpedia.org/resource/Minnie_Maddern_Fiske"
      }, {
        "label" : "Padma Lakshmi",
        "uri" : "http://dbpedia.org/resource/Padma_Lakshmi"
      }, {
        "label" : "Adam Hochschild",
        "uri" : "http://dbpedia.org/resource/Adam_Hochschild"
      }, {
        "label" : "Arlie Russell Hochschild",
        "uri" : "http://dbpedia.org/resource/Arlie_Russell_Hochschild"
      }, {
        "label" : "Beata Tyszkiewicz",
        "uri" : "http://dbpedia.org/resource/Beata_Tyszkiewicz"
      }, {
        "label" : "Benjamin Bratt",
        "uri" : "http://dbpedia.org/resource/Benjamin_Bratt"
      }, {
        "label" : "Bunker Roy",
        "uri" : "http://dbpedia.org/resource/Bunker_Roy"
      }, {
        "label" : "Candy Spelling",
        "uri" : "http://dbpedia.org/resource/Candy_Spelling"
      }, {
        "label" : "Cyrille Bara",
        "uri" : "http://dbpedia.org/resource/Cyrille_Bara"
      }, {
        "label" : "Dorothy Dunnett",
        "uri" : "http://dbpedia.org/resource/Dorothy_Dunnett"
      }, {
        "label" : "Ehud Olmert",
        "uri" : "http://dbpedia.org/resource/Ehud_Olmert"
      }, {
        "label" : "Gemini Ganesan",
        "uri" : "http://dbpedia.org/resource/Gemini_Ganesan"
      }, {
        "label" : "Harriet Smithson",
        "uri" : "http://dbpedia.org/resource/Harriet_Smithson"
      }, {
        "label" : "Paul Hasluck",
        "uri" : "http://dbpedia.org/resource/Paul_Hasluck"
      }, {
        "label" : "Rolly Bester",
        "uri" : "http://dbpedia.org/resource/Rolly_Bester"
      }, {
        "label" : "Clara McMillen",
        "uri" : "http://dbpedia.org/resource/Clara_McMillen"
      }, {
        "label" : "Diana Gould (dancer)",
        "uri" : "http://dbpedia.org/resource/Diana_Gould_(dancer)"
      }, {
        "label" : "Sidney Miller (actor)",
        "uri" : "http://dbpedia.org/resource/Sidney_Miller_(actor)"
      }, {
        "label" : "Sir Edward Burgh",
        "uri" : "http://dbpedia.org/resource/Sir_Edward_Burgh"
      }, {
        "label" : "Lydia Lopokova",
        "uri" : "http://dbpedia.org/resource/Lydia_Lopokova"
      }, {
        "label" : "Maxwell Reed",
        "uri" : "http://dbpedia.org/resource/Maxwell_Reed"
      }, {
        "label" : "Sigrid the Haughty",
        "uri" : "http://dbpedia.org/resource/Sigrid_the_Haughty"
      }, {
        "label" : "Elena Ceaușescu",
        "uri" : "http://dbpedia.org/resource/Elena_Ceaușescu"
      }, {
        "label" : "Lydia Clarke",
        "uri" : "http://dbpedia.org/resource/Lydia_Clarke"
      }, {
        "label" : "Ruqaiya Sultan Begum",
        "uri" : "http://dbpedia.org/resource/Ruqaiya_Sultan_Begum"
      }, {
        "label" : "Eliza Jumel",
        "uri" : "http://dbpedia.org/resource/Eliza_Jumel"
      }, {
        "label" : "Lena Herzog",
        "uri" : "http://dbpedia.org/resource/Lena_Herzog"
      }, {
        "label" : "Katie Lee (chef)",
        "uri" : "http://dbpedia.org/resource/Katie_Lee_(chef)"
      }, {
        "label" : "Elsa Pataky",
        "uri" : "http://dbpedia.org/resource/Elsa_Pataky"
      }, {
        "label" : "Maïwenn",
        "uri" : "http://dbpedia.org/resource/Maïwenn"
      }, {
        "label" : "Edward of Westminster, Prince of Wales",
        "uri" : "http://dbpedia.org/resource/Edward_of_Westminster,_Prince_of_Wales"
      }, {
        "label" : "Joanne Woodward",
        "uri" : "http://dbpedia.org/resource/Joanne_Woodward"
      }, {
        "label" : "Lady Caroline Lamb",
        "uri" : "http://dbpedia.org/resource/Lady_Caroline_Lamb"
      }, {
        "label" : "Margaret Sullavan",
        "uri" : "http://dbpedia.org/resource/Margaret_Sullavan"
      }, {
        "label" : "Maria Fitzherbert",
        "uri" : "http://dbpedia.org/resource/Maria_Fitzherbert"
      }, {
        "label" : "Mickey Deans",
        "uri" : "http://dbpedia.org/resource/Mickey_Deans"
      }, {
        "label" : "Alice Hathaway Lee Roosevelt",
        "uri" : "http://dbpedia.org/resource/Alice_Hathaway_Lee_Roosevelt"
      }, {
        "label" : "Frank Bunker Gilbreth Sr.",
        "uri" : "http://dbpedia.org/resource/Frank_Bunker_Gilbreth_Sr."
      }, {
        "label" : "Alfred Steele",
        "uri" : "http://dbpedia.org/resource/Alfred_Steele"
      }, {
        "label" : "Barbara Hutton",
        "uri" : "http://dbpedia.org/resource/Barbara_Hutton"
      }, {
        "label" : "Sidney Luft",
        "uri" : "http://dbpedia.org/resource/Sidney_Luft"
      }, {
        "label" : "Sylvia Ashley",
        "uri" : "http://dbpedia.org/resource/Sylvia_Ashley"
      }, {
        "label" : "Salima Sultan Begum",
        "uri" : "http://dbpedia.org/resource/Salima_Sultan_Begum"
      }, {
        "label" : "David Evans Shaw",
        "uri" : "http://dbpedia.org/resource/David_Evans_Shaw"
      }, {
        "label" : "John Jay O'Connor",
        "uri" : "http://dbpedia.org/resource/John_Jay_O'Connor"
      }, {
        "label" : "Marta Fernandez Miranda de Batista",
        "uri" : "http://dbpedia.org/resource/Marta_Fernandez_Miranda_de_Batista"
      }, {
        "label" : "Josephine Dillon",
        "uri" : "http://dbpedia.org/resource/Josephine_Dillon"
      }, {
        "label" : "Sunita Deshpande",
        "uri" : "http://dbpedia.org/resource/Sunita_Deshpande"
      }, {
        "label" : "Bettina Gorton",
        "uri" : "http://dbpedia.org/resource/Bettina_Gorton"
      }, {
        "label" : "Tove of the Obotrites",
        "uri" : "http://dbpedia.org/resource/Tove_of_the_Obotrites"
      }, {
        "label" : "Albia Dominica",
        "uri" : "http://dbpedia.org/resource/Albia_Dominica"
      }, {
        "label" : "Antony Armstrong-Jones, 1st Earl of Snowdon",
        "uri" : "http://dbpedia.org/resource/Antony_Armstrong-Jones,_1st_Earl_of_Snowdon"
      }, {
        "label" : "Bernadette Chirac",
        "uri" : "http://dbpedia.org/resource/Bernadette_Chirac"
      }, {
        "label" : "Bianca Jagger",
        "uri" : "http://dbpedia.org/resource/Bianca_Jagger"
      }, {
        "label" : "Daniel Massey (actor)",
        "uri" : "http://dbpedia.org/resource/Daniel_Massey_(actor)"
      }, {
        "label" : "Francis I, Holy Roman Emperor",
        "uri" : "http://dbpedia.org/resource/Francis_I,_Holy_Roman_Emperor"
      }, {
        "label" : "Kitty Carlisle",
        "uri" : "http://dbpedia.org/resource/Kitty_Carlisle"
      }, {
        "label" : "Leonard Woolf",
        "uri" : "http://dbpedia.org/resource/Leonard_Woolf"
      }, {
        "label" : "Loki Schmidt",
        "uri" : "http://dbpedia.org/resource/Loki_Schmidt"
      }, {
        "label" : "Lotte Lenya",
        "uri" : "http://dbpedia.org/resource/Lotte_Lenya"
      }, {
        "label" : "Michael Wilding (actor)",
        "uri" : "http://dbpedia.org/resource/Michael_Wilding_(actor)"
      }, {
        "label" : "Mumtaz Mahal",
        "uri" : "http://dbpedia.org/resource/Mumtaz_Mahal"
      }, {
        "label" : "Princess Charlotte of Wales",
        "uri" : "http://dbpedia.org/resource/Princess_Charlotte_of_Wales"
      }, {
        "label" : "Richard Sennett",
        "uri" : "http://dbpedia.org/resource/Richard_Sennett"
      }, {
        "label" : "Robert Williams (actor)",
        "uri" : "http://dbpedia.org/resource/Robert_Williams_(actor)"
      }, {
        "label" : "Hank Azaria",
        "uri" : "http://dbpedia.org/resource/Hank_Azaria"
      }, {
        "label" : "Owen Tudor",
        "uri" : "http://dbpedia.org/resource/Owen_Tudor"
      }, {
        "label" : "John Neville, 3rd Baron Latimer",
        "uri" : "http://dbpedia.org/resource/John_Neville,_3rd_Baron_Latimer"
      }, {
        "label" : "Kirsty Sword Gusmão",
        "uri" : "http://dbpedia.org/resource/Kirsty_Sword_Gusmão"
      } ]
    },
    "combination" : true
  }, {
    "id" : "127",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian cleric?", "Give me the birth place of Belgian clerics?", "Tell me the birth place of a Belgian cleric?", "Tell me the birth place of Belgian clerics?", "What is the birth place of a Belgian cleric?", "What is the birth place of Belgian clerics?", "What was the birth place of a Belgian cleric?", "What was the birth place of Belgian clerics?", "Which place is the birth place of a Belgian cleric?", "Which place is the birth place of Belgian clerics?", "Which place was the birth place of a Belgian cleric?", "Which place was the birth place of Belgian clerics?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cleric>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "128",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian office holder?", "Give me the birth place of Belgian office holders?", "Tell me the birth place of a Belgian office holder?", "Tell me the birth place of Belgian office holders?", "What is the birth place of a Belgian office holder?", "What is the birth place of Belgian office holders?", "What was the birth place of a Belgian office holder?", "What was the birth place of Belgian office holders?", "Which place is the birth place of a Belgian office holder?", "Which place is the birth place of Belgian office holders?", "Which place was the birth place of a Belgian office holder?", "Which place was the birth place of Belgian office holders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "129",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian agent?", "Give me the birth place of Belgian agents?", "Tell me the birth place of a Belgian agent?", "Tell me the birth place of Belgian agents?", "What is the birth place of a Belgian agent?", "What is the birth place of Belgian agents?", "What was the birth place of a Belgian agent?", "What was the birth place of Belgian agents?", "Which place is the birth place of a Belgian agent?", "Which place is the birth place of Belgian agents?", "Which place was the birth place of a Belgian agent?", "Which place was the birth place of Belgian agents?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Agent>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "130",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian economist?", "Give me the birth place of Belgian economists?", "Tell me the birth place of a Belgian economist?", "Tell me the birth place of Belgian economists?", "What is the birth place of a Belgian economist?", "What is the birth place of Belgian economists?", "What was the birth place of a Belgian economist?", "What was the birth place of Belgian economists?", "Which place is the birth place of a Belgian economist?", "Which place is the birth place of Belgian economists?", "Which place was the birth place of a Belgian economist?", "Which place was the birth place of Belgian economists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Economist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "131",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian motorcycle rider?", "Give me the birth place of Belgian motorcycle riders?", "Tell me the birth place of a Belgian motorcycle rider?", "Tell me the birth place of Belgian motorcycle riders?", "What is the birth place of a Belgian motorcycle rider?", "What is the birth place of Belgian motorcycle riders?", "What was the birth place of a Belgian motorcycle rider?", "What was the birth place of Belgian motorcycle riders?", "Which place is the birth place of a Belgian motorcycle rider?", "Which place is the birth place of Belgian motorcycle riders?", "Which place was the birth place of a Belgian motorcycle rider?", "Which place was the birth place of Belgian motorcycle riders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorcycleRider>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "132",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian artist?", "Give me the birth place of Belgian artists?", "Tell me the birth place of a Belgian artist?", "Tell me the birth place of Belgian artists?", "What is the birth place of a Belgian artist?", "What is the birth place of Belgian artists?", "What was the birth place of a Belgian artist?", "What was the birth place of Belgian artists?", "Which place is the birth place of a Belgian artist?", "Which place is the birth place of Belgian artists?", "Which place was the birth place of a Belgian artist?", "Which place was the birth place of Belgian artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "133",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian athlete?", "Give me the birth place of Belgian athletes?", "Tell me the birth place of a Belgian athlete?", "Tell me the birth place of Belgian athletes?", "What is the birth place of a Belgian athlete?", "What is the birth place of Belgian athletes?", "What was the birth place of a Belgian athlete?", "What was the birth place of Belgian athletes?", "Which place is the birth place of a Belgian athlete?", "Which place is the birth place of Belgian athletes?", "Which place was the birth place of a Belgian athlete?", "Which place was the birth place of Belgian athletes?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "134",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian scientist?", "Give me the birth place of Belgian scientists?", "Tell me the birth place of a Belgian scientist?", "Tell me the birth place of Belgian scientists?", "What is the birth place of a Belgian scientist?", "What is the birth place of Belgian scientists?", "What was the birth place of a Belgian scientist?", "What was the birth place of Belgian scientists?", "Which place is the birth place of a Belgian scientist?", "Which place is the birth place of Belgian scientists?", "Which place was the birth place of a Belgian scientist?", "Which place was the birth place of Belgian scientists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "135",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian architect?", "Give me the birth place of Belgian architects?", "Tell me the birth place of a Belgian architect?", "Tell me the birth place of Belgian architects?", "What is the birth place of a Belgian architect?", "What is the birth place of Belgian architects?", "What was the birth place of a Belgian architect?", "What was the birth place of Belgian architects?", "Which place is the birth place of a Belgian architect?", "Which place is the birth place of Belgian architects?", "Which place was the birth place of a Belgian architect?", "Which place was the birth place of Belgian architects?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "136",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian golf player?", "Give me the birth place of Belgian golf players?", "Tell me the birth place of a Belgian golf player?", "Tell me the birth place of Belgian golf players?", "What is the birth place of a Belgian golf player?", "What is the birth place of Belgian golf players?", "What was the birth place of a Belgian golf player?", "What was the birth place of Belgian golf players?", "Which place is the birth place of a Belgian golf player?", "Which place is the birth place of Belgian golf players?", "Which place was the birth place of a Belgian golf player?", "Which place was the birth place of Belgian golf players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "137",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian racing driver?", "Give me the birth place of Belgian racing drivers?", "Tell me the birth place of a Belgian racing driver?", "Tell me the birth place of Belgian racing drivers?", "What is the birth place of a Belgian racing driver?", "What is the birth place of Belgian racing drivers?", "What was the birth place of a Belgian racing driver?", "What was the birth place of Belgian racing drivers?", "Which place is the birth place of a Belgian racing driver?", "Which place is the birth place of Belgian racing drivers?", "Which place was the birth place of a Belgian racing driver?", "Which place was the birth place of Belgian racing drivers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RacingDriver>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "138",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian politician?", "Give me the birth place of Belgian politicians?", "Tell me the birth place of a Belgian politician?", "Tell me the birth place of Belgian politicians?", "What is the birth place of a Belgian politician?", "What is the birth place of Belgian politicians?", "What was the birth place of a Belgian politician?", "What was the birth place of Belgian politicians?", "Which place is the birth place of a Belgian politician?", "Which place is the birth place of Belgian politicians?", "Which place was the birth place of a Belgian politician?", "Which place was the birth place of Belgian politicians?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "139",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian swimmer?", "Give me the birth place of Belgian swimmers?", "Tell me the birth place of a Belgian swimmer?", "Tell me the birth place of Belgian swimmers?", "What is the birth place of a Belgian swimmer?", "What is the birth place of Belgian swimmers?", "What was the birth place of a Belgian swimmer?", "What was the birth place of Belgian swimmers?", "Which place is the birth place of a Belgian swimmer?", "Which place is the birth place of Belgian swimmers?", "Which place was the birth place of a Belgian swimmer?", "Which place was the birth place of Belgian swimmers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Swimmer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "140",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian volleyball player?", "Give me the birth place of Belgian volleyball players?", "Tell me the birth place of a Belgian volleyball player?", "Tell me the birth place of Belgian volleyball players?", "What is the birth place of a Belgian volleyball player?", "What is the birth place of Belgian volleyball players?", "What was the birth place of a Belgian volleyball player?", "What was the birth place of Belgian volleyball players?", "Which place is the birth place of a Belgian volleyball player?", "Which place is the birth place of Belgian volleyball players?", "Which place was the birth place of a Belgian volleyball player?", "Which place was the birth place of Belgian volleyball players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VolleyballPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "141",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian person?", "Give me the birth place of Belgian persons?", "Tell me the birth place of a Belgian person?", "Tell me the birth place of Belgian persons?", "What is the birth place of a Belgian person?", "What is the birth place of Belgian persons?", "What was the birth place of a Belgian person?", "What was the birth place of Belgian persons?", "Which place is the birth place of a Belgian person?", "Which place is the birth place of Belgian persons?", "Which place was the birth place of a Belgian person?", "Which place was the birth place of Belgian persons?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "142",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian Christian Bishop?", "Give me the birth place of Belgian Christian Bishops?", "Tell me the birth place of a Belgian Christian Bishop?", "Tell me the birth place of Belgian Christian Bishops?", "What is the birth place of a Belgian Christian Bishop?", "What is the birth place of Belgian Christian Bishops?", "What was the birth place of a Belgian Christian Bishop?", "What was the birth place of Belgian Christian Bishops?", "Which place is the birth place of a Belgian Christian Bishop?", "Which place is the birth place of Belgian Christian Bishops?", "Which place was the birth place of a Belgian Christian Bishop?", "Which place was the birth place of Belgian Christian Bishops?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ChristianBishop>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "143",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian comics creator?", "Give me the birth place of Belgian comics creators?", "Tell me the birth place of a Belgian comics creator?", "Tell me the birth place of Belgian comics creators?", "What is the birth place of a Belgian comics creator?", "What is the birth place of Belgian comics creators?", "What was the birth place of a Belgian comics creator?", "What was the birth place of Belgian comics creators?", "Which place is the birth place of a Belgian comics creator?", "Which place is the birth place of Belgian comics creators?", "Which place was the birth place of a Belgian comics creator?", "Which place was the birth place of Belgian comics creators?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCreator>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "144",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian writer?", "Give me the birth place of Belgian writers?", "Tell me the birth place of a Belgian writer?", "Tell me the birth place of Belgian writers?", "What is the birth place of a Belgian writer?", "What is the birth place of Belgian writers?", "What was the birth place of a Belgian writer?", "What was the birth place of Belgian writers?", "Which place is the birth place of a Belgian writer?", "Which place is the birth place of Belgian writers?", "Which place was the birth place of a Belgian writer?", "Which place was the birth place of Belgian writers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "145",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian motorsport racer?", "Give me the birth place of Belgian motorsport racers?", "Tell me the birth place of a Belgian motorsport racer?", "Tell me the birth place of Belgian motorsport racers?", "What is the birth place of a Belgian motorsport racer?", "What is the birth place of Belgian motorsport racers?", "What was the birth place of a Belgian motorsport racer?", "What was the birth place of Belgian motorsport racers?", "Which place is the birth place of a Belgian motorsport racer?", "Which place is the birth place of Belgian motorsport racers?", "Which place was the birth place of a Belgian motorsport racer?", "Which place was the birth place of Belgian motorsport racers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorsportRacer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "146",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian musical artist?", "Give me the birth place of Belgian musical artists?", "Tell me the birth place of a Belgian musical artist?", "Tell me the birth place of Belgian musical artists?", "What is the birth place of a Belgian musical artist?", "What is the birth place of Belgian musical artists?", "What was the birth place of a Belgian musical artist?", "What was the birth place of Belgian musical artists?", "Which place is the birth place of a Belgian musical artist?", "Which place is the birth place of Belgian musical artists?", "Which place was the birth place of a Belgian musical artist?", "Which place was the birth place of Belgian musical artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "147",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of the spouse of $x?", "Tell me the spouse of the spouse of $x?", "What is the spouse of the spouse of $x?", "What was the spouse of the spouse of $x?", "Which person is the spouse of the spouse of $x?", "Which person was the spouse of the spouse of $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "Andrzej Wajda",
        "uri" : "http://dbpedia.org/resource/Andrzej_Wajda"
      }, {
        "label" : "Brad Pitt",
        "uri" : "http://dbpedia.org/resource/Brad_Pitt"
      }, {
        "label" : "Carole Lombard",
        "uri" : "http://dbpedia.org/resource/Carole_Lombard"
      }, {
        "label" : "Caroline of Brunswick",
        "uri" : "http://dbpedia.org/resource/Caroline_of_Brunswick"
      }, {
        "label" : "Catherine I of Russia",
        "uri" : "http://dbpedia.org/resource/Catherine_I_of_Russia"
      }, {
        "label" : "Clark Gable",
        "uri" : "http://dbpedia.org/resource/Clark_Gable"
      }, {
        "label" : "Cnut the Great",
        "uri" : "http://dbpedia.org/resource/Cnut_the_Great"
      }, {
        "label" : "Edmond Hamilton",
        "uri" : "http://dbpedia.org/resource/Edmond_Hamilton"
      }, {
        "label" : "Elizabeth Taylor",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Taylor"
      }, {
        "label" : "Elizabeth Woodville",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Woodville"
      }, {
        "label" : "Emma of Normandy",
        "uri" : "http://dbpedia.org/resource/Emma_of_Normandy"
      }, {
        "label" : "George IV of the United Kingdom",
        "uri" : "http://dbpedia.org/resource/George_IV_of_the_United_Kingdom"
      }, {
        "label" : "Gwyneth Paltrow",
        "uri" : "http://dbpedia.org/resource/Gwyneth_Paltrow"
      }, {
        "label" : "Ingrid Bergman",
        "uri" : "http://dbpedia.org/resource/Ingrid_Bergman"
      }, {
        "label" : "Jennifer Aniston",
        "uri" : "http://dbpedia.org/resource/Jennifer_Aniston"
      }, {
        "label" : "Leigh Brackett",
        "uri" : "http://dbpedia.org/resource/Leigh_Brackett"
      }, {
        "label" : "Louis XVI of France",
        "uri" : "http://dbpedia.org/resource/Louis_XVI_of_France"
      }, {
        "label" : "Marie Antoinette",
        "uri" : "http://dbpedia.org/resource/Marie_Antoinette"
      }, {
        "label" : "Peter the Great",
        "uri" : "http://dbpedia.org/resource/Peter_the_Great"
      }, {
        "label" : "Richard Burton",
        "uri" : "http://dbpedia.org/resource/Richard_Burton"
      }, {
        "label" : "Roberto Rossellini",
        "uri" : "http://dbpedia.org/resource/Roberto_Rossellini"
      }, {
        "label" : "Salman Rushdie",
        "uri" : "http://dbpedia.org/resource/Salman_Rushdie"
      }, {
        "label" : "Sylvia Plath",
        "uri" : "http://dbpedia.org/resource/Sylvia_Plath"
      }, {
        "label" : "Ted Hughes",
        "uri" : "http://dbpedia.org/resource/Ted_Hughes"
      }, {
        "label" : "Val Kilmer",
        "uri" : "http://dbpedia.org/resource/Val_Kilmer"
      }, {
        "label" : "Chris Martin",
        "uri" : "http://dbpedia.org/resource/Chris_Martin"
      }, {
        "label" : "Céline Bara",
        "uri" : "http://dbpedia.org/resource/Céline_Bara"
      }, {
        "label" : "Joanne Whalley",
        "uri" : "http://dbpedia.org/resource/Joanne_Whalley"
      }, {
        "label" : "John Grey of Groby",
        "uri" : "http://dbpedia.org/resource/John_Grey_of_Groby"
      }, {
        "label" : "Minnie Maddern Fiske",
        "uri" : "http://dbpedia.org/resource/Minnie_Maddern_Fiske"
      }, {
        "label" : "Padma Lakshmi",
        "uri" : "http://dbpedia.org/resource/Padma_Lakshmi"
      }, {
        "label" : "Savitri (actress)",
        "uri" : "http://dbpedia.org/resource/Savitri_(actress)"
      }, {
        "label" : "Talisa Soto",
        "uri" : "http://dbpedia.org/resource/Talisa_Soto"
      }, {
        "label" : "Aaron Spelling",
        "uri" : "http://dbpedia.org/resource/Aaron_Spelling"
      }, {
        "label" : "Adam Hochschild",
        "uri" : "http://dbpedia.org/resource/Adam_Hochschild"
      }, {
        "label" : "Alastair Dunnett",
        "uri" : "http://dbpedia.org/resource/Alastair_Dunnett"
      }, {
        "label" : "Arlie Russell Hochschild",
        "uri" : "http://dbpedia.org/resource/Arlie_Russell_Hochschild"
      }, {
        "label" : "Barbara Simons",
        "uri" : "http://dbpedia.org/resource/Barbara_Simons"
      }, {
        "label" : "Beata Tyszkiewicz",
        "uri" : "http://dbpedia.org/resource/Beata_Tyszkiewicz"
      }, {
        "label" : "Benjamin Bratt",
        "uri" : "http://dbpedia.org/resource/Benjamin_Bratt"
      }, {
        "label" : "Bermudo II of León",
        "uri" : "http://dbpedia.org/resource/Bermudo_II_of_León"
      }, {
        "label" : "Candy Spelling",
        "uri" : "http://dbpedia.org/resource/Candy_Spelling"
      }, {
        "label" : "Cyrille Bara",
        "uri" : "http://dbpedia.org/resource/Cyrille_Bara"
      }, {
        "label" : "Dorothy Dunnett",
        "uri" : "http://dbpedia.org/resource/Dorothy_Dunnett"
      }, {
        "label" : "Eleanor Silliman Belknap Humphrey",
        "uri" : "http://dbpedia.org/resource/Eleanor_Silliman_Belknap_Humphrey"
      }, {
        "label" : "Elvira of Castile, Queen of León",
        "uri" : "http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_León"
      }, {
        "label" : "Gemini Ganesan",
        "uri" : "http://dbpedia.org/resource/Gemini_Ganesan"
      }, {
        "label" : "James Harris Simons",
        "uri" : "http://dbpedia.org/resource/James_Harris_Simons"
      }, {
        "label" : "Lewis Craig Humphrey",
        "uri" : "http://dbpedia.org/resource/Lewis_Craig_Humphrey"
      }, {
        "label" : "Rolly Bester",
        "uri" : "http://dbpedia.org/resource/Rolly_Bester"
      }, {
        "label" : "Ruy Guerra",
        "uri" : "http://dbpedia.org/resource/Ruy_Guerra"
      }, {
        "label" : "Deborah Walley",
        "uri" : "http://dbpedia.org/resource/Deborah_Walley"
      }, {
        "label" : "Henry Morgenthau Jr.",
        "uri" : "http://dbpedia.org/resource/Henry_Morgenthau_Jr."
      }, {
        "label" : "Maxwell Reed",
        "uri" : "http://dbpedia.org/resource/Maxwell_Reed"
      }, {
        "label" : "Sigrid the Haughty",
        "uri" : "http://dbpedia.org/resource/Sigrid_the_Haughty"
      }, {
        "label" : "Elena Ceaușescu",
        "uri" : "http://dbpedia.org/resource/Elena_Ceaușescu"
      }, {
        "label" : "Lydia Clarke",
        "uri" : "http://dbpedia.org/resource/Lydia_Clarke"
      }, {
        "label" : "Eliza Jumel",
        "uri" : "http://dbpedia.org/resource/Eliza_Jumel"
      }, {
        "label" : "Raja Zarith Sofia",
        "uri" : "http://dbpedia.org/resource/Raja_Zarith_Sofia"
      }, {
        "label" : "Lena Herzog",
        "uri" : "http://dbpedia.org/resource/Lena_Herzog"
      }, {
        "label" : "Margaret of Soissons, Queen of Armenia",
        "uri" : "http://dbpedia.org/resource/Margaret_of_Soissons,_Queen_of_Armenia"
      }, {
        "label" : "Constance Towers",
        "uri" : "http://dbpedia.org/resource/Constance_Towers"
      }, {
        "label" : "Elsa Pataky",
        "uri" : "http://dbpedia.org/resource/Elsa_Pataky"
      }, {
        "label" : "Maïwenn",
        "uri" : "http://dbpedia.org/resource/Maïwenn"
      }, {
        "label" : "Christian I of Denmark",
        "uri" : "http://dbpedia.org/resource/Christian_I_of_Denmark"
      }, {
        "label" : "Edward of Westminster, Prince of Wales",
        "uri" : "http://dbpedia.org/resource/Edward_of_Westminster,_Prince_of_Wales"
      }, {
        "label" : "Elizabeth Fry",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Fry"
      }, {
        "label" : "Joanne Woodward",
        "uri" : "http://dbpedia.org/resource/Joanne_Woodward"
      }, {
        "label" : "Lady Caroline Lamb",
        "uri" : "http://dbpedia.org/resource/Lady_Caroline_Lamb"
      }, {
        "label" : "Margaret Sullavan",
        "uri" : "http://dbpedia.org/resource/Margaret_Sullavan"
      }, {
        "label" : "Maria Fitzherbert",
        "uri" : "http://dbpedia.org/resource/Maria_Fitzherbert"
      }, {
        "label" : "Mickey Deans",
        "uri" : "http://dbpedia.org/resource/Mickey_Deans"
      }, {
        "label" : "Gustaf Gründgens",
        "uri" : "http://dbpedia.org/resource/Gustaf_Gründgens"
      }, {
        "label" : "Alice Hathaway Lee Roosevelt",
        "uri" : "http://dbpedia.org/resource/Alice_Hathaway_Lee_Roosevelt"
      }, {
        "label" : "Frank Bunker Gilbreth Sr.",
        "uri" : "http://dbpedia.org/resource/Frank_Bunker_Gilbreth_Sr."
      }, {
        "label" : "Alfred Steele",
        "uri" : "http://dbpedia.org/resource/Alfred_Steele"
      }, {
        "label" : "Ralph Forbes",
        "uri" : "http://dbpedia.org/resource/Ralph_Forbes"
      }, {
        "label" : "Sidney Luft",
        "uri" : "http://dbpedia.org/resource/Sidney_Luft"
      }, {
        "label" : "Sylvia Ashley",
        "uri" : "http://dbpedia.org/resource/Sylvia_Ashley"
      }, {
        "label" : "David Evans Shaw",
        "uri" : "http://dbpedia.org/resource/David_Evans_Shaw"
      }, {
        "label" : "John Jay O'Connor",
        "uri" : "http://dbpedia.org/resource/John_Jay_O'Connor"
      }, {
        "label" : "Marta Fernandez Miranda de Batista",
        "uri" : "http://dbpedia.org/resource/Marta_Fernandez_Miranda_de_Batista"
      }, {
        "label" : "Josephine Dillon",
        "uri" : "http://dbpedia.org/resource/Josephine_Dillon"
      }, {
        "label" : "Lucy Barker",
        "uri" : "http://dbpedia.org/resource/Lucy_Barker"
      }, {
        "label" : "Sunita Deshpande",
        "uri" : "http://dbpedia.org/resource/Sunita_Deshpande"
      }, {
        "label" : "Bettina Gorton",
        "uri" : "http://dbpedia.org/resource/Bettina_Gorton"
      }, {
        "label" : "Luma de Oliveira",
        "uri" : "http://dbpedia.org/resource/Luma_de_Oliveira"
      }, {
        "label" : "Tove of the Obotrites",
        "uri" : "http://dbpedia.org/resource/Tove_of_the_Obotrites"
      }, {
        "label" : "Alice of Korikos",
        "uri" : "http://dbpedia.org/resource/Alice_of_Korikos"
      }, {
        "label" : "Albia Dominica",
        "uri" : "http://dbpedia.org/resource/Albia_Dominica"
      }, {
        "label" : "Amelia Warner",
        "uri" : "http://dbpedia.org/resource/Amelia_Warner"
      }, {
        "label" : "Antony Armstrong-Jones, 1st Earl of Snowdon",
        "uri" : "http://dbpedia.org/resource/Antony_Armstrong-Jones,_1st_Earl_of_Snowdon"
      }, {
        "label" : "Bernadette Chirac",
        "uri" : "http://dbpedia.org/resource/Bernadette_Chirac"
      }, {
        "label" : "Bianca Jagger",
        "uri" : "http://dbpedia.org/resource/Bianca_Jagger"
      }, {
        "label" : "Daniel Massey (actor)",
        "uri" : "http://dbpedia.org/resource/Daniel_Massey_(actor)"
      }, {
        "label" : "Ferdinand III, Holy Roman Emperor",
        "uri" : "http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor"
      }, {
        "label" : "Francis I, Holy Roman Emperor",
        "uri" : "http://dbpedia.org/resource/Francis_I,_Holy_Roman_Emperor"
      }, {
        "label" : "Jack Ryan (politician)",
        "uri" : "http://dbpedia.org/resource/Jack_Ryan_(politician)"
      }, {
        "label" : "Jacqueline, Countess of Hainaut",
        "uri" : "http://dbpedia.org/resource/Jacqueline,_Countess_of_Hainaut"
      }, {
        "label" : "Leonard Woolf",
        "uri" : "http://dbpedia.org/resource/Leonard_Woolf"
      } ]
    },
    "combination" : true
  }, {
    "id" : "148",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian cleric?", "Give me the spouse of Belgian clerics?", "Tell me the spouse of a Belgian cleric?", "Tell me the spouse of Belgian clerics?", "What is the spouse of a Belgian cleric?", "What is the spouse of Belgian clerics?", "What was the spouse of a Belgian cleric?", "What was the spouse of Belgian clerics?", "Which person is the spouse of a Belgian cleric?", "Which person is the spouse of Belgian clerics?", "Which person was the spouse of a Belgian cleric?", "Which person was the spouse of Belgian clerics?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cleric>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "149",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian office holder?", "Give me the spouse of Belgian office holders?", "Tell me the spouse of a Belgian office holder?", "Tell me the spouse of Belgian office holders?", "What is the spouse of a Belgian office holder?", "What is the spouse of Belgian office holders?", "What was the spouse of a Belgian office holder?", "What was the spouse of Belgian office holders?", "Which person is the spouse of a Belgian office holder?", "Which person is the spouse of Belgian office holders?", "Which person was the spouse of a Belgian office holder?", "Which person was the spouse of Belgian office holders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "150",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian agent?", "Give me the spouse of Belgian agents?", "Tell me the spouse of a Belgian agent?", "Tell me the spouse of Belgian agents?", "What is the spouse of a Belgian agent?", "What is the spouse of Belgian agents?", "What was the spouse of a Belgian agent?", "What was the spouse of Belgian agents?", "Which person is the spouse of a Belgian agent?", "Which person is the spouse of Belgian agents?", "Which person was the spouse of a Belgian agent?", "Which person was the spouse of Belgian agents?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Agent>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "151",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian economist?", "Give me the spouse of Belgian economists?", "Tell me the spouse of a Belgian economist?", "Tell me the spouse of Belgian economists?", "What is the spouse of a Belgian economist?", "What is the spouse of Belgian economists?", "What was the spouse of a Belgian economist?", "What was the spouse of Belgian economists?", "Which person is the spouse of a Belgian economist?", "Which person is the spouse of Belgian economists?", "Which person was the spouse of a Belgian economist?", "Which person was the spouse of Belgian economists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Economist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "152",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian motorcycle rider?", "Give me the spouse of Belgian motorcycle riders?", "Tell me the spouse of a Belgian motorcycle rider?", "Tell me the spouse of Belgian motorcycle riders?", "What is the spouse of a Belgian motorcycle rider?", "What is the spouse of Belgian motorcycle riders?", "What was the spouse of a Belgian motorcycle rider?", "What was the spouse of Belgian motorcycle riders?", "Which person is the spouse of a Belgian motorcycle rider?", "Which person is the spouse of Belgian motorcycle riders?", "Which person was the spouse of a Belgian motorcycle rider?", "Which person was the spouse of Belgian motorcycle riders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorcycleRider>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "153",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian artist?", "Give me the spouse of Belgian artists?", "Tell me the spouse of a Belgian artist?", "Tell me the spouse of Belgian artists?", "What is the spouse of a Belgian artist?", "What is the spouse of Belgian artists?", "What was the spouse of a Belgian artist?", "What was the spouse of Belgian artists?", "Which person is the spouse of a Belgian artist?", "Which person is the spouse of Belgian artists?", "Which person was the spouse of a Belgian artist?", "Which person was the spouse of Belgian artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "154",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian athlete?", "Give me the spouse of Belgian athletes?", "Tell me the spouse of a Belgian athlete?", "Tell me the spouse of Belgian athletes?", "What is the spouse of a Belgian athlete?", "What is the spouse of Belgian athletes?", "What was the spouse of a Belgian athlete?", "What was the spouse of Belgian athletes?", "Which person is the spouse of a Belgian athlete?", "Which person is the spouse of Belgian athletes?", "Which person was the spouse of a Belgian athlete?", "Which person was the spouse of Belgian athletes?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "155",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian scientist?", "Give me the spouse of Belgian scientists?", "Tell me the spouse of a Belgian scientist?", "Tell me the spouse of Belgian scientists?", "What is the spouse of a Belgian scientist?", "What is the spouse of Belgian scientists?", "What was the spouse of a Belgian scientist?", "What was the spouse of Belgian scientists?", "Which person is the spouse of a Belgian scientist?", "Which person is the spouse of Belgian scientists?", "Which person was the spouse of a Belgian scientist?", "Which person was the spouse of Belgian scientists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "156",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian architect?", "Give me the spouse of Belgian architects?", "Tell me the spouse of a Belgian architect?", "Tell me the spouse of Belgian architects?", "What is the spouse of a Belgian architect?", "What is the spouse of Belgian architects?", "What was the spouse of a Belgian architect?", "What was the spouse of Belgian architects?", "Which person is the spouse of a Belgian architect?", "Which person is the spouse of Belgian architects?", "Which person was the spouse of a Belgian architect?", "Which person was the spouse of Belgian architects?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "157",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian golf player?", "Give me the spouse of Belgian golf players?", "Tell me the spouse of a Belgian golf player?", "Tell me the spouse of Belgian golf players?", "What is the spouse of a Belgian golf player?", "What is the spouse of Belgian golf players?", "What was the spouse of a Belgian golf player?", "What was the spouse of Belgian golf players?", "Which person is the spouse of a Belgian golf player?", "Which person is the spouse of Belgian golf players?", "Which person was the spouse of a Belgian golf player?", "Which person was the spouse of Belgian golf players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "158",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian racing driver?", "Give me the spouse of Belgian racing drivers?", "Tell me the spouse of a Belgian racing driver?", "Tell me the spouse of Belgian racing drivers?", "What is the spouse of a Belgian racing driver?", "What is the spouse of Belgian racing drivers?", "What was the spouse of a Belgian racing driver?", "What was the spouse of Belgian racing drivers?", "Which person is the spouse of a Belgian racing driver?", "Which person is the spouse of Belgian racing drivers?", "Which person was the spouse of a Belgian racing driver?", "Which person was the spouse of Belgian racing drivers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RacingDriver>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "159",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian politician?", "Give me the spouse of Belgian politicians?", "Tell me the spouse of a Belgian politician?", "Tell me the spouse of Belgian politicians?", "What is the spouse of a Belgian politician?", "What is the spouse of Belgian politicians?", "What was the spouse of a Belgian politician?", "What was the spouse of Belgian politicians?", "Which person is the spouse of a Belgian politician?", "Which person is the spouse of Belgian politicians?", "Which person was the spouse of a Belgian politician?", "Which person was the spouse of Belgian politicians?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "160",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian swimmer?", "Give me the spouse of Belgian swimmers?", "Tell me the spouse of a Belgian swimmer?", "Tell me the spouse of Belgian swimmers?", "What is the spouse of a Belgian swimmer?", "What is the spouse of Belgian swimmers?", "What was the spouse of a Belgian swimmer?", "What was the spouse of Belgian swimmers?", "Which person is the spouse of a Belgian swimmer?", "Which person is the spouse of Belgian swimmers?", "Which person was the spouse of a Belgian swimmer?", "Which person was the spouse of Belgian swimmers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Swimmer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "161",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian volleyball player?", "Give me the spouse of Belgian volleyball players?", "Tell me the spouse of a Belgian volleyball player?", "Tell me the spouse of Belgian volleyball players?", "What is the spouse of a Belgian volleyball player?", "What is the spouse of Belgian volleyball players?", "What was the spouse of a Belgian volleyball player?", "What was the spouse of Belgian volleyball players?", "Which person is the spouse of a Belgian volleyball player?", "Which person is the spouse of Belgian volleyball players?", "Which person was the spouse of a Belgian volleyball player?", "Which person was the spouse of Belgian volleyball players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VolleyballPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "162",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian person?", "Give me the spouse of Belgian persons?", "Tell me the spouse of a Belgian person?", "Tell me the spouse of Belgian persons?", "What is the spouse of a Belgian person?", "What is the spouse of Belgian persons?", "What was the spouse of a Belgian person?", "What was the spouse of Belgian persons?", "Which person is the spouse of a Belgian person?", "Which person is the spouse of Belgian persons?", "Which person was the spouse of a Belgian person?", "Which person was the spouse of Belgian persons?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "163",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian Christian Bishop?", "Give me the spouse of Belgian Christian Bishops?", "Tell me the spouse of a Belgian Christian Bishop?", "Tell me the spouse of Belgian Christian Bishops?", "What is the spouse of a Belgian Christian Bishop?", "What is the spouse of Belgian Christian Bishops?", "What was the spouse of a Belgian Christian Bishop?", "What was the spouse of Belgian Christian Bishops?", "Which person is the spouse of a Belgian Christian Bishop?", "Which person is the spouse of Belgian Christian Bishops?", "Which person was the spouse of a Belgian Christian Bishop?", "Which person was the spouse of Belgian Christian Bishops?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ChristianBishop>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "164",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian comics creator?", "Give me the spouse of Belgian comics creators?", "Tell me the spouse of a Belgian comics creator?", "Tell me the spouse of Belgian comics creators?", "What is the spouse of a Belgian comics creator?", "What is the spouse of Belgian comics creators?", "What was the spouse of a Belgian comics creator?", "What was the spouse of Belgian comics creators?", "Which person is the spouse of a Belgian comics creator?", "Which person is the spouse of Belgian comics creators?", "Which person was the spouse of a Belgian comics creator?", "Which person was the spouse of Belgian comics creators?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCreator>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "165",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian writer?", "Give me the spouse of Belgian writers?", "Tell me the spouse of a Belgian writer?", "Tell me the spouse of Belgian writers?", "What is the spouse of a Belgian writer?", "What is the spouse of Belgian writers?", "What was the spouse of a Belgian writer?", "What was the spouse of Belgian writers?", "Which person is the spouse of a Belgian writer?", "Which person is the spouse of Belgian writers?", "Which person was the spouse of a Belgian writer?", "Which person was the spouse of Belgian writers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "166",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian motorsport racer?", "Give me the spouse of Belgian motorsport racers?", "Tell me the spouse of a Belgian motorsport racer?", "Tell me the spouse of Belgian motorsport racers?", "What is the spouse of a Belgian motorsport racer?", "What is the spouse of Belgian motorsport racers?", "What was the spouse of a Belgian motorsport racer?", "What was the spouse of Belgian motorsport racers?", "Which person is the spouse of a Belgian motorsport racer?", "Which person is the spouse of Belgian motorsport racers?", "Which person was the spouse of a Belgian motorsport racer?", "Which person was the spouse of Belgian motorsport racers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorsportRacer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "167",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian musical artist?", "Give me the spouse of Belgian musical artists?", "Tell me the spouse of a Belgian musical artist?", "Tell me the spouse of Belgian musical artists?", "What is the spouse of a Belgian musical artist?", "What is the spouse of Belgian musical artists?", "What was the spouse of a Belgian musical artist?", "What was the spouse of Belgian musical artists?", "Which person is the spouse of a Belgian musical artist?", "Which person is the spouse of Belgian musical artists?", "Which person was the spouse of a Belgian musical artist?", "Which person was the spouse of Belgian musical artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "168",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bordered the birth place of $x?", "What borders the birth place of $x?", "Which state bordered the birth place of $x?", "Which state borders the birth place of $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/State> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/birthPlace> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "169",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears the spouse of $x?", "What born the spouse of $x?", "Which date bears the spouse of $x?", "Which date born the spouse of $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "Andrzej Wajda",
        "uri" : "http://dbpedia.org/resource/Andrzej_Wajda"
      }, {
        "label" : "Brad Pitt",
        "uri" : "http://dbpedia.org/resource/Brad_Pitt"
      }, {
        "label" : "Carole Lombard",
        "uri" : "http://dbpedia.org/resource/Carole_Lombard"
      }, {
        "label" : "Caroline of Brunswick",
        "uri" : "http://dbpedia.org/resource/Caroline_of_Brunswick"
      }, {
        "label" : "Catherine I of Russia",
        "uri" : "http://dbpedia.org/resource/Catherine_I_of_Russia"
      }, {
        "label" : "Christopher Lambert",
        "uri" : "http://dbpedia.org/resource/Christopher_Lambert"
      }, {
        "label" : "Clark Gable",
        "uri" : "http://dbpedia.org/resource/Clark_Gable"
      }, {
        "label" : "Cnut the Great",
        "uri" : "http://dbpedia.org/resource/Cnut_the_Great"
      }, {
        "label" : "Edmond Hamilton",
        "uri" : "http://dbpedia.org/resource/Edmond_Hamilton"
      }, {
        "label" : "Elizabeth Taylor",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Taylor"
      }, {
        "label" : "Elizabeth Woodville",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Woodville"
      }, {
        "label" : "Emma of Normandy",
        "uri" : "http://dbpedia.org/resource/Emma_of_Normandy"
      }, {
        "label" : "George IV of the United Kingdom",
        "uri" : "http://dbpedia.org/resource/George_IV_of_the_United_Kingdom"
      }, {
        "label" : "Gwyneth Paltrow",
        "uri" : "http://dbpedia.org/resource/Gwyneth_Paltrow"
      }, {
        "label" : "Ingrid Bergman",
        "uri" : "http://dbpedia.org/resource/Ingrid_Bergman"
      }, {
        "label" : "Jennifer Aniston",
        "uri" : "http://dbpedia.org/resource/Jennifer_Aniston"
      }, {
        "label" : "Leigh Brackett",
        "uri" : "http://dbpedia.org/resource/Leigh_Brackett"
      }, {
        "label" : "Louis XVI of France",
        "uri" : "http://dbpedia.org/resource/Louis_XVI_of_France"
      }, {
        "label" : "Marie Antoinette",
        "uri" : "http://dbpedia.org/resource/Marie_Antoinette"
      }, {
        "label" : "Peter the Great",
        "uri" : "http://dbpedia.org/resource/Peter_the_Great"
      }, {
        "label" : "Richard Burton",
        "uri" : "http://dbpedia.org/resource/Richard_Burton"
      }, {
        "label" : "Roberto Rossellini",
        "uri" : "http://dbpedia.org/resource/Roberto_Rossellini"
      }, {
        "label" : "Salman Rushdie",
        "uri" : "http://dbpedia.org/resource/Salman_Rushdie"
      }, {
        "label" : "Sylvia Plath",
        "uri" : "http://dbpedia.org/resource/Sylvia_Plath"
      }, {
        "label" : "Ted Hughes",
        "uri" : "http://dbpedia.org/resource/Ted_Hughes"
      }, {
        "label" : "Theophanu",
        "uri" : "http://dbpedia.org/resource/Theophanu"
      }, {
        "label" : "Val Kilmer",
        "uri" : "http://dbpedia.org/resource/Val_Kilmer"
      }, {
        "label" : "Vivien Leigh",
        "uri" : "http://dbpedia.org/resource/Vivien_Leigh"
      }, {
        "label" : "Camille Flammarion",
        "uri" : "http://dbpedia.org/resource/Camille_Flammarion"
      }, {
        "label" : "Chris Martin",
        "uri" : "http://dbpedia.org/resource/Chris_Martin"
      }, {
        "label" : "Céline Bara",
        "uri" : "http://dbpedia.org/resource/Céline_Bara"
      }, {
        "label" : "Dennis Quaid",
        "uri" : "http://dbpedia.org/resource/Dennis_Quaid"
      }, {
        "label" : "Joanne Whalley",
        "uri" : "http://dbpedia.org/resource/Joanne_Whalley"
      }, {
        "label" : "John Grey of Groby",
        "uri" : "http://dbpedia.org/resource/John_Grey_of_Groby"
      }, {
        "label" : "Minnie Maddern Fiske",
        "uri" : "http://dbpedia.org/resource/Minnie_Maddern_Fiske"
      }, {
        "label" : "Padma Lakshmi",
        "uri" : "http://dbpedia.org/resource/Padma_Lakshmi"
      }, {
        "label" : "Talisa Soto",
        "uri" : "http://dbpedia.org/resource/Talisa_Soto"
      }, {
        "label" : "Aaron Spelling",
        "uri" : "http://dbpedia.org/resource/Aaron_Spelling"
      }, {
        "label" : "Adam Hochschild",
        "uri" : "http://dbpedia.org/resource/Adam_Hochschild"
      }, {
        "label" : "Alastair Dunnett",
        "uri" : "http://dbpedia.org/resource/Alastair_Dunnett"
      }, {
        "label" : "Arlie Russell Hochschild",
        "uri" : "http://dbpedia.org/resource/Arlie_Russell_Hochschild"
      }, {
        "label" : "Beata Tyszkiewicz",
        "uri" : "http://dbpedia.org/resource/Beata_Tyszkiewicz"
      }, {
        "label" : "Benjamin Bratt",
        "uri" : "http://dbpedia.org/resource/Benjamin_Bratt"
      }, {
        "label" : "Bunker Roy",
        "uri" : "http://dbpedia.org/resource/Bunker_Roy"
      }, {
        "label" : "Candy Spelling",
        "uri" : "http://dbpedia.org/resource/Candy_Spelling"
      }, {
        "label" : "Cyrille Bara",
        "uri" : "http://dbpedia.org/resource/Cyrille_Bara"
      }, {
        "label" : "Dorothy Dunnett",
        "uri" : "http://dbpedia.org/resource/Dorothy_Dunnett"
      }, {
        "label" : "Ehud Olmert",
        "uri" : "http://dbpedia.org/resource/Ehud_Olmert"
      }, {
        "label" : "Elvira of Castile, Queen of León",
        "uri" : "http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_León"
      }, {
        "label" : "Gemini Ganesan",
        "uri" : "http://dbpedia.org/resource/Gemini_Ganesan"
      }, {
        "label" : "Harriet Smithson",
        "uri" : "http://dbpedia.org/resource/Harriet_Smithson"
      }, {
        "label" : "James Harris Simons",
        "uri" : "http://dbpedia.org/resource/James_Harris_Simons"
      }, {
        "label" : "Lewis Craig Humphrey",
        "uri" : "http://dbpedia.org/resource/Lewis_Craig_Humphrey"
      }, {
        "label" : "Paul Hasluck",
        "uri" : "http://dbpedia.org/resource/Paul_Hasluck"
      }, {
        "label" : "Paula Dockery",
        "uri" : "http://dbpedia.org/resource/Paula_Dockery"
      }, {
        "label" : "Robert Sidney, 2nd Earl of Leicester",
        "uri" : "http://dbpedia.org/resource/Robert_Sidney,_2nd_Earl_of_Leicester"
      }, {
        "label" : "Rolly Bester",
        "uri" : "http://dbpedia.org/resource/Rolly_Bester"
      }, {
        "label" : "Ruy Guerra",
        "uri" : "http://dbpedia.org/resource/Ruy_Guerra"
      }, {
        "label" : "Clara McMillen",
        "uri" : "http://dbpedia.org/resource/Clara_McMillen"
      }, {
        "label" : "Diana Gould (dancer)",
        "uri" : "http://dbpedia.org/resource/Diana_Gould_(dancer)"
      }, {
        "label" : "Sidney Miller (actor)",
        "uri" : "http://dbpedia.org/resource/Sidney_Miller_(actor)"
      }, {
        "label" : "Sir Edward Burgh",
        "uri" : "http://dbpedia.org/resource/Sir_Edward_Burgh"
      }, {
        "label" : "Henry Morgenthau Jr.",
        "uri" : "http://dbpedia.org/resource/Henry_Morgenthau_Jr."
      }, {
        "label" : "Lydia Lopokova",
        "uri" : "http://dbpedia.org/resource/Lydia_Lopokova"
      }, {
        "label" : "Maxwell Reed",
        "uri" : "http://dbpedia.org/resource/Maxwell_Reed"
      }, {
        "label" : "Sigrid the Haughty",
        "uri" : "http://dbpedia.org/resource/Sigrid_the_Haughty"
      }, {
        "label" : "Elena Ceaușescu",
        "uri" : "http://dbpedia.org/resource/Elena_Ceaușescu"
      }, {
        "label" : "Lydia Clarke",
        "uri" : "http://dbpedia.org/resource/Lydia_Clarke"
      }, {
        "label" : "Ruqaiya Sultan Begum",
        "uri" : "http://dbpedia.org/resource/Ruqaiya_Sultan_Begum"
      }, {
        "label" : "Eliza Jumel",
        "uri" : "http://dbpedia.org/resource/Eliza_Jumel"
      }, {
        "label" : "Lena Herzog",
        "uri" : "http://dbpedia.org/resource/Lena_Herzog"
      }, {
        "label" : "Katie Lee (chef)",
        "uri" : "http://dbpedia.org/resource/Katie_Lee_(chef)"
      }, {
        "label" : "Elsa Pataky",
        "uri" : "http://dbpedia.org/resource/Elsa_Pataky"
      }, {
        "label" : "Maïwenn",
        "uri" : "http://dbpedia.org/resource/Maïwenn"
      }, {
        "label" : "Tom Courtenay",
        "uri" : "http://dbpedia.org/resource/Tom_Courtenay"
      }, {
        "label" : "Christian I of Denmark",
        "uri" : "http://dbpedia.org/resource/Christian_I_of_Denmark"
      }, {
        "label" : "Edward of Westminster, Prince of Wales",
        "uri" : "http://dbpedia.org/resource/Edward_of_Westminster,_Prince_of_Wales"
      }, {
        "label" : "Joanne Woodward",
        "uri" : "http://dbpedia.org/resource/Joanne_Woodward"
      }, {
        "label" : "Lady Caroline Lamb",
        "uri" : "http://dbpedia.org/resource/Lady_Caroline_Lamb"
      }, {
        "label" : "Margaret Sullavan",
        "uri" : "http://dbpedia.org/resource/Margaret_Sullavan"
      }, {
        "label" : "Maria Fitzherbert",
        "uri" : "http://dbpedia.org/resource/Maria_Fitzherbert"
      }, {
        "label" : "Mickey Deans",
        "uri" : "http://dbpedia.org/resource/Mickey_Deans"
      }, {
        "label" : "Alice Hathaway Lee Roosevelt",
        "uri" : "http://dbpedia.org/resource/Alice_Hathaway_Lee_Roosevelt"
      }, {
        "label" : "Frank Bunker Gilbreth Sr.",
        "uri" : "http://dbpedia.org/resource/Frank_Bunker_Gilbreth_Sr."
      }, {
        "label" : "Alfred Steele",
        "uri" : "http://dbpedia.org/resource/Alfred_Steele"
      }, {
        "label" : "Barbara Hutton",
        "uri" : "http://dbpedia.org/resource/Barbara_Hutton"
      }, {
        "label" : "Sidney Luft",
        "uri" : "http://dbpedia.org/resource/Sidney_Luft"
      }, {
        "label" : "Sylvia Ashley",
        "uri" : "http://dbpedia.org/resource/Sylvia_Ashley"
      }, {
        "label" : "Salima Sultan Begum",
        "uri" : "http://dbpedia.org/resource/Salima_Sultan_Begum"
      }, {
        "label" : "Cecily Neville, Duchess of Warwick",
        "uri" : "http://dbpedia.org/resource/Cecily_Neville,_Duchess_of_Warwick"
      }, {
        "label" : "David Evans Shaw",
        "uri" : "http://dbpedia.org/resource/David_Evans_Shaw"
      }, {
        "label" : "John Jay O'Connor",
        "uri" : "http://dbpedia.org/resource/John_Jay_O'Connor"
      }, {
        "label" : "Marta Fernandez Miranda de Batista",
        "uri" : "http://dbpedia.org/resource/Marta_Fernandez_Miranda_de_Batista"
      }, {
        "label" : "Josephine Dillon",
        "uri" : "http://dbpedia.org/resource/Josephine_Dillon"
      }, {
        "label" : "Sunita Deshpande",
        "uri" : "http://dbpedia.org/resource/Sunita_Deshpande"
      }, {
        "label" : "Bettina Gorton",
        "uri" : "http://dbpedia.org/resource/Bettina_Gorton"
      }, {
        "label" : "Luma de Oliveira",
        "uri" : "http://dbpedia.org/resource/Luma_de_Oliveira"
      }, {
        "label" : "Tove of the Obotrites",
        "uri" : "http://dbpedia.org/resource/Tove_of_the_Obotrites"
      }, {
        "label" : "Gelli de Belen",
        "uri" : "http://dbpedia.org/resource/Gelli_de_Belen"
      }, {
        "label" : "Albia Dominica",
        "uri" : "http://dbpedia.org/resource/Albia_Dominica"
      } ]
    },
    "combination" : true
  }, {
    "id" : "170",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian cleric?", "What bears Belgian clerics?", "What born a Belgian cleric?", "What born Belgian clerics?", "Which date bears a Belgian cleric?", "Which date bears Belgian clerics?", "Which date born a Belgian cleric?", "Which date born Belgian clerics?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cleric>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "171",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian office holder?", "What bears Belgian office holders?", "What born a Belgian office holder?", "What born Belgian office holders?", "Which date bears a Belgian office holder?", "Which date bears Belgian office holders?", "Which date born a Belgian office holder?", "Which date born Belgian office holders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "172",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian agent?", "What bears Belgian agents?", "What born a Belgian agent?", "What born Belgian agents?", "Which date bears a Belgian agent?", "Which date bears Belgian agents?", "Which date born a Belgian agent?", "Which date born Belgian agents?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Agent>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "173",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian economist?", "What bears Belgian economists?", "What born a Belgian economist?", "What born Belgian economists?", "Which date bears a Belgian economist?", "Which date bears Belgian economists?", "Which date born a Belgian economist?", "Which date born Belgian economists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Economist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "174",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian motorcycle rider?", "What bears Belgian motorcycle riders?", "What born a Belgian motorcycle rider?", "What born Belgian motorcycle riders?", "Which date bears a Belgian motorcycle rider?", "Which date bears Belgian motorcycle riders?", "Which date born a Belgian motorcycle rider?", "Which date born Belgian motorcycle riders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorcycleRider>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "175",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian artist?", "What bears Belgian artists?", "What born a Belgian artist?", "What born Belgian artists?", "Which date bears a Belgian artist?", "Which date bears Belgian artists?", "Which date born a Belgian artist?", "Which date born Belgian artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "176",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian athlete?", "What bears Belgian athletes?", "What born a Belgian athlete?", "What born Belgian athletes?", "Which date bears a Belgian athlete?", "Which date bears Belgian athletes?", "Which date born a Belgian athlete?", "Which date born Belgian athletes?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "177",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian scientist?", "What bears Belgian scientists?", "What born a Belgian scientist?", "What born Belgian scientists?", "Which date bears a Belgian scientist?", "Which date bears Belgian scientists?", "Which date born a Belgian scientist?", "Which date born Belgian scientists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "178",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian architect?", "What bears Belgian architects?", "What born a Belgian architect?", "What born Belgian architects?", "Which date bears a Belgian architect?", "Which date bears Belgian architects?", "Which date born a Belgian architect?", "Which date born Belgian architects?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "179",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian golf player?", "What bears Belgian golf players?", "What born a Belgian golf player?", "What born Belgian golf players?", "Which date bears a Belgian golf player?", "Which date bears Belgian golf players?", "Which date born a Belgian golf player?", "Which date born Belgian golf players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "180",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian racing driver?", "What bears Belgian racing drivers?", "What born a Belgian racing driver?", "What born Belgian racing drivers?", "Which date bears a Belgian racing driver?", "Which date bears Belgian racing drivers?", "Which date born a Belgian racing driver?", "Which date born Belgian racing drivers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RacingDriver>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "181",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian politician?", "What bears Belgian politicians?", "What born a Belgian politician?", "What born Belgian politicians?", "Which date bears a Belgian politician?", "Which date bears Belgian politicians?", "Which date born a Belgian politician?", "Which date born Belgian politicians?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "182",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian swimmer?", "What bears Belgian swimmers?", "What born a Belgian swimmer?", "What born Belgian swimmers?", "Which date bears a Belgian swimmer?", "Which date bears Belgian swimmers?", "Which date born a Belgian swimmer?", "Which date born Belgian swimmers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Swimmer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "183",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian volleyball player?", "What bears Belgian volleyball players?", "What born a Belgian volleyball player?", "What born Belgian volleyball players?", "Which date bears a Belgian volleyball player?", "Which date bears Belgian volleyball players?", "Which date born a Belgian volleyball player?", "Which date born Belgian volleyball players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VolleyballPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "184",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian person?", "What bears Belgian persons?", "What born a Belgian person?", "What born Belgian persons?", "Which date bears a Belgian person?", "Which date bears Belgian persons?", "Which date born a Belgian person?", "Which date born Belgian persons?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "185",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian Christian Bishop?", "What bears Belgian Christian Bishops?", "What born a Belgian Christian Bishop?", "What born Belgian Christian Bishops?", "Which date bears a Belgian Christian Bishop?", "Which date bears Belgian Christian Bishops?", "Which date born a Belgian Christian Bishop?", "Which date born Belgian Christian Bishops?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ChristianBishop>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "186",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian comics creator?", "What bears Belgian comics creators?", "What born a Belgian comics creator?", "What born Belgian comics creators?", "Which date bears a Belgian comics creator?", "Which date bears Belgian comics creators?", "Which date born a Belgian comics creator?", "Which date born Belgian comics creators?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCreator>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "187",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian writer?", "What bears Belgian writers?", "What born a Belgian writer?", "What born Belgian writers?", "Which date bears a Belgian writer?", "Which date bears Belgian writers?", "Which date born a Belgian writer?", "Which date born Belgian writers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "188",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian motorsport racer?", "What bears Belgian motorsport racers?", "What born a Belgian motorsport racer?", "What born Belgian motorsport racers?", "Which date bears a Belgian motorsport racer?", "Which date bears Belgian motorsport racers?", "Which date born a Belgian motorsport racer?", "Which date born Belgian motorsport racers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorsportRacer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "189",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bears a Belgian musical artist?", "What bears Belgian musical artists?", "What born a Belgian musical artist?", "What born Belgian musical artists?", "Which date bears a Belgian musical artist?", "Which date bears Belgian musical artists?", "Which date born a Belgian musical artist?", "Which date born Belgian musical artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "190",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "THING",
    "frameType" : "IPP",
    "sentences" : [ "When was the the birth date of $x belonged?", "When was the the birth date of $x belongs?", "When were the the birth date of $x belonged?", "When were the the birth date of $x belongs?", "Which animal was the the birth date of $x belonged?", "Which animal was the the birth date of $x belongs?", "Which animal were the the birth date of $x belonged?", "Which animal were the the birth date of $x belongs?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/species> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "191",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "THING",
    "frameType" : "IPP",
    "sentences" : [ "When was the the occupation of $x belonged?", "When was the the occupation of $x belongs?", "When were the the occupation of $x belonged?", "When were the the occupation of $x belongs?", "Which animal was the the occupation of $x belonged?", "Which animal was the the occupation of $x belongs?", "Which animal were the the occupation of $x belonged?", "Which animal were the the occupation of $x belongs?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/species> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/occupation> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "Elric of Melniboné",
        "uri" : "http://dbpedia.org/resource/Elric_of_Melniboné"
      }, {
        "label" : "Behemoth (Master and Margarita)",
        "uri" : "http://dbpedia.org/resource/Behemoth_(Master_and_Margarita)"
      }, {
        "label" : "Barry Knight (politician)",
        "uri" : "http://dbpedia.org/resource/Barry_Knight_(politician)"
      }, {
        "label" : "Sixty Rayburn",
        "uri" : "http://dbpedia.org/resource/Sixty_Rayburn"
      }, {
        "label" : "Lucy Westenra",
        "uri" : "http://dbpedia.org/resource/Lucy_Westenra"
      }, {
        "label" : "Morgan le Fay",
        "uri" : "http://dbpedia.org/resource/Morgan_le_Fay"
      }, {
        "label" : "Thelma Bates",
        "uri" : "http://dbpedia.org/resource/Thelma_Bates"
      }, {
        "label" : "Sea Hag",
        "uri" : "http://dbpedia.org/resource/Sea_Hag"
      }, {
        "label" : "Max Headroom (character)",
        "uri" : "http://dbpedia.org/resource/Max_Headroom_(character)"
      }, {
        "label" : "Brusher Mills",
        "uri" : "http://dbpedia.org/resource/Brusher_Mills"
      }, {
        "label" : "Norman Thelwell",
        "uri" : "http://dbpedia.org/resource/Norman_Thelwell"
      }, {
        "label" : "Harvey Peltier Sr.",
        "uri" : "http://dbpedia.org/resource/Harvey_Peltier_Sr."
      }, {
        "label" : "Ella Dee",
        "uri" : "http://dbpedia.org/resource/Ella_Dee"
      }, {
        "label" : "Albert Stewart Meek",
        "uri" : "http://dbpedia.org/resource/Albert_Stewart_Meek"
      }, {
        "label" : "Ursula (character)",
        "uri" : "http://dbpedia.org/resource/Ursula_(character)"
      }, {
        "label" : "Sybil Leek",
        "uri" : "http://dbpedia.org/resource/Sybil_Leek"
      }, {
        "label" : "David Gessner",
        "uri" : "http://dbpedia.org/resource/David_Gessner"
      }, {
        "label" : "Geoff Holder",
        "uri" : "http://dbpedia.org/resource/Geoff_Holder"
      }, {
        "label" : "Chuck E. Cheese (character)",
        "uri" : "http://dbpedia.org/resource/Chuck_E._Cheese_(character)"
      }, {
        "label" : "List of The Neverending Story characters",
        "uri" : "http://dbpedia.org/resource/List_of_The_Neverending_Story_characters"
      }, {
        "label" : "Dave Elsey",
        "uri" : "http://dbpedia.org/resource/Dave_Elsey"
      }, {
        "label" : "Thulsa Doom",
        "uri" : "http://dbpedia.org/resource/Thulsa_Doom"
      }, {
        "label" : "Mallory (Sliders)",
        "uri" : "http://dbpedia.org/resource/Mallory_(Sliders)"
      }, {
        "label" : "Chris McKinstry",
        "uri" : "http://dbpedia.org/resource/Chris_McKinstry"
      }, {
        "label" : "Maleficent",
        "uri" : "http://dbpedia.org/resource/Maleficent"
      }, {
        "label" : "Evil Queen (Disney)",
        "uri" : "http://dbpedia.org/resource/Evil_Queen_(Disney)"
      }, {
        "label" : "Morgan W. Walker Jr.",
        "uri" : "http://dbpedia.org/resource/Morgan_W._Walker_Jr."
      }, {
        "label" : "Cecil Williamson",
        "uri" : "http://dbpedia.org/resource/Cecil_Williamson"
      }, {
        "label" : "Joe Pillow",
        "uri" : "http://dbpedia.org/resource/Joe_Pillow"
      }, {
        "label" : "Medea (The Icemark Chronicles)",
        "uri" : "http://dbpedia.org/resource/Medea_(The_Icemark_Chronicles)"
      }, {
        "label" : "Mildred Hubble",
        "uri" : "http://dbpedia.org/resource/Mildred_Hubble"
      }, {
        "label" : "La (Tarzan)",
        "uri" : "http://dbpedia.org/resource/La_(Tarzan)"
      }, {
        "label" : "Woody Woodpecker",
        "uri" : "http://dbpedia.org/resource/Woody_Woodpecker"
      }, {
        "label" : "Zelda Spellman",
        "uri" : "http://dbpedia.org/resource/Zelda_Spellman"
      }, {
        "label" : "Sabrina Spellman",
        "uri" : "http://dbpedia.org/resource/Sabrina_Spellman"
      }, {
        "label" : "Ray Lambrecht",
        "uri" : "http://dbpedia.org/resource/Ray_Lambrecht"
      }, {
        "label" : "Ethel Hallow",
        "uri" : "http://dbpedia.org/resource/Ethel_Hallow"
      }, {
        "label" : "Hilda Spellman",
        "uri" : "http://dbpedia.org/resource/Hilda_Spellman"
      }, {
        "label" : "Carl Crane",
        "uri" : "http://dbpedia.org/resource/Carl_Crane"
      }, {
        "label" : "Tom McVea",
        "uri" : "http://dbpedia.org/resource/Tom_McVea"
      }, {
        "label" : "James Heading",
        "uri" : "http://dbpedia.org/resource/James_Heading"
      }, {
        "label" : "Robert Dale (politician)",
        "uri" : "http://dbpedia.org/resource/Robert_Dale_(politician)"
      }, {
        "label" : "David Branscum",
        "uri" : "http://dbpedia.org/resource/David_Branscum"
      }, {
        "label" : "Charles Lumley Hill",
        "uri" : "http://dbpedia.org/resource/Charles_Lumley_Hill"
      }, {
        "label" : "Henry Conwell Wood",
        "uri" : "http://dbpedia.org/resource/Henry_Conwell_Wood"
      }, {
        "label" : "John Macansh",
        "uri" : "http://dbpedia.org/resource/John_Macansh"
      }, {
        "label" : "Brenham C. Crothers",
        "uri" : "http://dbpedia.org/resource/Brenham_C._Crothers"
      }, {
        "label" : "Doug Jennings (politician)",
        "uri" : "http://dbpedia.org/resource/Doug_Jennings_(politician)"
      }, {
        "label" : "Frank and John Craighead",
        "uri" : "http://dbpedia.org/resource/Frank_and_John_Craighead"
      }, {
        "label" : "George W. Littlefield",
        "uri" : "http://dbpedia.org/resource/George_W._Littlefield"
      }, {
        "label" : "Lance Harris",
        "uri" : "http://dbpedia.org/resource/Lance_Harris"
      }, {
        "label" : "James M. McLemore",
        "uri" : "http://dbpedia.org/resource/James_M._McLemore"
      }, {
        "label" : "Lorris M. Wimberly",
        "uri" : "http://dbpedia.org/resource/Lorris_M._Wimberly"
      } ]
    },
    "combination" : true
  }, {
    "id" : "192",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "IPP",
    "sentences" : [ "When was the a Belgian human belonged?", "When was the Belgian humans belonged?", "When was the a Belgian human belongs?", "When was the Belgian humans belongs?", "When were the a Belgian human belonged?", "When were the Belgian humans belonged?", "When were the a Belgian human belongs?", "When were the Belgian humans belongs?", "Which animal was the a Belgian human belonged?", "Which animal was the Belgian humans belonged?", "Which animal was the a Belgian human belongs?", "Which animal was the Belgian humans belongs?", "Which animal were the a Belgian human belonged?", "Which animal were the Belgian humans belonged?", "Which animal were the a Belgian human belongs?", "Which animal were the Belgian humans belongs?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/species> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.wikidata.org/entity/Q5>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "193",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "IPP",
    "sentences" : [ "When was the a Belgian golfer belonged?", "When was the Belgian golfers belonged?", "When was the a Belgian golfer belongs?", "When was the Belgian golfers belongs?", "When were the a Belgian golfer belonged?", "When were the Belgian golfers belonged?", "When were the a Belgian golfer belongs?", "When were the Belgian golfers belongs?", "Which animal was the a Belgian golfer belonged?", "Which animal was the Belgian golfers belonged?", "Which animal was the a Belgian golfer belongs?", "Which animal was the Belgian golfers belongs?", "Which animal were the a Belgian golfer belonged?", "Which animal were the Belgian golfers belonged?", "Which animal were the a Belgian golfer belongs?", "Which animal were the Belgian golfers belongs?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/species> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.wikidata.org/entity/Q13156709>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "194",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "THING",
    "frameType" : "IPP",
    "sentences" : [ "When was the the birth date of $x builds?", "When was the the birth date of $x built?", "When were the the birth date of $x builds?", "When were the the birth date of $x built?", "Which date was the the birth date of $x builds?", "Which date was the the birth date of $x built?", "Which date were the the birth date of $x builds?", "Which date were the the birth date of $x built?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/date> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/birthDate> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "195",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "THING",
    "frameType" : "IPP",
    "sentences" : [ "When was the the occupation of $x builds?", "When was the the occupation of $x built?", "When were the the occupation of $x builds?", "When were the the occupation of $x built?", "Which date was the the occupation of $x builds?", "Which date was the the occupation of $x built?", "Which date were the the occupation of $x builds?", "Which date were the the occupation of $x built?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/date> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/occupation> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "Deaf Smith",
        "uri" : "http://dbpedia.org/resource/Deaf_Smith"
      }, {
        "label" : "Albert Graham Ingalls",
        "uri" : "http://dbpedia.org/resource/Albert_Graham_Ingalls"
      }, {
        "label" : "Francisco da Silveira Pinto da Fonseca Teixeira, 1st Count of Amarante",
        "uri" : "http://dbpedia.org/resource/Francisco_da_Silveira_Pinto_da_Fonseca_Teixeira,_1st_Count_of_Amarante"
      }, {
        "label" : "Philip Van Doren Stern",
        "uri" : "http://dbpedia.org/resource/Philip_Van_Doren_Stern"
      }, {
        "label" : "Mikhail Safonov (pilot)",
        "uri" : "http://dbpedia.org/resource/Mikhail_Safonov_(pilot)"
      }, {
        "label" : "Catharine Merrill",
        "uri" : "http://dbpedia.org/resource/Catharine_Merrill"
      }, {
        "label" : "Hall Lyons",
        "uri" : "http://dbpedia.org/resource/Hall_Lyons"
      }, {
        "label" : "Red Forman",
        "uri" : "http://dbpedia.org/resource/Red_Forman"
      }, {
        "label" : "David Wade (Louisiana)",
        "uri" : "http://dbpedia.org/resource/David_Wade_(Louisiana)"
      }, {
        "label" : "Henry Rutgers",
        "uri" : "http://dbpedia.org/resource/Henry_Rutgers"
      }, {
        "label" : "Adolph G. Metzner",
        "uri" : "http://dbpedia.org/resource/Adolph_G._Metzner"
      }, {
        "label" : "William Mason (1757–1818)",
        "uri" : "http://dbpedia.org/resource/William_Mason_(1757–1818)"
      }, {
        "label" : "Joe Teti",
        "uri" : "http://dbpedia.org/resource/Joe_Teti"
      }, {
        "label" : "Desiree Akhavan",
        "uri" : "http://dbpedia.org/resource/Desiree_Akhavan"
      }, {
        "label" : "Anagnostis Striftombolas",
        "uri" : "http://dbpedia.org/resource/Anagnostis_Striftombolas"
      }, {
        "label" : "Antonios Kalamogdartis",
        "uri" : "http://dbpedia.org/resource/Antonios_Kalamogdartis"
      }, {
        "label" : "Giannis Chondrogiannis",
        "uri" : "http://dbpedia.org/resource/Giannis_Chondrogiannis"
      }, {
        "label" : "Konstantinos Gofas",
        "uri" : "http://dbpedia.org/resource/Konstantinos_Gofas"
      }, {
        "label" : "Panagiotis Anagnostopoulos",
        "uri" : "http://dbpedia.org/resource/Panagiotis_Anagnostopoulos"
      }, {
        "label" : "Panagiotis Karatzas",
        "uri" : "http://dbpedia.org/resource/Panagiotis_Karatzas"
      }, {
        "label" : "Theodoros Papasimakopoulos",
        "uri" : "http://dbpedia.org/resource/Theodoros_Papasimakopoulos"
      }, {
        "label" : "Andreas Kontogouris",
        "uri" : "http://dbpedia.org/resource/Andreas_Kontogouris"
      }, {
        "label" : "Anagnostis Petimezas",
        "uri" : "http://dbpedia.org/resource/Anagnostis_Petimezas"
      }, {
        "label" : "Anastasios Christopoulos",
        "uri" : "http://dbpedia.org/resource/Anastasios_Christopoulos"
      }, {
        "label" : "Asimakis Fotilas",
        "uri" : "http://dbpedia.org/resource/Asimakis_Fotilas"
      }, {
        "label" : "Chrysanthos Sisinis (died 1845)",
        "uri" : "http://dbpedia.org/resource/Chrysanthos_Sisinis_(died_1845)"
      }, {
        "label" : "Dionysis Diakos",
        "uri" : "http://dbpedia.org/resource/Dionysis_Diakos"
      }, {
        "label" : "Georgios Mitzou",
        "uri" : "http://dbpedia.org/resource/Georgios_Mitzou"
      }, {
        "label" : "Georgios Sisinis",
        "uri" : "http://dbpedia.org/resource/Georgios_Sisinis"
      }, {
        "label" : "Giorgos Giannias",
        "uri" : "http://dbpedia.org/resource/Giorgos_Giannias"
      }, {
        "label" : "Ioannis Diakos",
        "uri" : "http://dbpedia.org/resource/Ioannis_Diakos"
      }, {
        "label" : "Ioannis Krestenitis (elder)",
        "uri" : "http://dbpedia.org/resource/Ioannis_Krestenitis_(elder)"
      }, {
        "label" : "Ioannis Papadiamantopoulos (elder)",
        "uri" : "http://dbpedia.org/resource/Ioannis_Papadiamantopoulos_(elder)"
      }, {
        "label" : "Konstantinos Petimezas",
        "uri" : "http://dbpedia.org/resource/Konstantinos_Petimezas"
      }, {
        "label" : "Nikolaos Petimezas",
        "uri" : "http://dbpedia.org/resource/Nikolaos_Petimezas"
      }, {
        "label" : "Panagiotakis Fotilas",
        "uri" : "http://dbpedia.org/resource/Panagiotakis_Fotilas"
      }, {
        "label" : "Petros Mitzou",
        "uri" : "http://dbpedia.org/resource/Petros_Mitzou"
      }, {
        "label" : "Stamatis Krestenitis",
        "uri" : "http://dbpedia.org/resource/Stamatis_Krestenitis"
      }, {
        "label" : "Thallis Theodoridis (elder)",
        "uri" : "http://dbpedia.org/resource/Thallis_Theodoridis_(elder)"
      }, {
        "label" : "Walter Scheler",
        "uri" : "http://dbpedia.org/resource/Walter_Scheler"
      }, {
        "label" : "Rajdeep Sardesai",
        "uri" : "http://dbpedia.org/resource/Rajdeep_Sardesai"
      }, {
        "label" : "Jenna Wortham",
        "uri" : "http://dbpedia.org/resource/Jenna_Wortham"
      }, {
        "label" : "Rachel Kaadzi Ghansah",
        "uri" : "http://dbpedia.org/resource/Rachel_Kaadzi_Ghansah"
      }, {
        "label" : "Gerhard Thyben",
        "uri" : "http://dbpedia.org/resource/Gerhard_Thyben"
      }, {
        "label" : "Louis-Nicolas Davout",
        "uri" : "http://dbpedia.org/resource/Louis-Nicolas_Davout"
      }, {
        "label" : "Rebecca Greer",
        "uri" : "http://dbpedia.org/resource/Rebecca_Greer"
      } ]
    },
    "combination" : true
  }, {
    "id" : "196",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "IPP",
    "sentences" : [ "When was the a Belgian human builds?", "When was the Belgian humans builds?", "When was the a Belgian human built?", "When was the Belgian humans built?", "When were the a Belgian human builds?", "When were the Belgian humans builds?", "When were the a Belgian human built?", "When were the Belgian humans built?", "Which date was the a Belgian human builds?", "Which date was the Belgian humans builds?", "Which date was the a Belgian human built?", "Which date was the Belgian humans built?", "Which date were the a Belgian human builds?", "Which date were the Belgian humans builds?", "Which date were the a Belgian human built?", "Which date were the Belgian humans built?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/date> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.wikidata.org/entity/Q5>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "197",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "IPP",
    "sentences" : [ "When was the a Belgian golfer builds?", "When was the Belgian golfers builds?", "When was the a Belgian golfer built?", "When was the Belgian golfers built?", "When were the a Belgian golfer builds?", "When were the Belgian golfers builds?", "When were the a Belgian golfer built?", "When were the Belgian golfers built?", "Which date was the a Belgian golfer builds?", "Which date was the Belgian golfers builds?", "Which date was the a Belgian golfer built?", "Which date was the Belgian golfers built?", "Which date were the a Belgian golfer builds?", "Which date were the Belgian golfers builds?", "Which date were the a Belgian golfer built?", "Which date were the Belgian golfers built?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/date> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.wikidata.org/entity/Q13156709>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  } ]
}