{
  "grammarEntries" : [ {
    "id" : "67",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of the spouse of $x?", "Tell me the Alma Mater of the spouse of $x?", "What is the Alma Mater of the spouse of $x?", "What was the Alma Mater of the spouse of $x?", "Which university is the Alma Mater of the spouse of $x?", "Which university was the Alma Mater of the spouse of $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "Sylvia Plath",
        "uri" : "http://dbpedia.org/resource/Sylvia_Plath"
      }, {
        "label" : "Joanne Whalley",
        "uri" : "http://dbpedia.org/resource/Joanne_Whalley"
      }, {
        "label" : "Minnie Maddern Fiske",
        "uri" : "http://dbpedia.org/resource/Minnie_Maddern_Fiske"
      }, {
        "label" : "Padma Lakshmi",
        "uri" : "http://dbpedia.org/resource/Padma_Lakshmi"
      }, {
        "label" : "Savitri (actress)",
        "uri" : "http://dbpedia.org/resource/Savitri_(actress)"
      }, {
        "label" : "Aaron Spelling",
        "uri" : "http://dbpedia.org/resource/Aaron_Spelling"
      }, {
        "label" : "Adam Hochschild",
        "uri" : "http://dbpedia.org/resource/Adam_Hochschild"
      }, {
        "label" : "Barbara Simons",
        "uri" : "http://dbpedia.org/resource/Barbara_Simons"
      }, {
        "label" : "Candy Spelling",
        "uri" : "http://dbpedia.org/resource/Candy_Spelling"
      }, {
        "label" : "Eleanor Silliman Belknap Humphrey",
        "uri" : "http://dbpedia.org/resource/Eleanor_Silliman_Belknap_Humphrey"
      }, {
        "label" : "James Harris Simons",
        "uri" : "http://dbpedia.org/resource/James_Harris_Simons"
      }, {
        "label" : "Loret Miller Ruppe",
        "uri" : "http://dbpedia.org/resource/Loret_Miller_Ruppe"
      }, {
        "label" : "Clara McMillen",
        "uri" : "http://dbpedia.org/resource/Clara_McMillen"
      }, {
        "label" : "Deborah Walley",
        "uri" : "http://dbpedia.org/resource/Deborah_Walley"
      }, {
        "label" : "Sarala Roy",
        "uri" : "http://dbpedia.org/resource/Sarala_Roy"
      }, {
        "label" : "Lydia Lopokova",
        "uri" : "http://dbpedia.org/resource/Lydia_Lopokova"
      }, {
        "label" : "Lydia Clarke",
        "uri" : "http://dbpedia.org/resource/Lydia_Clarke"
      }, {
        "label" : "Eliza Jumel",
        "uri" : "http://dbpedia.org/resource/Eliza_Jumel"
      }, {
        "label" : "Lady Caroline Lamb",
        "uri" : "http://dbpedia.org/resource/Lady_Caroline_Lamb"
      }, {
        "label" : "Margaret Sullavan",
        "uri" : "http://dbpedia.org/resource/Margaret_Sullavan"
      }, {
        "label" : "Frank Bunker Gilbreth Sr.",
        "uri" : "http://dbpedia.org/resource/Frank_Bunker_Gilbreth_Sr."
      }, {
        "label" : "David Evans Shaw",
        "uri" : "http://dbpedia.org/resource/David_Evans_Shaw"
      }, {
        "label" : "John Jay O'Connor",
        "uri" : "http://dbpedia.org/resource/John_Jay_O'Connor"
      }, {
        "label" : "Luma de Oliveira",
        "uri" : "http://dbpedia.org/resource/Luma_de_Oliveira"
      }, {
        "label" : "Bernadette Chirac",
        "uri" : "http://dbpedia.org/resource/Bernadette_Chirac"
      }, {
        "label" : "Leonard Woolf",
        "uri" : "http://dbpedia.org/resource/Leonard_Woolf"
      }, {
        "label" : "Loki Schmidt",
        "uri" : "http://dbpedia.org/resource/Loki_Schmidt"
      }, {
        "label" : "Richard Sennett",
        "uri" : "http://dbpedia.org/resource/Richard_Sennett"
      }, {
        "label" : "Marion Mahony Griffin",
        "uri" : "http://dbpedia.org/resource/Marion_Mahony_Griffin"
      }, {
        "label" : "Robert Gist",
        "uri" : "http://dbpedia.org/resource/Robert_Gist"
      }, {
        "label" : "Bill Gates",
        "uri" : "http://dbpedia.org/resource/Bill_Gates"
      }, {
        "label" : "Carl Sagan",
        "uri" : "http://dbpedia.org/resource/Carl_Sagan"
      }, {
        "label" : "Chiang Kai-shek",
        "uri" : "http://dbpedia.org/resource/Chiang_Kai-shek"
      }, {
        "label" : "Frank Sinatra",
        "uri" : "http://dbpedia.org/resource/Frank_Sinatra"
      }, {
        "label" : "Gene Roddenberry",
        "uri" : "http://dbpedia.org/resource/Gene_Roddenberry"
      }, {
        "label" : "Jehan Sadat",
        "uri" : "http://dbpedia.org/resource/Jehan_Sadat"
      }, {
        "label" : "Sargent Shriver",
        "uri" : "http://dbpedia.org/resource/Sargent_Shriver"
      }, {
        "label" : "Sylvia Llewelyn Davies",
        "uri" : "http://dbpedia.org/resource/Sylvia_Llewelyn_Davies"
      }, {
        "label" : "Anna Maria Corazza Bildt",
        "uri" : "http://dbpedia.org/resource/Anna_Maria_Corazza_Bildt"
      }, {
        "label" : "Nelson Mandela",
        "uri" : "http://dbpedia.org/resource/Nelson_Mandela"
      }, {
        "label" : "Janette Howard",
        "uri" : "http://dbpedia.org/resource/Janette_Howard"
      }, {
        "label" : "Erika Mann",
        "uri" : "http://dbpedia.org/resource/Erika_Mann"
      }, {
        "label" : "Lynn Abbey",
        "uri" : "http://dbpedia.org/resource/Lynn_Abbey"
      }, {
        "label" : "Jane Engelhard",
        "uri" : "http://dbpedia.org/resource/Jane_Engelhard"
      }, {
        "label" : "Morfydd Llwyn Owen",
        "uri" : "http://dbpedia.org/resource/Morfydd_Llwyn_Owen"
      }, {
        "label" : "Zoë Baird",
        "uri" : "http://dbpedia.org/resource/Zoë_Baird"
      }, {
        "label" : "Henry Hillman",
        "uri" : "http://dbpedia.org/resource/Henry_Hillman"
      }, {
        "label" : "Lavinia Spencer, Countess Spencer",
        "uri" : "http://dbpedia.org/resource/Lavinia_Spencer,_Countess_Spencer"
      }, {
        "label" : "Robin Lakoff",
        "uri" : "http://dbpedia.org/resource/Robin_Lakoff"
      }, {
        "label" : "Andrea Conte",
        "uri" : "http://dbpedia.org/resource/Andrea_Conte"
      }, {
        "label" : "Cindy McCain",
        "uri" : "http://dbpedia.org/resource/Cindy_McCain"
      }, {
        "label" : "Emma Gifford",
        "uri" : "http://dbpedia.org/resource/Emma_Gifford"
      }, {
        "label" : "Lucinda Franks",
        "uri" : "http://dbpedia.org/resource/Lucinda_Franks"
      }, {
        "label" : "Lucy Baldwin, Countess Baldwin of Bewdley",
        "uri" : "http://dbpedia.org/resource/Lucy_Baldwin,_Countess_Baldwin_of_Bewdley"
      }, {
        "label" : "Betty Bumpers",
        "uri" : "http://dbpedia.org/resource/Betty_Bumpers"
      }, {
        "label" : "Brigitte Bodenheimer",
        "uri" : "http://dbpedia.org/resource/Brigitte_Bodenheimer"
      }, {
        "label" : "Bryan Greenberg",
        "uri" : "http://dbpedia.org/resource/Bryan_Greenberg"
      }, {
        "label" : "Elizabeth Dole",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Dole"
      }, {
        "label" : "Emma Georgina Rothschild",
        "uri" : "http://dbpedia.org/resource/Emma_Georgina_Rothschild"
      }, {
        "label" : "Hester Pitt, Countess of Chatham",
        "uri" : "http://dbpedia.org/resource/Hester_Pitt,_Countess_of_Chatham"
      }, {
        "label" : "Mary Stuart, Countess of Bute",
        "uri" : "http://dbpedia.org/resource/Mary_Stuart,_Countess_of_Bute"
      }, {
        "label" : "Jane Fonda",
        "uri" : "http://dbpedia.org/resource/Jane_Fonda"
      }, {
        "label" : "Emilie Benes Brzezinski",
        "uri" : "http://dbpedia.org/resource/Emilie_Benes_Brzezinski"
      }, {
        "label" : "Anna Harrison",
        "uri" : "http://dbpedia.org/resource/Anna_Harrison"
      }, {
        "label" : "Caroline Harrison",
        "uri" : "http://dbpedia.org/resource/Caroline_Harrison"
      }, {
        "label" : "Florence Harding",
        "uri" : "http://dbpedia.org/resource/Florence_Harding"
      }, {
        "label" : "Helen Herron Taft",
        "uri" : "http://dbpedia.org/resource/Helen_Herron_Taft"
      }, {
        "label" : "Hugo van Lawick",
        "uri" : "http://dbpedia.org/resource/Hugo_van_Lawick"
      }, {
        "label" : "Nabaneeta Dev Sen",
        "uri" : "http://dbpedia.org/resource/Nabaneeta_Dev_Sen"
      }, {
        "label" : "Angélica Rivera",
        "uri" : "http://dbpedia.org/resource/Angélica_Rivera"
      }, {
        "label" : "Cornelia Wallace",
        "uri" : "http://dbpedia.org/resource/Cornelia_Wallace"
      }, {
        "label" : "Pushpavalli",
        "uri" : "http://dbpedia.org/resource/Pushpavalli"
      }, {
        "label" : "Alison White (bishop)",
        "uri" : "http://dbpedia.org/resource/Alison_White_(bishop)"
      }, {
        "label" : "Anna Nicole Smith",
        "uri" : "http://dbpedia.org/resource/Anna_Nicole_Smith"
      }, {
        "label" : "Nena von Schlebrügge",
        "uri" : "http://dbpedia.org/resource/Nena_von_Schlebrügge"
      }, {
        "label" : "Olga Scheinpflugová",
        "uri" : "http://dbpedia.org/resource/Olga_Scheinpflugová"
      }, {
        "label" : "Adrienne Barbeau",
        "uri" : "http://dbpedia.org/resource/Adrienne_Barbeau"
      }, {
        "label" : "Caroline Kennedy",
        "uri" : "http://dbpedia.org/resource/Caroline_Kennedy"
      }, {
        "label" : "Fred Thompson",
        "uri" : "http://dbpedia.org/resource/Fred_Thompson"
      }, {
        "label" : "Jesse James (customizer)",
        "uri" : "http://dbpedia.org/resource/Jesse_James_(customizer)"
      }, {
        "label" : "Julia Wolfe",
        "uri" : "http://dbpedia.org/resource/Julia_Wolfe"
      }, {
        "label" : "Marta Sahagún de Fox",
        "uri" : "http://dbpedia.org/resource/Marta_Sahagún_de_Fox"
      }, {
        "label" : "Sarah Brightman",
        "uri" : "http://dbpedia.org/resource/Sarah_Brightman"
      }, {
        "label" : "Tony Benn",
        "uri" : "http://dbpedia.org/resource/Tony_Benn"
      }, {
        "label" : "Lyudmila Putina",
        "uri" : "http://dbpedia.org/resource/Lyudmila_Putina"
      }, {
        "label" : "Nicole Farhi",
        "uri" : "http://dbpedia.org/resource/Nicole_Farhi"
      }, {
        "label" : "Samantha Bee",
        "uri" : "http://dbpedia.org/resource/Samantha_Bee"
      }, {
        "label" : "Alexis Denisof",
        "uri" : "http://dbpedia.org/resource/Alexis_Denisof"
      }, {
        "label" : "Hume Cronyn",
        "uri" : "http://dbpedia.org/resource/Hume_Cronyn"
      }, {
        "label" : "Muriel Humphrey Brown",
        "uri" : "http://dbpedia.org/resource/Muriel_Humphrey_Brown"
      }, {
        "label" : "Mary Matalin",
        "uri" : "http://dbpedia.org/resource/Mary_Matalin"
      }, {
        "label" : "Michael Huffington",
        "uri" : "http://dbpedia.org/resource/Michael_Huffington"
      }, {
        "label" : "Pentti Arajärvi",
        "uri" : "http://dbpedia.org/resource/Pentti_Arajärvi"
      }, {
        "label" : "Lisbet Palme",
        "uri" : "http://dbpedia.org/resource/Lisbet_Palme"
      }, {
        "label" : "Marisabel Rodríguez de Chávez",
        "uri" : "http://dbpedia.org/resource/Marisabel_Rodríguez_de_Chávez"
      }, {
        "label" : "Wu Shu-chen",
        "uri" : "http://dbpedia.org/resource/Wu_Shu-chen"
      }, {
        "label" : "Jacqueline Beer",
        "uri" : "http://dbpedia.org/resource/Jacqueline_Beer"
      }, {
        "label" : "Dingdong Dantes",
        "uri" : "http://dbpedia.org/resource/Dingdong_Dantes"
      }, {
        "label" : "Floride Calhoun",
        "uri" : "http://dbpedia.org/resource/Floride_Calhoun"
      }, {
        "label" : "Joan Mondale",
        "uri" : "http://dbpedia.org/resource/Joan_Mondale"
      } ]
    },
    "combination" : true
  }, {
    "id" : "68",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian cleric?", "Give me the Alma Mater of Belgian clerics?", "Tell me the Alma Mater of a Belgian cleric?", "Tell me the Alma Mater of Belgian clerics?", "What is the Alma Mater of a Belgian cleric?", "What is the Alma Mater of Belgian clerics?", "What was the Alma Mater of a Belgian cleric?", "What was the Alma Mater of Belgian clerics?", "Which university is the Alma Mater of a Belgian cleric?", "Which university is the Alma Mater of Belgian clerics?", "Which university was the Alma Mater of a Belgian cleric?", "Which university was the Alma Mater of Belgian clerics?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cleric>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "69",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian office holder?", "Give me the Alma Mater of Belgian office holders?", "Tell me the Alma Mater of a Belgian office holder?", "Tell me the Alma Mater of Belgian office holders?", "What is the Alma Mater of a Belgian office holder?", "What is the Alma Mater of Belgian office holders?", "What was the Alma Mater of a Belgian office holder?", "What was the Alma Mater of Belgian office holders?", "Which university is the Alma Mater of a Belgian office holder?", "Which university is the Alma Mater of Belgian office holders?", "Which university was the Alma Mater of a Belgian office holder?", "Which university was the Alma Mater of Belgian office holders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "70",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian agent?", "Give me the Alma Mater of Belgian agents?", "Tell me the Alma Mater of a Belgian agent?", "Tell me the Alma Mater of Belgian agents?", "What is the Alma Mater of a Belgian agent?", "What is the Alma Mater of Belgian agents?", "What was the Alma Mater of a Belgian agent?", "What was the Alma Mater of Belgian agents?", "Which university is the Alma Mater of a Belgian agent?", "Which university is the Alma Mater of Belgian agents?", "Which university was the Alma Mater of a Belgian agent?", "Which university was the Alma Mater of Belgian agents?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Agent>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "71",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian economist?", "Give me the Alma Mater of Belgian economists?", "Tell me the Alma Mater of a Belgian economist?", "Tell me the Alma Mater of Belgian economists?", "What is the Alma Mater of a Belgian economist?", "What is the Alma Mater of Belgian economists?", "What was the Alma Mater of a Belgian economist?", "What was the Alma Mater of Belgian economists?", "Which university is the Alma Mater of a Belgian economist?", "Which university is the Alma Mater of Belgian economists?", "Which university was the Alma Mater of a Belgian economist?", "Which university was the Alma Mater of Belgian economists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Economist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "72",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian motorcycle rider?", "Give me the Alma Mater of Belgian motorcycle riders?", "Tell me the Alma Mater of a Belgian motorcycle rider?", "Tell me the Alma Mater of Belgian motorcycle riders?", "What is the Alma Mater of a Belgian motorcycle rider?", "What is the Alma Mater of Belgian motorcycle riders?", "What was the Alma Mater of a Belgian motorcycle rider?", "What was the Alma Mater of Belgian motorcycle riders?", "Which university is the Alma Mater of a Belgian motorcycle rider?", "Which university is the Alma Mater of Belgian motorcycle riders?", "Which university was the Alma Mater of a Belgian motorcycle rider?", "Which university was the Alma Mater of Belgian motorcycle riders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorcycleRider>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "73",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian artist?", "Give me the Alma Mater of Belgian artists?", "Tell me the Alma Mater of a Belgian artist?", "Tell me the Alma Mater of Belgian artists?", "What is the Alma Mater of a Belgian artist?", "What is the Alma Mater of Belgian artists?", "What was the Alma Mater of a Belgian artist?", "What was the Alma Mater of Belgian artists?", "Which university is the Alma Mater of a Belgian artist?", "Which university is the Alma Mater of Belgian artists?", "Which university was the Alma Mater of a Belgian artist?", "Which university was the Alma Mater of Belgian artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "74",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian athlete?", "Give me the Alma Mater of Belgian athletes?", "Tell me the Alma Mater of a Belgian athlete?", "Tell me the Alma Mater of Belgian athletes?", "What is the Alma Mater of a Belgian athlete?", "What is the Alma Mater of Belgian athletes?", "What was the Alma Mater of a Belgian athlete?", "What was the Alma Mater of Belgian athletes?", "Which university is the Alma Mater of a Belgian athlete?", "Which university is the Alma Mater of Belgian athletes?", "Which university was the Alma Mater of a Belgian athlete?", "Which university was the Alma Mater of Belgian athletes?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "75",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian scientist?", "Give me the Alma Mater of Belgian scientists?", "Tell me the Alma Mater of a Belgian scientist?", "Tell me the Alma Mater of Belgian scientists?", "What is the Alma Mater of a Belgian scientist?", "What is the Alma Mater of Belgian scientists?", "What was the Alma Mater of a Belgian scientist?", "What was the Alma Mater of Belgian scientists?", "Which university is the Alma Mater of a Belgian scientist?", "Which university is the Alma Mater of Belgian scientists?", "Which university was the Alma Mater of a Belgian scientist?", "Which university was the Alma Mater of Belgian scientists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "76",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian architect?", "Give me the Alma Mater of Belgian architects?", "Tell me the Alma Mater of a Belgian architect?", "Tell me the Alma Mater of Belgian architects?", "What is the Alma Mater of a Belgian architect?", "What is the Alma Mater of Belgian architects?", "What was the Alma Mater of a Belgian architect?", "What was the Alma Mater of Belgian architects?", "Which university is the Alma Mater of a Belgian architect?", "Which university is the Alma Mater of Belgian architects?", "Which university was the Alma Mater of a Belgian architect?", "Which university was the Alma Mater of Belgian architects?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "77",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian golf player?", "Give me the Alma Mater of Belgian golf players?", "Tell me the Alma Mater of a Belgian golf player?", "Tell me the Alma Mater of Belgian golf players?", "What is the Alma Mater of a Belgian golf player?", "What is the Alma Mater of Belgian golf players?", "What was the Alma Mater of a Belgian golf player?", "What was the Alma Mater of Belgian golf players?", "Which university is the Alma Mater of a Belgian golf player?", "Which university is the Alma Mater of Belgian golf players?", "Which university was the Alma Mater of a Belgian golf player?", "Which university was the Alma Mater of Belgian golf players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "78",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian racing driver?", "Give me the Alma Mater of Belgian racing drivers?", "Tell me the Alma Mater of a Belgian racing driver?", "Tell me the Alma Mater of Belgian racing drivers?", "What is the Alma Mater of a Belgian racing driver?", "What is the Alma Mater of Belgian racing drivers?", "What was the Alma Mater of a Belgian racing driver?", "What was the Alma Mater of Belgian racing drivers?", "Which university is the Alma Mater of a Belgian racing driver?", "Which university is the Alma Mater of Belgian racing drivers?", "Which university was the Alma Mater of a Belgian racing driver?", "Which university was the Alma Mater of Belgian racing drivers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RacingDriver>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "79",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian politician?", "Give me the Alma Mater of Belgian politicians?", "Tell me the Alma Mater of a Belgian politician?", "Tell me the Alma Mater of Belgian politicians?", "What is the Alma Mater of a Belgian politician?", "What is the Alma Mater of Belgian politicians?", "What was the Alma Mater of a Belgian politician?", "What was the Alma Mater of Belgian politicians?", "Which university is the Alma Mater of a Belgian politician?", "Which university is the Alma Mater of Belgian politicians?", "Which university was the Alma Mater of a Belgian politician?", "Which university was the Alma Mater of Belgian politicians?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "80",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian swimmer?", "Give me the Alma Mater of Belgian swimmers?", "Tell me the Alma Mater of a Belgian swimmer?", "Tell me the Alma Mater of Belgian swimmers?", "What is the Alma Mater of a Belgian swimmer?", "What is the Alma Mater of Belgian swimmers?", "What was the Alma Mater of a Belgian swimmer?", "What was the Alma Mater of Belgian swimmers?", "Which university is the Alma Mater of a Belgian swimmer?", "Which university is the Alma Mater of Belgian swimmers?", "Which university was the Alma Mater of a Belgian swimmer?", "Which university was the Alma Mater of Belgian swimmers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Swimmer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "81",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian volleyball player?", "Give me the Alma Mater of Belgian volleyball players?", "Tell me the Alma Mater of a Belgian volleyball player?", "Tell me the Alma Mater of Belgian volleyball players?", "What is the Alma Mater of a Belgian volleyball player?", "What is the Alma Mater of Belgian volleyball players?", "What was the Alma Mater of a Belgian volleyball player?", "What was the Alma Mater of Belgian volleyball players?", "Which university is the Alma Mater of a Belgian volleyball player?", "Which university is the Alma Mater of Belgian volleyball players?", "Which university was the Alma Mater of a Belgian volleyball player?", "Which university was the Alma Mater of Belgian volleyball players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VolleyballPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "82",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian person?", "Give me the Alma Mater of Belgian persons?", "Tell me the Alma Mater of a Belgian person?", "Tell me the Alma Mater of Belgian persons?", "What is the Alma Mater of a Belgian person?", "What is the Alma Mater of Belgian persons?", "What was the Alma Mater of a Belgian person?", "What was the Alma Mater of Belgian persons?", "Which university is the Alma Mater of a Belgian person?", "Which university is the Alma Mater of Belgian persons?", "Which university was the Alma Mater of a Belgian person?", "Which university was the Alma Mater of Belgian persons?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "83",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian Christian Bishop?", "Give me the Alma Mater of Belgian Christian Bishops?", "Tell me the Alma Mater of a Belgian Christian Bishop?", "Tell me the Alma Mater of Belgian Christian Bishops?", "What is the Alma Mater of a Belgian Christian Bishop?", "What is the Alma Mater of Belgian Christian Bishops?", "What was the Alma Mater of a Belgian Christian Bishop?", "What was the Alma Mater of Belgian Christian Bishops?", "Which university is the Alma Mater of a Belgian Christian Bishop?", "Which university is the Alma Mater of Belgian Christian Bishops?", "Which university was the Alma Mater of a Belgian Christian Bishop?", "Which university was the Alma Mater of Belgian Christian Bishops?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ChristianBishop>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "84",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian comics creator?", "Give me the Alma Mater of Belgian comics creators?", "Tell me the Alma Mater of a Belgian comics creator?", "Tell me the Alma Mater of Belgian comics creators?", "What is the Alma Mater of a Belgian comics creator?", "What is the Alma Mater of Belgian comics creators?", "What was the Alma Mater of a Belgian comics creator?", "What was the Alma Mater of Belgian comics creators?", "Which university is the Alma Mater of a Belgian comics creator?", "Which university is the Alma Mater of Belgian comics creators?", "Which university was the Alma Mater of a Belgian comics creator?", "Which university was the Alma Mater of Belgian comics creators?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCreator>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "85",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian writer?", "Give me the Alma Mater of Belgian writers?", "Tell me the Alma Mater of a Belgian writer?", "Tell me the Alma Mater of Belgian writers?", "What is the Alma Mater of a Belgian writer?", "What is the Alma Mater of Belgian writers?", "What was the Alma Mater of a Belgian writer?", "What was the Alma Mater of Belgian writers?", "Which university is the Alma Mater of a Belgian writer?", "Which university is the Alma Mater of Belgian writers?", "Which university was the Alma Mater of a Belgian writer?", "Which university was the Alma Mater of Belgian writers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "86",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian motorsport racer?", "Give me the Alma Mater of Belgian motorsport racers?", "Tell me the Alma Mater of a Belgian motorsport racer?", "Tell me the Alma Mater of Belgian motorsport racers?", "What is the Alma Mater of a Belgian motorsport racer?", "What is the Alma Mater of Belgian motorsport racers?", "What was the Alma Mater of a Belgian motorsport racer?", "What was the Alma Mater of Belgian motorsport racers?", "Which university is the Alma Mater of a Belgian motorsport racer?", "Which university is the Alma Mater of Belgian motorsport racers?", "Which university was the Alma Mater of a Belgian motorsport racer?", "Which university was the Alma Mater of Belgian motorsport racers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorsportRacer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "87",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of a Belgian musical artist?", "Give me the Alma Mater of Belgian musical artists?", "Tell me the Alma Mater of a Belgian musical artist?", "Tell me the Alma Mater of Belgian musical artists?", "What is the Alma Mater of a Belgian musical artist?", "What is the Alma Mater of Belgian musical artists?", "What was the Alma Mater of a Belgian musical artist?", "What was the Alma Mater of Belgian musical artists?", "Which university is the Alma Mater of a Belgian musical artist?", "Which university is the Alma Mater of Belgian musical artists?", "Which university was the Alma Mater of a Belgian musical artist?", "Which university was the Alma Mater of Belgian musical artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "88",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "SCHOOL",
    "frameType" : "NPP",
    "sentences" : [ "Give me the Alma Mater of persons born by $x?", "Tell me the Alma Mater of persons born by $x?", "What is the Alma Mater of persons born by $x?", "What was the Alma Mater of persons born by $x?", "Which university is the Alma Mater of persons born by $x?", "Which university was the Alma Mater of persons born by $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/almaMater> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfPropx)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "1756-02-06",
        "uri" : "1756-02-06"
      }, {
        "label" : "1936-11-30",
        "uri" : "1936-11-30"
      }, {
        "label" : "1918-10-06",
        "uri" : "1918-10-06"
      }, {
        "label" : "1667-05-26",
        "uri" : "1667-05-26"
      }, {
        "label" : "1952-07-06",
        "uri" : "1952-07-06"
      }, {
        "label" : "1900-02-05",
        "uri" : "1900-02-05"
      }, {
        "label" : "1752-09-18",
        "uri" : "1752-09-18"
      }, {
        "label" : "1940-04-25",
        "uri" : "1940-04-25"
      }, {
        "label" : "1946-02-21",
        "uri" : "1946-02-21"
      }, {
        "label" : "1950-01-09",
        "uri" : "1950-01-09"
      }, {
        "label" : "1925-06-17",
        "uri" : "1925-06-17"
      }, {
        "label" : "1894-06-23",
        "uri" : "1894-06-23"
      }, {
        "label" : "1842-07-26",
        "uri" : "1842-07-26"
      }, {
        "label" : "1893-01-12",
        "uri" : "1893-01-12"
      }, {
        "label" : "1903-06-14",
        "uri" : "1903-06-14"
      }, {
        "label" : "1974-03-24",
        "uri" : "1974-03-24"
      }, {
        "label" : "1933-11-03",
        "uri" : "1933-11-03"
      }, {
        "label" : "1952-02-19",
        "uri" : "1952-02-19"
      }, {
        "label" : "1514-12-31",
        "uri" : "1514-12-31"
      }, {
        "label" : "1848-02-24",
        "uri" : "1848-02-24"
      }, {
        "label" : "1948-03-22",
        "uri" : "1948-03-22"
      }, {
        "label" : "1944-01-26",
        "uri" : "1944-01-26"
      }, {
        "label" : "1917-02-25",
        "uri" : "1917-02-25"
      }, {
        "label" : "1943-09-17",
        "uri" : "1943-09-17"
      }, {
        "label" : "1918-12-25",
        "uri" : "1918-12-25"
      }, {
        "label" : "1925-11-17",
        "uri" : "1925-11-17"
      }, {
        "label" : "1851-07-08",
        "uri" : "1851-07-08"
      }, {
        "label" : "1790-11-17",
        "uri" : "1790-11-17"
      }, {
        "label" : "1922-12-24",
        "uri" : "1922-12-24"
      }, {
        "label" : "1902-06-16",
        "uri" : "1902-06-16"
      }, {
        "label" : "1949-10-21",
        "uri" : "1949-10-21"
      }, {
        "label" : "1903-05-02",
        "uri" : "1903-05-02"
      }, {
        "label" : "1923-07-22",
        "uri" : "1923-07-22"
      }, {
        "label" : "1927-06-27",
        "uri" : "1927-06-27"
      }, {
        "label" : "1856-04-05",
        "uri" : "1856-04-05"
      }, {
        "label" : "1963-01-15",
        "uri" : "1963-01-15"
      }, {
        "label" : "1917-06-08",
        "uri" : "1917-06-08"
      }, {
        "label" : "1843-07-07",
        "uri" : "1843-07-07"
      }, {
        "label" : "1949-07-15",
        "uri" : "1949-07-15"
      }, {
        "label" : "1878-01-06",
        "uri" : "1878-01-06"
      }, {
        "label" : "1928-07-15",
        "uri" : "1928-07-15"
      }, {
        "label" : "1934-03-31",
        "uri" : "1934-03-31"
      }, {
        "label" : "1884-02-23",
        "uri" : "1884-02-23"
      }, {
        "label" : "1977-04-14",
        "uri" : "1977-04-14"
      }, {
        "label" : "1933-11-04",
        "uri" : "1933-11-04"
      }, {
        "label" : "1754-02-02",
        "uri" : "1754-02-02"
      }, {
        "label" : "1923-10-04",
        "uri" : "1923-10-04"
      }, {
        "label" : "1950-10-12",
        "uri" : "1950-10-12"
      }, {
        "label" : "1629-04-14",
        "uri" : "1629-04-14"
      }, {
        "label" : "1931-05-29",
        "uri" : "1931-05-29"
      }, {
        "label" : "1924-11-21",
        "uri" : "1924-11-21"
      }, {
        "label" : "1632-10-20",
        "uri" : "1632-10-20"
      }, {
        "label" : "1937-07-25",
        "uri" : "1937-07-25"
      }, {
        "label" : "1700-02-08",
        "uri" : "1700-02-08"
      }, {
        "label" : "1941-03-11",
        "uri" : "1941-03-11"
      } ]
    },
    "combination" : true
  }, {
    "id" : "89",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of the spouse of $x?", "Tell me the birth date of the spouse of $x?", "What is the birth date of the spouse of $x?", "What was the birth date of the spouse of $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "Andrzej Wajda",
        "uri" : "http://dbpedia.org/resource/Andrzej_Wajda"
      }, {
        "label" : "Brad Pitt",
        "uri" : "http://dbpedia.org/resource/Brad_Pitt"
      }, {
        "label" : "Carole Lombard",
        "uri" : "http://dbpedia.org/resource/Carole_Lombard"
      }, {
        "label" : "Caroline of Brunswick",
        "uri" : "http://dbpedia.org/resource/Caroline_of_Brunswick"
      }, {
        "label" : "Catherine I of Russia",
        "uri" : "http://dbpedia.org/resource/Catherine_I_of_Russia"
      }, {
        "label" : "Christopher Lambert",
        "uri" : "http://dbpedia.org/resource/Christopher_Lambert"
      }, {
        "label" : "Clark Gable",
        "uri" : "http://dbpedia.org/resource/Clark_Gable"
      }, {
        "label" : "Cnut the Great",
        "uri" : "http://dbpedia.org/resource/Cnut_the_Great"
      }, {
        "label" : "Edmond Hamilton",
        "uri" : "http://dbpedia.org/resource/Edmond_Hamilton"
      }, {
        "label" : "Elizabeth Taylor",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Taylor"
      }, {
        "label" : "Elizabeth Woodville",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Woodville"
      }, {
        "label" : "Emma of Normandy",
        "uri" : "http://dbpedia.org/resource/Emma_of_Normandy"
      }, {
        "label" : "George IV of the United Kingdom",
        "uri" : "http://dbpedia.org/resource/George_IV_of_the_United_Kingdom"
      }, {
        "label" : "Gwyneth Paltrow",
        "uri" : "http://dbpedia.org/resource/Gwyneth_Paltrow"
      }, {
        "label" : "Ingrid Bergman",
        "uri" : "http://dbpedia.org/resource/Ingrid_Bergman"
      }, {
        "label" : "Jennifer Aniston",
        "uri" : "http://dbpedia.org/resource/Jennifer_Aniston"
      }, {
        "label" : "Leigh Brackett",
        "uri" : "http://dbpedia.org/resource/Leigh_Brackett"
      }, {
        "label" : "Louis XVI of France",
        "uri" : "http://dbpedia.org/resource/Louis_XVI_of_France"
      }, {
        "label" : "Marie Antoinette",
        "uri" : "http://dbpedia.org/resource/Marie_Antoinette"
      }, {
        "label" : "Peter the Great",
        "uri" : "http://dbpedia.org/resource/Peter_the_Great"
      }, {
        "label" : "Richard Burton",
        "uri" : "http://dbpedia.org/resource/Richard_Burton"
      }, {
        "label" : "Roberto Rossellini",
        "uri" : "http://dbpedia.org/resource/Roberto_Rossellini"
      }, {
        "label" : "Salman Rushdie",
        "uri" : "http://dbpedia.org/resource/Salman_Rushdie"
      }, {
        "label" : "Sylvia Plath",
        "uri" : "http://dbpedia.org/resource/Sylvia_Plath"
      }, {
        "label" : "Ted Hughes",
        "uri" : "http://dbpedia.org/resource/Ted_Hughes"
      }, {
        "label" : "Theophanu",
        "uri" : "http://dbpedia.org/resource/Theophanu"
      }, {
        "label" : "Val Kilmer",
        "uri" : "http://dbpedia.org/resource/Val_Kilmer"
      }, {
        "label" : "Vivien Leigh",
        "uri" : "http://dbpedia.org/resource/Vivien_Leigh"
      }, {
        "label" : "Camille Flammarion",
        "uri" : "http://dbpedia.org/resource/Camille_Flammarion"
      }, {
        "label" : "Chris Martin",
        "uri" : "http://dbpedia.org/resource/Chris_Martin"
      }, {
        "label" : "Céline Bara",
        "uri" : "http://dbpedia.org/resource/Céline_Bara"
      }, {
        "label" : "Dennis Quaid",
        "uri" : "http://dbpedia.org/resource/Dennis_Quaid"
      }, {
        "label" : "Joanne Whalley",
        "uri" : "http://dbpedia.org/resource/Joanne_Whalley"
      }, {
        "label" : "John Grey of Groby",
        "uri" : "http://dbpedia.org/resource/John_Grey_of_Groby"
      }, {
        "label" : "Minnie Maddern Fiske",
        "uri" : "http://dbpedia.org/resource/Minnie_Maddern_Fiske"
      }, {
        "label" : "Padma Lakshmi",
        "uri" : "http://dbpedia.org/resource/Padma_Lakshmi"
      }, {
        "label" : "Talisa Soto",
        "uri" : "http://dbpedia.org/resource/Talisa_Soto"
      }, {
        "label" : "Aaron Spelling",
        "uri" : "http://dbpedia.org/resource/Aaron_Spelling"
      }, {
        "label" : "Adam Hochschild",
        "uri" : "http://dbpedia.org/resource/Adam_Hochschild"
      }, {
        "label" : "Alastair Dunnett",
        "uri" : "http://dbpedia.org/resource/Alastair_Dunnett"
      }, {
        "label" : "Arlie Russell Hochschild",
        "uri" : "http://dbpedia.org/resource/Arlie_Russell_Hochschild"
      }, {
        "label" : "Beata Tyszkiewicz",
        "uri" : "http://dbpedia.org/resource/Beata_Tyszkiewicz"
      }, {
        "label" : "Benjamin Bratt",
        "uri" : "http://dbpedia.org/resource/Benjamin_Bratt"
      }, {
        "label" : "Bunker Roy",
        "uri" : "http://dbpedia.org/resource/Bunker_Roy"
      }, {
        "label" : "Candy Spelling",
        "uri" : "http://dbpedia.org/resource/Candy_Spelling"
      }, {
        "label" : "Cyrille Bara",
        "uri" : "http://dbpedia.org/resource/Cyrille_Bara"
      }, {
        "label" : "Dorothy Dunnett",
        "uri" : "http://dbpedia.org/resource/Dorothy_Dunnett"
      }, {
        "label" : "Ehud Olmert",
        "uri" : "http://dbpedia.org/resource/Ehud_Olmert"
      }, {
        "label" : "Elvira of Castile, Queen of León",
        "uri" : "http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_León"
      }, {
        "label" : "Gemini Ganesan",
        "uri" : "http://dbpedia.org/resource/Gemini_Ganesan"
      }, {
        "label" : "Harriet Smithson",
        "uri" : "http://dbpedia.org/resource/Harriet_Smithson"
      }, {
        "label" : "James Harris Simons",
        "uri" : "http://dbpedia.org/resource/James_Harris_Simons"
      }, {
        "label" : "Lewis Craig Humphrey",
        "uri" : "http://dbpedia.org/resource/Lewis_Craig_Humphrey"
      }, {
        "label" : "Paul Hasluck",
        "uri" : "http://dbpedia.org/resource/Paul_Hasluck"
      }, {
        "label" : "Paula Dockery",
        "uri" : "http://dbpedia.org/resource/Paula_Dockery"
      }, {
        "label" : "Robert Sidney, 2nd Earl of Leicester",
        "uri" : "http://dbpedia.org/resource/Robert_Sidney,_2nd_Earl_of_Leicester"
      }, {
        "label" : "Rolly Bester",
        "uri" : "http://dbpedia.org/resource/Rolly_Bester"
      }, {
        "label" : "Ruy Guerra",
        "uri" : "http://dbpedia.org/resource/Ruy_Guerra"
      }, {
        "label" : "Clara McMillen",
        "uri" : "http://dbpedia.org/resource/Clara_McMillen"
      }, {
        "label" : "Diana Gould (dancer)",
        "uri" : "http://dbpedia.org/resource/Diana_Gould_(dancer)"
      }, {
        "label" : "Sidney Miller (actor)",
        "uri" : "http://dbpedia.org/resource/Sidney_Miller_(actor)"
      }, {
        "label" : "Sir Edward Burgh",
        "uri" : "http://dbpedia.org/resource/Sir_Edward_Burgh"
      }, {
        "label" : "Henry Morgenthau Jr.",
        "uri" : "http://dbpedia.org/resource/Henry_Morgenthau_Jr."
      }, {
        "label" : "Lydia Lopokova",
        "uri" : "http://dbpedia.org/resource/Lydia_Lopokova"
      }, {
        "label" : "Maxwell Reed",
        "uri" : "http://dbpedia.org/resource/Maxwell_Reed"
      }, {
        "label" : "Sigrid the Haughty",
        "uri" : "http://dbpedia.org/resource/Sigrid_the_Haughty"
      }, {
        "label" : "Elena Ceaușescu",
        "uri" : "http://dbpedia.org/resource/Elena_Ceaușescu"
      }, {
        "label" : "Lydia Clarke",
        "uri" : "http://dbpedia.org/resource/Lydia_Clarke"
      }, {
        "label" : "Ruqaiya Sultan Begum",
        "uri" : "http://dbpedia.org/resource/Ruqaiya_Sultan_Begum"
      }, {
        "label" : "Eliza Jumel",
        "uri" : "http://dbpedia.org/resource/Eliza_Jumel"
      }, {
        "label" : "Lena Herzog",
        "uri" : "http://dbpedia.org/resource/Lena_Herzog"
      }, {
        "label" : "Katie Lee (chef)",
        "uri" : "http://dbpedia.org/resource/Katie_Lee_(chef)"
      }, {
        "label" : "Elsa Pataky",
        "uri" : "http://dbpedia.org/resource/Elsa_Pataky"
      }, {
        "label" : "Maïwenn",
        "uri" : "http://dbpedia.org/resource/Maïwenn"
      }, {
        "label" : "Tom Courtenay",
        "uri" : "http://dbpedia.org/resource/Tom_Courtenay"
      }, {
        "label" : "Christian I of Denmark",
        "uri" : "http://dbpedia.org/resource/Christian_I_of_Denmark"
      }, {
        "label" : "Edward of Westminster, Prince of Wales",
        "uri" : "http://dbpedia.org/resource/Edward_of_Westminster,_Prince_of_Wales"
      }, {
        "label" : "Joanne Woodward",
        "uri" : "http://dbpedia.org/resource/Joanne_Woodward"
      }, {
        "label" : "Lady Caroline Lamb",
        "uri" : "http://dbpedia.org/resource/Lady_Caroline_Lamb"
      }, {
        "label" : "Margaret Sullavan",
        "uri" : "http://dbpedia.org/resource/Margaret_Sullavan"
      }, {
        "label" : "Maria Fitzherbert",
        "uri" : "http://dbpedia.org/resource/Maria_Fitzherbert"
      }, {
        "label" : "Mickey Deans",
        "uri" : "http://dbpedia.org/resource/Mickey_Deans"
      }, {
        "label" : "Alice Hathaway Lee Roosevelt",
        "uri" : "http://dbpedia.org/resource/Alice_Hathaway_Lee_Roosevelt"
      }, {
        "label" : "Frank Bunker Gilbreth Sr.",
        "uri" : "http://dbpedia.org/resource/Frank_Bunker_Gilbreth_Sr."
      }, {
        "label" : "Alfred Steele",
        "uri" : "http://dbpedia.org/resource/Alfred_Steele"
      }, {
        "label" : "Barbara Hutton",
        "uri" : "http://dbpedia.org/resource/Barbara_Hutton"
      }, {
        "label" : "Sidney Luft",
        "uri" : "http://dbpedia.org/resource/Sidney_Luft"
      }, {
        "label" : "Sylvia Ashley",
        "uri" : "http://dbpedia.org/resource/Sylvia_Ashley"
      }, {
        "label" : "Salima Sultan Begum",
        "uri" : "http://dbpedia.org/resource/Salima_Sultan_Begum"
      }, {
        "label" : "Cecily Neville, Duchess of Warwick",
        "uri" : "http://dbpedia.org/resource/Cecily_Neville,_Duchess_of_Warwick"
      }, {
        "label" : "David Evans Shaw",
        "uri" : "http://dbpedia.org/resource/David_Evans_Shaw"
      }, {
        "label" : "John Jay O'Connor",
        "uri" : "http://dbpedia.org/resource/John_Jay_O'Connor"
      }, {
        "label" : "Marta Fernandez Miranda de Batista",
        "uri" : "http://dbpedia.org/resource/Marta_Fernandez_Miranda_de_Batista"
      }, {
        "label" : "Josephine Dillon",
        "uri" : "http://dbpedia.org/resource/Josephine_Dillon"
      }, {
        "label" : "Sunita Deshpande",
        "uri" : "http://dbpedia.org/resource/Sunita_Deshpande"
      }, {
        "label" : "Bettina Gorton",
        "uri" : "http://dbpedia.org/resource/Bettina_Gorton"
      }, {
        "label" : "Luma de Oliveira",
        "uri" : "http://dbpedia.org/resource/Luma_de_Oliveira"
      }, {
        "label" : "Tove of the Obotrites",
        "uri" : "http://dbpedia.org/resource/Tove_of_the_Obotrites"
      }, {
        "label" : "Gelli de Belen",
        "uri" : "http://dbpedia.org/resource/Gelli_de_Belen"
      }, {
        "label" : "Albia Dominica",
        "uri" : "http://dbpedia.org/resource/Albia_Dominica"
      } ]
    },
    "combination" : true
  }, {
    "id" : "90",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian cleric?", "Give me the birth date of Belgian clerics?", "Tell me the birth date of a Belgian cleric?", "Tell me the birth date of Belgian clerics?", "What is the birth date of a Belgian cleric?", "What is the birth date of Belgian clerics?", "What was the birth date of a Belgian cleric?", "What was the birth date of Belgian clerics?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cleric>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "91",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian office holder?", "Give me the birth date of Belgian office holders?", "Tell me the birth date of a Belgian office holder?", "Tell me the birth date of Belgian office holders?", "What is the birth date of a Belgian office holder?", "What is the birth date of Belgian office holders?", "What was the birth date of a Belgian office holder?", "What was the birth date of Belgian office holders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "92",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian agent?", "Give me the birth date of Belgian agents?", "Tell me the birth date of a Belgian agent?", "Tell me the birth date of Belgian agents?", "What is the birth date of a Belgian agent?", "What is the birth date of Belgian agents?", "What was the birth date of a Belgian agent?", "What was the birth date of Belgian agents?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Agent>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "93",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian economist?", "Give me the birth date of Belgian economists?", "Tell me the birth date of a Belgian economist?", "Tell me the birth date of Belgian economists?", "What is the birth date of a Belgian economist?", "What is the birth date of Belgian economists?", "What was the birth date of a Belgian economist?", "What was the birth date of Belgian economists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Economist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "94",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian motorcycle rider?", "Give me the birth date of Belgian motorcycle riders?", "Tell me the birth date of a Belgian motorcycle rider?", "Tell me the birth date of Belgian motorcycle riders?", "What is the birth date of a Belgian motorcycle rider?", "What is the birth date of Belgian motorcycle riders?", "What was the birth date of a Belgian motorcycle rider?", "What was the birth date of Belgian motorcycle riders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorcycleRider>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "95",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian artist?", "Give me the birth date of Belgian artists?", "Tell me the birth date of a Belgian artist?", "Tell me the birth date of Belgian artists?", "What is the birth date of a Belgian artist?", "What is the birth date of Belgian artists?", "What was the birth date of a Belgian artist?", "What was the birth date of Belgian artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "96",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian athlete?", "Give me the birth date of Belgian athletes?", "Tell me the birth date of a Belgian athlete?", "Tell me the birth date of Belgian athletes?", "What is the birth date of a Belgian athlete?", "What is the birth date of Belgian athletes?", "What was the birth date of a Belgian athlete?", "What was the birth date of Belgian athletes?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "97",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian scientist?", "Give me the birth date of Belgian scientists?", "Tell me the birth date of a Belgian scientist?", "Tell me the birth date of Belgian scientists?", "What is the birth date of a Belgian scientist?", "What is the birth date of Belgian scientists?", "What was the birth date of a Belgian scientist?", "What was the birth date of Belgian scientists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "98",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian architect?", "Give me the birth date of Belgian architects?", "Tell me the birth date of a Belgian architect?", "Tell me the birth date of Belgian architects?", "What is the birth date of a Belgian architect?", "What is the birth date of Belgian architects?", "What was the birth date of a Belgian architect?", "What was the birth date of Belgian architects?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "99",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian golf player?", "Give me the birth date of Belgian golf players?", "Tell me the birth date of a Belgian golf player?", "Tell me the birth date of Belgian golf players?", "What is the birth date of a Belgian golf player?", "What is the birth date of Belgian golf players?", "What was the birth date of a Belgian golf player?", "What was the birth date of Belgian golf players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "100",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian racing driver?", "Give me the birth date of Belgian racing drivers?", "Tell me the birth date of a Belgian racing driver?", "Tell me the birth date of Belgian racing drivers?", "What is the birth date of a Belgian racing driver?", "What is the birth date of Belgian racing drivers?", "What was the birth date of a Belgian racing driver?", "What was the birth date of Belgian racing drivers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RacingDriver>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "101",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian politician?", "Give me the birth date of Belgian politicians?", "Tell me the birth date of a Belgian politician?", "Tell me the birth date of Belgian politicians?", "What is the birth date of a Belgian politician?", "What is the birth date of Belgian politicians?", "What was the birth date of a Belgian politician?", "What was the birth date of Belgian politicians?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "102",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian swimmer?", "Give me the birth date of Belgian swimmers?", "Tell me the birth date of a Belgian swimmer?", "Tell me the birth date of Belgian swimmers?", "What is the birth date of a Belgian swimmer?", "What is the birth date of Belgian swimmers?", "What was the birth date of a Belgian swimmer?", "What was the birth date of Belgian swimmers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Swimmer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "103",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian volleyball player?", "Give me the birth date of Belgian volleyball players?", "Tell me the birth date of a Belgian volleyball player?", "Tell me the birth date of Belgian volleyball players?", "What is the birth date of a Belgian volleyball player?", "What is the birth date of Belgian volleyball players?", "What was the birth date of a Belgian volleyball player?", "What was the birth date of Belgian volleyball players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VolleyballPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "104",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian person?", "Give me the birth date of Belgian persons?", "Tell me the birth date of a Belgian person?", "Tell me the birth date of Belgian persons?", "What is the birth date of a Belgian person?", "What is the birth date of Belgian persons?", "What was the birth date of a Belgian person?", "What was the birth date of Belgian persons?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "105",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian Christian Bishop?", "Give me the birth date of Belgian Christian Bishops?", "Tell me the birth date of a Belgian Christian Bishop?", "Tell me the birth date of Belgian Christian Bishops?", "What is the birth date of a Belgian Christian Bishop?", "What is the birth date of Belgian Christian Bishops?", "What was the birth date of a Belgian Christian Bishop?", "What was the birth date of Belgian Christian Bishops?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ChristianBishop>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "106",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian comics creator?", "Give me the birth date of Belgian comics creators?", "Tell me the birth date of a Belgian comics creator?", "Tell me the birth date of Belgian comics creators?", "What is the birth date of a Belgian comics creator?", "What is the birth date of Belgian comics creators?", "What was the birth date of a Belgian comics creator?", "What was the birth date of Belgian comics creators?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCreator>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "107",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian writer?", "Give me the birth date of Belgian writers?", "Tell me the birth date of a Belgian writer?", "Tell me the birth date of Belgian writers?", "What is the birth date of a Belgian writer?", "What is the birth date of Belgian writers?", "What was the birth date of a Belgian writer?", "What was the birth date of Belgian writers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "108",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian motorsport racer?", "Give me the birth date of Belgian motorsport racers?", "Tell me the birth date of a Belgian motorsport racer?", "Tell me the birth date of Belgian motorsport racers?", "What is the birth date of a Belgian motorsport racer?", "What is the birth date of Belgian motorsport racers?", "What was the birth date of a Belgian motorsport racer?", "What was the birth date of Belgian motorsport racers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorsportRacer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "109",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of a Belgian musical artist?", "Give me the birth date of Belgian musical artists?", "Tell me the birth date of a Belgian musical artist?", "Tell me the birth date of Belgian musical artists?", "What is the birth date of a Belgian musical artist?", "What is the birth date of Belgian musical artists?", "What was the birth date of a Belgian musical artist?", "What was the birth date of Belgian musical artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "110",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth date of persons born by $x?", "Tell me the birth date of persons born by $x?", "What is the birth date of persons born by $x?", "What was the birth date of persons born by $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfPropx)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "1969-12-17",
        "uri" : "1969-12-17"
      }, {
        "label" : "1936-11-30",
        "uri" : "1936-11-30"
      }, {
        "label" : "1990-10-30",
        "uri" : "1990-10-30"
      }, {
        "label" : "1976-11-12",
        "uri" : "1976-11-12"
      }, {
        "label" : "1989-11-29",
        "uri" : "1989-11-29"
      }, {
        "label" : "1943-12-29",
        "uri" : "1943-12-29"
      }, {
        "label" : "1918-12-30",
        "uri" : "1918-12-30"
      }, {
        "label" : "1975-10-13",
        "uri" : "1975-10-13"
      }, {
        "label" : "1896-09-01",
        "uri" : "1896-09-01"
      }, {
        "label" : "1756-02-06",
        "uri" : "1756-02-06"
      }, {
        "label" : "1900-11-14",
        "uri" : "1900-11-14"
      }, {
        "label" : "1918-10-06",
        "uri" : "1918-10-06"
      }, {
        "label" : "1667-05-26",
        "uri" : "1667-05-26"
      }, {
        "label" : "1779-11-14",
        "uri" : "1779-11-14"
      }, {
        "label" : "1937-01-01",
        "uri" : "1937-01-01"
      }, {
        "label" : "1952-07-06",
        "uri" : "1952-07-06"
      }, {
        "label" : "1900-02-05",
        "uri" : "1900-02-05"
      }, {
        "label" : "1870-12-10",
        "uri" : "1870-12-10"
      }, {
        "label" : "1752-09-18",
        "uri" : "1752-09-18"
      }, {
        "label" : "1929-05-16",
        "uri" : "1929-05-16"
      }, {
        "label" : "1955-02-13",
        "uri" : "1955-02-13"
      }, {
        "label" : "1940-04-25",
        "uri" : "1940-04-25"
      }, {
        "label" : "1946-02-21",
        "uri" : "1946-02-21"
      }, {
        "label" : "1970-08-13",
        "uri" : "1970-08-13"
      }, {
        "label" : "1863-12-08",
        "uri" : "1863-12-08"
      }, {
        "label" : "1936-05-09",
        "uri" : "1936-05-09"
      }, {
        "label" : "1414-11-09",
        "uri" : "1414-11-09"
      }, {
        "label" : "1931-05-03",
        "uri" : "1931-05-03"
      }, {
        "label" : "1950-01-09",
        "uri" : "1950-01-09"
      } ]
    },
    "combination" : true
  }, {
    "id" : "111",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of the spouse of $x?", "Tell me the occupation of the spouse of $x?", "What is the occupation of the spouse of $x?", "What was the occupation of the spouse of $x?", "Which person function is the occupation of the spouse of $x?", "Which person function was the occupation of the spouse of $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "Alfred Bester",
        "uri" : "http://dbpedia.org/resource/Alfred_Bester"
      }, {
        "label" : "Brad Pitt",
        "uri" : "http://dbpedia.org/resource/Brad_Pitt"
      }, {
        "label" : "Carole Lombard",
        "uri" : "http://dbpedia.org/resource/Carole_Lombard"
      }, {
        "label" : "Christopher Lambert",
        "uri" : "http://dbpedia.org/resource/Christopher_Lambert"
      }, {
        "label" : "Clark Gable",
        "uri" : "http://dbpedia.org/resource/Clark_Gable"
      }, {
        "label" : "Edmond Hamilton",
        "uri" : "http://dbpedia.org/resource/Edmond_Hamilton"
      }, {
        "label" : "Elizabeth Taylor",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Taylor"
      }, {
        "label" : "Gwyneth Paltrow",
        "uri" : "http://dbpedia.org/resource/Gwyneth_Paltrow"
      }, {
        "label" : "Ingrid Bergman",
        "uri" : "http://dbpedia.org/resource/Ingrid_Bergman"
      }, {
        "label" : "Jennifer Aniston",
        "uri" : "http://dbpedia.org/resource/Jennifer_Aniston"
      }, {
        "label" : "Richard Burton",
        "uri" : "http://dbpedia.org/resource/Richard_Burton"
      }, {
        "label" : "Roberto Rossellini",
        "uri" : "http://dbpedia.org/resource/Roberto_Rossellini"
      }, {
        "label" : "Val Kilmer",
        "uri" : "http://dbpedia.org/resource/Val_Kilmer"
      }, {
        "label" : "Chris Martin",
        "uri" : "http://dbpedia.org/resource/Chris_Martin"
      }, {
        "label" : "Dennis Quaid",
        "uri" : "http://dbpedia.org/resource/Dennis_Quaid"
      }, {
        "label" : "Joanne Whalley",
        "uri" : "http://dbpedia.org/resource/Joanne_Whalley"
      }, {
        "label" : "Minnie Maddern Fiske",
        "uri" : "http://dbpedia.org/resource/Minnie_Maddern_Fiske"
      }, {
        "label" : "Savitri (actress)",
        "uri" : "http://dbpedia.org/resource/Savitri_(actress)"
      }, {
        "label" : "Talisa Soto",
        "uri" : "http://dbpedia.org/resource/Talisa_Soto"
      }, {
        "label" : "Aaron Spelling",
        "uri" : "http://dbpedia.org/resource/Aaron_Spelling"
      }, {
        "label" : "Alastair Dunnett",
        "uri" : "http://dbpedia.org/resource/Alastair_Dunnett"
      }, {
        "label" : "Arlie Russell Hochschild",
        "uri" : "http://dbpedia.org/resource/Arlie_Russell_Hochschild"
      }, {
        "label" : "Barbara Simons",
        "uri" : "http://dbpedia.org/resource/Barbara_Simons"
      }, {
        "label" : "Beata Tyszkiewicz",
        "uri" : "http://dbpedia.org/resource/Beata_Tyszkiewicz"
      }, {
        "label" : "Benjamin Bratt",
        "uri" : "http://dbpedia.org/resource/Benjamin_Bratt"
      }, {
        "label" : "Bunker Roy",
        "uri" : "http://dbpedia.org/resource/Bunker_Roy"
      }, {
        "label" : "Candy Spelling",
        "uri" : "http://dbpedia.org/resource/Candy_Spelling"
      }, {
        "label" : "Eleanor Silliman Belknap Humphrey",
        "uri" : "http://dbpedia.org/resource/Eleanor_Silliman_Belknap_Humphrey"
      }, {
        "label" : "Lewis Craig Humphrey",
        "uri" : "http://dbpedia.org/resource/Lewis_Craig_Humphrey"
      }, {
        "label" : "Ruy Guerra",
        "uri" : "http://dbpedia.org/resource/Ruy_Guerra"
      }, {
        "label" : "Yuri Rasovsky",
        "uri" : "http://dbpedia.org/resource/Yuri_Rasovsky"
      }, {
        "label" : "Deborah Walley",
        "uri" : "http://dbpedia.org/resource/Deborah_Walley"
      }, {
        "label" : "Sarala Roy",
        "uri" : "http://dbpedia.org/resource/Sarala_Roy"
      }, {
        "label" : "Sidney Miller (actor)",
        "uri" : "http://dbpedia.org/resource/Sidney_Miller_(actor)"
      }, {
        "label" : "Henry Morgenthau Jr.",
        "uri" : "http://dbpedia.org/resource/Henry_Morgenthau_Jr."
      }, {
        "label" : "Maxwell Reed",
        "uri" : "http://dbpedia.org/resource/Maxwell_Reed"
      }, {
        "label" : "Lydia Clarke",
        "uri" : "http://dbpedia.org/resource/Lydia_Clarke"
      }, {
        "label" : "Kiran Juneja",
        "uri" : "http://dbpedia.org/resource/Kiran_Juneja"
      }, {
        "label" : "Lena Herzog",
        "uri" : "http://dbpedia.org/resource/Lena_Herzog"
      }, {
        "label" : "Elsa Pataky",
        "uri" : "http://dbpedia.org/resource/Elsa_Pataky"
      }, {
        "label" : "Maïwenn",
        "uri" : "http://dbpedia.org/resource/Maïwenn"
      }, {
        "label" : "Joanne Woodward",
        "uri" : "http://dbpedia.org/resource/Joanne_Woodward"
      }, {
        "label" : "Margaret Sullavan",
        "uri" : "http://dbpedia.org/resource/Margaret_Sullavan"
      }, {
        "label" : "Mickey Deans",
        "uri" : "http://dbpedia.org/resource/Mickey_Deans"
      }, {
        "label" : "Gustaf Gründgens",
        "uri" : "http://dbpedia.org/resource/Gustaf_Gründgens"
      }, {
        "label" : "Frank Bunker Gilbreth Sr.",
        "uri" : "http://dbpedia.org/resource/Frank_Bunker_Gilbreth_Sr."
      }, {
        "label" : "Alfred Steele",
        "uri" : "http://dbpedia.org/resource/Alfred_Steele"
      }, {
        "label" : "Ralph Forbes",
        "uri" : "http://dbpedia.org/resource/Ralph_Forbes"
      }, {
        "label" : "Sidney Luft",
        "uri" : "http://dbpedia.org/resource/Sidney_Luft"
      }, {
        "label" : "Sylvia Ashley",
        "uri" : "http://dbpedia.org/resource/Sylvia_Ashley"
      }, {
        "label" : "David Evans Shaw",
        "uri" : "http://dbpedia.org/resource/David_Evans_Shaw"
      }, {
        "label" : "Josephine Dillon",
        "uri" : "http://dbpedia.org/resource/Josephine_Dillon"
      }, {
        "label" : "Lucy Barker",
        "uri" : "http://dbpedia.org/resource/Lucy_Barker"
      }, {
        "label" : "Sunita Deshpande",
        "uri" : "http://dbpedia.org/resource/Sunita_Deshpande"
      }, {
        "label" : "Amy Holden Jones",
        "uri" : "http://dbpedia.org/resource/Amy_Holden_Jones"
      }, {
        "label" : "Luma de Oliveira",
        "uri" : "http://dbpedia.org/resource/Luma_de_Oliveira"
      }, {
        "label" : "Gelli de Belen",
        "uri" : "http://dbpedia.org/resource/Gelli_de_Belen"
      }, {
        "label" : "Amelia Warner",
        "uri" : "http://dbpedia.org/resource/Amelia_Warner"
      }, {
        "label" : "Bianca Jagger",
        "uri" : "http://dbpedia.org/resource/Bianca_Jagger"
      }, {
        "label" : "Daniel Massey (actor)",
        "uri" : "http://dbpedia.org/resource/Daniel_Massey_(actor)"
      }, {
        "label" : "Jack Ryan (politician)",
        "uri" : "http://dbpedia.org/resource/Jack_Ryan_(politician)"
      }, {
        "label" : "Kay Adams-Corleone",
        "uri" : "http://dbpedia.org/resource/Kay_Adams-Corleone"
      }, {
        "label" : "Leonard Woolf",
        "uri" : "http://dbpedia.org/resource/Leonard_Woolf"
      }, {
        "label" : "Michael Wilding (actor)",
        "uri" : "http://dbpedia.org/resource/Michael_Wilding_(actor)"
      }, {
        "label" : "Robert Williams (actor)",
        "uri" : "http://dbpedia.org/resource/Robert_Williams_(actor)"
      }, {
        "label" : "Carl Koch (director)",
        "uri" : "http://dbpedia.org/resource/Carl_Koch_(director)"
      }, {
        "label" : "Hank Azaria",
        "uri" : "http://dbpedia.org/resource/Hank_Azaria"
      }, {
        "label" : "Shabnam",
        "uri" : "http://dbpedia.org/resource/Shabnam"
      }, {
        "label" : "Dilys Hamlett",
        "uri" : "http://dbpedia.org/resource/Dilys_Hamlett"
      }, {
        "label" : "Elizabeth Corday",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Corday"
      }, {
        "label" : "Marion Mahony Griffin",
        "uri" : "http://dbpedia.org/resource/Marion_Mahony_Griffin"
      }, {
        "label" : "Mary Hay (actress)",
        "uri" : "http://dbpedia.org/resource/Mary_Hay_(actress)"
      }, {
        "label" : "Russell Lloyd (film editor)",
        "uri" : "http://dbpedia.org/resource/Russell_Lloyd_(film_editor)"
      }, {
        "label" : "Tom Moore (actor)",
        "uri" : "http://dbpedia.org/resource/Tom_Moore_(actor)"
      }, {
        "label" : "Carlos the Jackal",
        "uri" : "http://dbpedia.org/resource/Carlos_the_Jackal"
      }, {
        "label" : "Rob Pike",
        "uri" : "http://dbpedia.org/resource/Rob_Pike"
      }, {
        "label" : "Helen Dallimore",
        "uri" : "http://dbpedia.org/resource/Helen_Dallimore"
      }, {
        "label" : "Proinsias Mac Aonghusa",
        "uri" : "http://dbpedia.org/resource/Proinsias_Mac_Aonghusa"
      }, {
        "label" : "Raza Jaffrey",
        "uri" : "http://dbpedia.org/resource/Raza_Jaffrey"
      }, {
        "label" : "Robert Gist",
        "uri" : "http://dbpedia.org/resource/Robert_Gist"
      }, {
        "label" : "Rutanya Alda",
        "uri" : "http://dbpedia.org/resource/Rutanya_Alda"
      }, {
        "label" : "Taryn Simon",
        "uri" : "http://dbpedia.org/resource/Taryn_Simon"
      }, {
        "label" : "Chrissie White",
        "uri" : "http://dbpedia.org/resource/Chrissie_White"
      }, {
        "label" : "Aaliyah",
        "uri" : "http://dbpedia.org/resource/Aaliyah"
      }, {
        "label" : "Bill Gates",
        "uri" : "http://dbpedia.org/resource/Bill_Gates"
      }, {
        "label" : "Calista Flockhart",
        "uri" : "http://dbpedia.org/resource/Calista_Flockhart"
      }, {
        "label" : "Chiang Kai-shek",
        "uri" : "http://dbpedia.org/resource/Chiang_Kai-shek"
      }, {
        "label" : "David Beckham",
        "uri" : "http://dbpedia.org/resource/David_Beckham"
      }, {
        "label" : "Frank Sinatra",
        "uri" : "http://dbpedia.org/resource/Frank_Sinatra"
      }, {
        "label" : "Gene Roddenberry",
        "uri" : "http://dbpedia.org/resource/Gene_Roddenberry"
      }, {
        "label" : "Jet Li",
        "uri" : "http://dbpedia.org/resource/Jet_Li"
      }, {
        "label" : "Nicole Kidman",
        "uri" : "http://dbpedia.org/resource/Nicole_Kidman"
      }, {
        "label" : "Patrick Macnee",
        "uri" : "http://dbpedia.org/resource/Patrick_Macnee"
      }, {
        "label" : "Roman Polanski",
        "uri" : "http://dbpedia.org/resource/Roman_Polanski"
      }, {
        "label" : "Stephen King",
        "uri" : "http://dbpedia.org/resource/Stephen_King"
      }, {
        "label" : "Anne Hathaway (Shakespeare's wife)",
        "uri" : "http://dbpedia.org/resource/Anne_Hathaway_(Shakespeare's_wife)"
      }, {
        "label" : "Evelyn Keyes",
        "uri" : "http://dbpedia.org/resource/Evelyn_Keyes"
      }, {
        "label" : "Gauri Shinde",
        "uri" : "http://dbpedia.org/resource/Gauri_Shinde"
      }, {
        "label" : "Ichirō Hatoyama",
        "uri" : "http://dbpedia.org/resource/Ichirō_Hatoyama"
      }, {
        "label" : "Jesse Birdsall",
        "uri" : "http://dbpedia.org/resource/Jesse_Birdsall"
      } ]
    },
    "combination" : true
  }, {
    "id" : "112",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian cleric?", "Give me the occupation of Belgian clerics?", "Tell me the occupation of a Belgian cleric?", "Tell me the occupation of Belgian clerics?", "What is the occupation of a Belgian cleric?", "What is the occupation of Belgian clerics?", "What was the occupation of a Belgian cleric?", "What was the occupation of Belgian clerics?", "Which person function is the occupation of a Belgian cleric?", "Which person function is the occupation of Belgian clerics?", "Which person function was the occupation of a Belgian cleric?", "Which person function was the occupation of Belgian clerics?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cleric>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "113",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian office holder?", "Give me the occupation of Belgian office holders?", "Tell me the occupation of a Belgian office holder?", "Tell me the occupation of Belgian office holders?", "What is the occupation of a Belgian office holder?", "What is the occupation of Belgian office holders?", "What was the occupation of a Belgian office holder?", "What was the occupation of Belgian office holders?", "Which person function is the occupation of a Belgian office holder?", "Which person function is the occupation of Belgian office holders?", "Which person function was the occupation of a Belgian office holder?", "Which person function was the occupation of Belgian office holders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "114",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian agent?", "Give me the occupation of Belgian agents?", "Tell me the occupation of a Belgian agent?", "Tell me the occupation of Belgian agents?", "What is the occupation of a Belgian agent?", "What is the occupation of Belgian agents?", "What was the occupation of a Belgian agent?", "What was the occupation of Belgian agents?", "Which person function is the occupation of a Belgian agent?", "Which person function is the occupation of Belgian agents?", "Which person function was the occupation of a Belgian agent?", "Which person function was the occupation of Belgian agents?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Agent>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "115",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian economist?", "Give me the occupation of Belgian economists?", "Tell me the occupation of a Belgian economist?", "Tell me the occupation of Belgian economists?", "What is the occupation of a Belgian economist?", "What is the occupation of Belgian economists?", "What was the occupation of a Belgian economist?", "What was the occupation of Belgian economists?", "Which person function is the occupation of a Belgian economist?", "Which person function is the occupation of Belgian economists?", "Which person function was the occupation of a Belgian economist?", "Which person function was the occupation of Belgian economists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Economist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "116",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian motorcycle rider?", "Give me the occupation of Belgian motorcycle riders?", "Tell me the occupation of a Belgian motorcycle rider?", "Tell me the occupation of Belgian motorcycle riders?", "What is the occupation of a Belgian motorcycle rider?", "What is the occupation of Belgian motorcycle riders?", "What was the occupation of a Belgian motorcycle rider?", "What was the occupation of Belgian motorcycle riders?", "Which person function is the occupation of a Belgian motorcycle rider?", "Which person function is the occupation of Belgian motorcycle riders?", "Which person function was the occupation of a Belgian motorcycle rider?", "Which person function was the occupation of Belgian motorcycle riders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorcycleRider>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "117",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian artist?", "Give me the occupation of Belgian artists?", "Tell me the occupation of a Belgian artist?", "Tell me the occupation of Belgian artists?", "What is the occupation of a Belgian artist?", "What is the occupation of Belgian artists?", "What was the occupation of a Belgian artist?", "What was the occupation of Belgian artists?", "Which person function is the occupation of a Belgian artist?", "Which person function is the occupation of Belgian artists?", "Which person function was the occupation of a Belgian artist?", "Which person function was the occupation of Belgian artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "118",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian athlete?", "Give me the occupation of Belgian athletes?", "Tell me the occupation of a Belgian athlete?", "Tell me the occupation of Belgian athletes?", "What is the occupation of a Belgian athlete?", "What is the occupation of Belgian athletes?", "What was the occupation of a Belgian athlete?", "What was the occupation of Belgian athletes?", "Which person function is the occupation of a Belgian athlete?", "Which person function is the occupation of Belgian athletes?", "Which person function was the occupation of a Belgian athlete?", "Which person function was the occupation of Belgian athletes?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "119",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian scientist?", "Give me the occupation of Belgian scientists?", "Tell me the occupation of a Belgian scientist?", "Tell me the occupation of Belgian scientists?", "What is the occupation of a Belgian scientist?", "What is the occupation of Belgian scientists?", "What was the occupation of a Belgian scientist?", "What was the occupation of Belgian scientists?", "Which person function is the occupation of a Belgian scientist?", "Which person function is the occupation of Belgian scientists?", "Which person function was the occupation of a Belgian scientist?", "Which person function was the occupation of Belgian scientists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "120",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian architect?", "Give me the occupation of Belgian architects?", "Tell me the occupation of a Belgian architect?", "Tell me the occupation of Belgian architects?", "What is the occupation of a Belgian architect?", "What is the occupation of Belgian architects?", "What was the occupation of a Belgian architect?", "What was the occupation of Belgian architects?", "Which person function is the occupation of a Belgian architect?", "Which person function is the occupation of Belgian architects?", "Which person function was the occupation of a Belgian architect?", "Which person function was the occupation of Belgian architects?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "121",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian golf player?", "Give me the occupation of Belgian golf players?", "Tell me the occupation of a Belgian golf player?", "Tell me the occupation of Belgian golf players?", "What is the occupation of a Belgian golf player?", "What is the occupation of Belgian golf players?", "What was the occupation of a Belgian golf player?", "What was the occupation of Belgian golf players?", "Which person function is the occupation of a Belgian golf player?", "Which person function is the occupation of Belgian golf players?", "Which person function was the occupation of a Belgian golf player?", "Which person function was the occupation of Belgian golf players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "122",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian racing driver?", "Give me the occupation of Belgian racing drivers?", "Tell me the occupation of a Belgian racing driver?", "Tell me the occupation of Belgian racing drivers?", "What is the occupation of a Belgian racing driver?", "What is the occupation of Belgian racing drivers?", "What was the occupation of a Belgian racing driver?", "What was the occupation of Belgian racing drivers?", "Which person function is the occupation of a Belgian racing driver?", "Which person function is the occupation of Belgian racing drivers?", "Which person function was the occupation of a Belgian racing driver?", "Which person function was the occupation of Belgian racing drivers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RacingDriver>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "123",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian politician?", "Give me the occupation of Belgian politicians?", "Tell me the occupation of a Belgian politician?", "Tell me the occupation of Belgian politicians?", "What is the occupation of a Belgian politician?", "What is the occupation of Belgian politicians?", "What was the occupation of a Belgian politician?", "What was the occupation of Belgian politicians?", "Which person function is the occupation of a Belgian politician?", "Which person function is the occupation of Belgian politicians?", "Which person function was the occupation of a Belgian politician?", "Which person function was the occupation of Belgian politicians?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "124",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian swimmer?", "Give me the occupation of Belgian swimmers?", "Tell me the occupation of a Belgian swimmer?", "Tell me the occupation of Belgian swimmers?", "What is the occupation of a Belgian swimmer?", "What is the occupation of Belgian swimmers?", "What was the occupation of a Belgian swimmer?", "What was the occupation of Belgian swimmers?", "Which person function is the occupation of a Belgian swimmer?", "Which person function is the occupation of Belgian swimmers?", "Which person function was the occupation of a Belgian swimmer?", "Which person function was the occupation of Belgian swimmers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Swimmer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "125",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian volleyball player?", "Give me the occupation of Belgian volleyball players?", "Tell me the occupation of a Belgian volleyball player?", "Tell me the occupation of Belgian volleyball players?", "What is the occupation of a Belgian volleyball player?", "What is the occupation of Belgian volleyball players?", "What was the occupation of a Belgian volleyball player?", "What was the occupation of Belgian volleyball players?", "Which person function is the occupation of a Belgian volleyball player?", "Which person function is the occupation of Belgian volleyball players?", "Which person function was the occupation of a Belgian volleyball player?", "Which person function was the occupation of Belgian volleyball players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VolleyballPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "126",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian person?", "Give me the occupation of Belgian persons?", "Tell me the occupation of a Belgian person?", "Tell me the occupation of Belgian persons?", "What is the occupation of a Belgian person?", "What is the occupation of Belgian persons?", "What was the occupation of a Belgian person?", "What was the occupation of Belgian persons?", "Which person function is the occupation of a Belgian person?", "Which person function is the occupation of Belgian persons?", "Which person function was the occupation of a Belgian person?", "Which person function was the occupation of Belgian persons?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "127",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian Christian Bishop?", "Give me the occupation of Belgian Christian Bishops?", "Tell me the occupation of a Belgian Christian Bishop?", "Tell me the occupation of Belgian Christian Bishops?", "What is the occupation of a Belgian Christian Bishop?", "What is the occupation of Belgian Christian Bishops?", "What was the occupation of a Belgian Christian Bishop?", "What was the occupation of Belgian Christian Bishops?", "Which person function is the occupation of a Belgian Christian Bishop?", "Which person function is the occupation of Belgian Christian Bishops?", "Which person function was the occupation of a Belgian Christian Bishop?", "Which person function was the occupation of Belgian Christian Bishops?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ChristianBishop>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "128",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian comics creator?", "Give me the occupation of Belgian comics creators?", "Tell me the occupation of a Belgian comics creator?", "Tell me the occupation of Belgian comics creators?", "What is the occupation of a Belgian comics creator?", "What is the occupation of Belgian comics creators?", "What was the occupation of a Belgian comics creator?", "What was the occupation of Belgian comics creators?", "Which person function is the occupation of a Belgian comics creator?", "Which person function is the occupation of Belgian comics creators?", "Which person function was the occupation of a Belgian comics creator?", "Which person function was the occupation of Belgian comics creators?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCreator>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "129",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian writer?", "Give me the occupation of Belgian writers?", "Tell me the occupation of a Belgian writer?", "Tell me the occupation of Belgian writers?", "What is the occupation of a Belgian writer?", "What is the occupation of Belgian writers?", "What was the occupation of a Belgian writer?", "What was the occupation of Belgian writers?", "Which person function is the occupation of a Belgian writer?", "Which person function is the occupation of Belgian writers?", "Which person function was the occupation of a Belgian writer?", "Which person function was the occupation of Belgian writers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "130",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian motorsport racer?", "Give me the occupation of Belgian motorsport racers?", "Tell me the occupation of a Belgian motorsport racer?", "Tell me the occupation of Belgian motorsport racers?", "What is the occupation of a Belgian motorsport racer?", "What is the occupation of Belgian motorsport racers?", "What was the occupation of a Belgian motorsport racer?", "What was the occupation of Belgian motorsport racers?", "Which person function is the occupation of a Belgian motorsport racer?", "Which person function is the occupation of Belgian motorsport racers?", "Which person function was the occupation of a Belgian motorsport racer?", "Which person function was the occupation of Belgian motorsport racers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorsportRacer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "131",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of a Belgian musical artist?", "Give me the occupation of Belgian musical artists?", "Tell me the occupation of a Belgian musical artist?", "Tell me the occupation of Belgian musical artists?", "What is the occupation of a Belgian musical artist?", "What is the occupation of Belgian musical artists?", "What was the occupation of a Belgian musical artist?", "What was the occupation of Belgian musical artists?", "Which person function is the occupation of a Belgian musical artist?", "Which person function is the occupation of Belgian musical artists?", "Which person function was the occupation of a Belgian musical artist?", "Which person function was the occupation of Belgian musical artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "132",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "NPP",
    "sentences" : [ "Give me the occupation of persons born by $x?", "Tell me the occupation of persons born by $x?", "What is the occupation of persons born by $x?", "What was the occupation of persons born by $x?", "Which person function is the occupation of persons born by $x?", "Which person function was the occupation of persons born by $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/occupation> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfPropx)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "1936-11-30",
        "uri" : "1936-11-30"
      }, {
        "label" : "1940-04-25",
        "uri" : "1940-04-25"
      }, {
        "label" : "1946-02-21",
        "uri" : "1946-02-21"
      }, {
        "label" : "1863-12-08",
        "uri" : "1863-12-08"
      }, {
        "label" : "1936-05-09",
        "uri" : "1936-05-09"
      }, {
        "label" : "1785-03-07",
        "uri" : "1785-03-07"
      }, {
        "label" : "1819-08-25",
        "uri" : "1819-08-25"
      }, {
        "label" : "1974-03-24",
        "uri" : "1974-03-24"
      }, {
        "label" : "1958-04-21",
        "uri" : "1958-04-21"
      }, {
        "label" : "1948-03-22",
        "uri" : "1948-03-22"
      }, {
        "label" : "1928-10-31",
        "uri" : "1928-10-31"
      }, {
        "label" : "1926-03-06",
        "uri" : "1926-03-06"
      }, {
        "label" : "1940-11-22",
        "uri" : "1940-11-22"
      }, {
        "label" : "1895-12-16",
        "uri" : "1895-12-16"
      }, {
        "label" : "1944-01-26",
        "uri" : "1944-01-26"
      }, {
        "label" : "1919-10-18",
        "uri" : "1919-10-18"
      }, {
        "label" : "1907-09-23",
        "uri" : "1907-09-23"
      }, {
        "label" : "1890-04-06",
        "uri" : "1890-04-06"
      }, {
        "label" : "1915-04-21",
        "uri" : "1915-04-21"
      }, {
        "label" : "1960-08-10",
        "uri" : "1960-08-10"
      }, {
        "label" : "1867-05-27",
        "uri" : "1867-05-27"
      }, {
        "label" : "1968-04-19",
        "uri" : "1968-04-19"
      }, {
        "label" : "1921-03-11",
        "uri" : "1921-03-11"
      }, {
        "label" : "1931-03-16",
        "uri" : "1931-03-16"
      }, {
        "label" : "1922-12-24",
        "uri" : "1922-12-24"
      }, {
        "label" : "1583-06-16",
        "uri" : "1583-06-16"
      }, {
        "label" : "1907-07-16",
        "uri" : "1907-07-16"
      }, {
        "label" : "1928-06-19",
        "uri" : "1928-06-19"
      }, {
        "label" : "1849-10-06",
        "uri" : "1849-10-06"
      }, {
        "label" : "1909-05-30",
        "uri" : "1909-05-30"
      }, {
        "label" : "1940-03-16",
        "uri" : "1940-03-16"
      }, {
        "label" : "1843-06-09",
        "uri" : "1843-06-09"
      }, {
        "label" : "1894-04-15",
        "uri" : "1894-04-15"
      }, {
        "label" : "1919-02-24",
        "uri" : "1919-02-24"
      }, {
        "label" : "1915-04-07",
        "uri" : "1915-04-07"
      }, {
        "label" : "1906-06-22",
        "uri" : "1906-06-22"
      }, {
        "label" : "1903-03-10",
        "uri" : "1903-03-10"
      }, {
        "label" : "1922-07-26",
        "uri" : "1922-07-26"
      }, {
        "label" : "1943-04-10",
        "uri" : "1943-04-10"
      }, {
        "label" : "1856-04-05",
        "uri" : "1856-04-05"
      }, {
        "label" : "1963-12-18",
        "uri" : "1963-12-18"
      }, {
        "label" : "1940-11-27",
        "uri" : "1940-11-27"
      }, {
        "label" : "1895-10-04",
        "uri" : "1895-10-04"
      }, {
        "label" : "1972-08-30",
        "uri" : "1972-08-30"
      }, {
        "label" : "1909-02-09",
        "uri" : "1909-02-09"
      }, {
        "label" : "1908-10-06",
        "uri" : "1908-10-06"
      }, {
        "label" : "1943-10-22",
        "uri" : "1943-10-22"
      }, {
        "label" : "1902-09-20",
        "uri" : "1902-09-20"
      }, {
        "label" : "1977-04-14",
        "uri" : "1977-04-14"
      }, {
        "label" : "1923-10-04",
        "uri" : "1923-10-04"
      }, {
        "label" : "1969-03-04",
        "uri" : "1969-03-04"
      }, {
        "label" : "1943-07-12",
        "uri" : "1943-07-12"
      } ]
    },
    "combination" : true
  }, {
    "id" : "133",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of the spouse of $x?", "Tell me the birth place of the spouse of $x?", "What is the birth place of the spouse of $x?", "What was the birth place of the spouse of $x?", "Which place is the birth place of the spouse of $x?", "Which place was the birth place of the spouse of $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "Brad Pitt",
        "uri" : "http://dbpedia.org/resource/Brad_Pitt"
      }, {
        "label" : "Carole Lombard",
        "uri" : "http://dbpedia.org/resource/Carole_Lombard"
      }, {
        "label" : "Caroline of Brunswick",
        "uri" : "http://dbpedia.org/resource/Caroline_of_Brunswick"
      }, {
        "label" : "Catherine I of Russia",
        "uri" : "http://dbpedia.org/resource/Catherine_I_of_Russia"
      }, {
        "label" : "Christopher Lambert",
        "uri" : "http://dbpedia.org/resource/Christopher_Lambert"
      }, {
        "label" : "Clark Gable",
        "uri" : "http://dbpedia.org/resource/Clark_Gable"
      }, {
        "label" : "Cnut the Great",
        "uri" : "http://dbpedia.org/resource/Cnut_the_Great"
      }, {
        "label" : "Edmond Hamilton",
        "uri" : "http://dbpedia.org/resource/Edmond_Hamilton"
      }, {
        "label" : "Elizabeth Taylor",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Taylor"
      }, {
        "label" : "Emma of Normandy",
        "uri" : "http://dbpedia.org/resource/Emma_of_Normandy"
      }, {
        "label" : "George IV of the United Kingdom",
        "uri" : "http://dbpedia.org/resource/George_IV_of_the_United_Kingdom"
      }, {
        "label" : "Gwyneth Paltrow",
        "uri" : "http://dbpedia.org/resource/Gwyneth_Paltrow"
      }, {
        "label" : "Ingrid Bergman",
        "uri" : "http://dbpedia.org/resource/Ingrid_Bergman"
      }, {
        "label" : "Jennifer Aniston",
        "uri" : "http://dbpedia.org/resource/Jennifer_Aniston"
      }, {
        "label" : "Leigh Brackett",
        "uri" : "http://dbpedia.org/resource/Leigh_Brackett"
      }, {
        "label" : "Louis XVI of France",
        "uri" : "http://dbpedia.org/resource/Louis_XVI_of_France"
      }, {
        "label" : "Marie Antoinette",
        "uri" : "http://dbpedia.org/resource/Marie_Antoinette"
      }, {
        "label" : "Peter the Great",
        "uri" : "http://dbpedia.org/resource/Peter_the_Great"
      }, {
        "label" : "Richard Burton",
        "uri" : "http://dbpedia.org/resource/Richard_Burton"
      }, {
        "label" : "Roberto Rossellini",
        "uri" : "http://dbpedia.org/resource/Roberto_Rossellini"
      }, {
        "label" : "Salman Rushdie",
        "uri" : "http://dbpedia.org/resource/Salman_Rushdie"
      }, {
        "label" : "Sylvia Plath",
        "uri" : "http://dbpedia.org/resource/Sylvia_Plath"
      }, {
        "label" : "Ted Hughes",
        "uri" : "http://dbpedia.org/resource/Ted_Hughes"
      }, {
        "label" : "Theophanu",
        "uri" : "http://dbpedia.org/resource/Theophanu"
      }, {
        "label" : "Val Kilmer",
        "uri" : "http://dbpedia.org/resource/Val_Kilmer"
      }, {
        "label" : "Vivien Leigh",
        "uri" : "http://dbpedia.org/resource/Vivien_Leigh"
      }, {
        "label" : "Camille Flammarion",
        "uri" : "http://dbpedia.org/resource/Camille_Flammarion"
      }, {
        "label" : "Chris Martin",
        "uri" : "http://dbpedia.org/resource/Chris_Martin"
      }, {
        "label" : "Dennis Quaid",
        "uri" : "http://dbpedia.org/resource/Dennis_Quaid"
      }, {
        "label" : "Joanne Whalley",
        "uri" : "http://dbpedia.org/resource/Joanne_Whalley"
      }, {
        "label" : "John Grey of Groby",
        "uri" : "http://dbpedia.org/resource/John_Grey_of_Groby"
      }, {
        "label" : "Minnie Maddern Fiske",
        "uri" : "http://dbpedia.org/resource/Minnie_Maddern_Fiske"
      }, {
        "label" : "Padma Lakshmi",
        "uri" : "http://dbpedia.org/resource/Padma_Lakshmi"
      }, {
        "label" : "Adam Hochschild",
        "uri" : "http://dbpedia.org/resource/Adam_Hochschild"
      }, {
        "label" : "Arlie Russell Hochschild",
        "uri" : "http://dbpedia.org/resource/Arlie_Russell_Hochschild"
      }, {
        "label" : "Beata Tyszkiewicz",
        "uri" : "http://dbpedia.org/resource/Beata_Tyszkiewicz"
      }, {
        "label" : "Benjamin Bratt",
        "uri" : "http://dbpedia.org/resource/Benjamin_Bratt"
      }, {
        "label" : "Bunker Roy",
        "uri" : "http://dbpedia.org/resource/Bunker_Roy"
      }, {
        "label" : "Candy Spelling",
        "uri" : "http://dbpedia.org/resource/Candy_Spelling"
      }, {
        "label" : "Cyrille Bara",
        "uri" : "http://dbpedia.org/resource/Cyrille_Bara"
      }, {
        "label" : "Dorothy Dunnett",
        "uri" : "http://dbpedia.org/resource/Dorothy_Dunnett"
      }, {
        "label" : "Ehud Olmert",
        "uri" : "http://dbpedia.org/resource/Ehud_Olmert"
      }, {
        "label" : "Gemini Ganesan",
        "uri" : "http://dbpedia.org/resource/Gemini_Ganesan"
      }, {
        "label" : "Harriet Smithson",
        "uri" : "http://dbpedia.org/resource/Harriet_Smithson"
      }, {
        "label" : "Paul Hasluck",
        "uri" : "http://dbpedia.org/resource/Paul_Hasluck"
      }, {
        "label" : "Rolly Bester",
        "uri" : "http://dbpedia.org/resource/Rolly_Bester"
      }, {
        "label" : "Clara McMillen",
        "uri" : "http://dbpedia.org/resource/Clara_McMillen"
      }, {
        "label" : "Diana Gould (dancer)",
        "uri" : "http://dbpedia.org/resource/Diana_Gould_(dancer)"
      }, {
        "label" : "Sidney Miller (actor)",
        "uri" : "http://dbpedia.org/resource/Sidney_Miller_(actor)"
      }, {
        "label" : "Sir Edward Burgh",
        "uri" : "http://dbpedia.org/resource/Sir_Edward_Burgh"
      }, {
        "label" : "Lydia Lopokova",
        "uri" : "http://dbpedia.org/resource/Lydia_Lopokova"
      }, {
        "label" : "Maxwell Reed",
        "uri" : "http://dbpedia.org/resource/Maxwell_Reed"
      }, {
        "label" : "Sigrid the Haughty",
        "uri" : "http://dbpedia.org/resource/Sigrid_the_Haughty"
      }, {
        "label" : "Elena Ceaușescu",
        "uri" : "http://dbpedia.org/resource/Elena_Ceaușescu"
      }, {
        "label" : "Lydia Clarke",
        "uri" : "http://dbpedia.org/resource/Lydia_Clarke"
      }, {
        "label" : "Ruqaiya Sultan Begum",
        "uri" : "http://dbpedia.org/resource/Ruqaiya_Sultan_Begum"
      }, {
        "label" : "Eliza Jumel",
        "uri" : "http://dbpedia.org/resource/Eliza_Jumel"
      }, {
        "label" : "Lena Herzog",
        "uri" : "http://dbpedia.org/resource/Lena_Herzog"
      }, {
        "label" : "Katie Lee (chef)",
        "uri" : "http://dbpedia.org/resource/Katie_Lee_(chef)"
      }, {
        "label" : "Elsa Pataky",
        "uri" : "http://dbpedia.org/resource/Elsa_Pataky"
      }, {
        "label" : "Maïwenn",
        "uri" : "http://dbpedia.org/resource/Maïwenn"
      }, {
        "label" : "Edward of Westminster, Prince of Wales",
        "uri" : "http://dbpedia.org/resource/Edward_of_Westminster,_Prince_of_Wales"
      }, {
        "label" : "Joanne Woodward",
        "uri" : "http://dbpedia.org/resource/Joanne_Woodward"
      }, {
        "label" : "Lady Caroline Lamb",
        "uri" : "http://dbpedia.org/resource/Lady_Caroline_Lamb"
      }, {
        "label" : "Margaret Sullavan",
        "uri" : "http://dbpedia.org/resource/Margaret_Sullavan"
      }, {
        "label" : "Maria Fitzherbert",
        "uri" : "http://dbpedia.org/resource/Maria_Fitzherbert"
      }, {
        "label" : "Mickey Deans",
        "uri" : "http://dbpedia.org/resource/Mickey_Deans"
      }, {
        "label" : "Alice Hathaway Lee Roosevelt",
        "uri" : "http://dbpedia.org/resource/Alice_Hathaway_Lee_Roosevelt"
      }, {
        "label" : "Frank Bunker Gilbreth Sr.",
        "uri" : "http://dbpedia.org/resource/Frank_Bunker_Gilbreth_Sr."
      }, {
        "label" : "Alfred Steele",
        "uri" : "http://dbpedia.org/resource/Alfred_Steele"
      }, {
        "label" : "Barbara Hutton",
        "uri" : "http://dbpedia.org/resource/Barbara_Hutton"
      }, {
        "label" : "Sidney Luft",
        "uri" : "http://dbpedia.org/resource/Sidney_Luft"
      }, {
        "label" : "Sylvia Ashley",
        "uri" : "http://dbpedia.org/resource/Sylvia_Ashley"
      }, {
        "label" : "Salima Sultan Begum",
        "uri" : "http://dbpedia.org/resource/Salima_Sultan_Begum"
      }, {
        "label" : "David Evans Shaw",
        "uri" : "http://dbpedia.org/resource/David_Evans_Shaw"
      }, {
        "label" : "John Jay O'Connor",
        "uri" : "http://dbpedia.org/resource/John_Jay_O'Connor"
      }, {
        "label" : "Marta Fernandez Miranda de Batista",
        "uri" : "http://dbpedia.org/resource/Marta_Fernandez_Miranda_de_Batista"
      }, {
        "label" : "Josephine Dillon",
        "uri" : "http://dbpedia.org/resource/Josephine_Dillon"
      }, {
        "label" : "Sunita Deshpande",
        "uri" : "http://dbpedia.org/resource/Sunita_Deshpande"
      }, {
        "label" : "Bettina Gorton",
        "uri" : "http://dbpedia.org/resource/Bettina_Gorton"
      }, {
        "label" : "Tove of the Obotrites",
        "uri" : "http://dbpedia.org/resource/Tove_of_the_Obotrites"
      }, {
        "label" : "Albia Dominica",
        "uri" : "http://dbpedia.org/resource/Albia_Dominica"
      }, {
        "label" : "Antony Armstrong-Jones, 1st Earl of Snowdon",
        "uri" : "http://dbpedia.org/resource/Antony_Armstrong-Jones,_1st_Earl_of_Snowdon"
      }, {
        "label" : "Bernadette Chirac",
        "uri" : "http://dbpedia.org/resource/Bernadette_Chirac"
      }, {
        "label" : "Bianca Jagger",
        "uri" : "http://dbpedia.org/resource/Bianca_Jagger"
      }, {
        "label" : "Daniel Massey (actor)",
        "uri" : "http://dbpedia.org/resource/Daniel_Massey_(actor)"
      }, {
        "label" : "Francis I, Holy Roman Emperor",
        "uri" : "http://dbpedia.org/resource/Francis_I,_Holy_Roman_Emperor"
      }, {
        "label" : "Kitty Carlisle",
        "uri" : "http://dbpedia.org/resource/Kitty_Carlisle"
      }, {
        "label" : "Leonard Woolf",
        "uri" : "http://dbpedia.org/resource/Leonard_Woolf"
      }, {
        "label" : "Loki Schmidt",
        "uri" : "http://dbpedia.org/resource/Loki_Schmidt"
      }, {
        "label" : "Lotte Lenya",
        "uri" : "http://dbpedia.org/resource/Lotte_Lenya"
      }, {
        "label" : "Michael Wilding (actor)",
        "uri" : "http://dbpedia.org/resource/Michael_Wilding_(actor)"
      }, {
        "label" : "Mumtaz Mahal",
        "uri" : "http://dbpedia.org/resource/Mumtaz_Mahal"
      }, {
        "label" : "Princess Charlotte of Wales",
        "uri" : "http://dbpedia.org/resource/Princess_Charlotte_of_Wales"
      }, {
        "label" : "Richard Sennett",
        "uri" : "http://dbpedia.org/resource/Richard_Sennett"
      }, {
        "label" : "Robert Williams (actor)",
        "uri" : "http://dbpedia.org/resource/Robert_Williams_(actor)"
      }, {
        "label" : "Hank Azaria",
        "uri" : "http://dbpedia.org/resource/Hank_Azaria"
      }, {
        "label" : "Owen Tudor",
        "uri" : "http://dbpedia.org/resource/Owen_Tudor"
      }, {
        "label" : "John Neville, 3rd Baron Latimer",
        "uri" : "http://dbpedia.org/resource/John_Neville,_3rd_Baron_Latimer"
      }, {
        "label" : "Kirsty Sword Gusmão",
        "uri" : "http://dbpedia.org/resource/Kirsty_Sword_Gusmão"
      } ]
    },
    "combination" : true
  }, {
    "id" : "134",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian cleric?", "Give me the birth place of Belgian clerics?", "Tell me the birth place of a Belgian cleric?", "Tell me the birth place of Belgian clerics?", "What is the birth place of a Belgian cleric?", "What is the birth place of Belgian clerics?", "What was the birth place of a Belgian cleric?", "What was the birth place of Belgian clerics?", "Which place is the birth place of a Belgian cleric?", "Which place is the birth place of Belgian clerics?", "Which place was the birth place of a Belgian cleric?", "Which place was the birth place of Belgian clerics?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cleric>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "135",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian office holder?", "Give me the birth place of Belgian office holders?", "Tell me the birth place of a Belgian office holder?", "Tell me the birth place of Belgian office holders?", "What is the birth place of a Belgian office holder?", "What is the birth place of Belgian office holders?", "What was the birth place of a Belgian office holder?", "What was the birth place of Belgian office holders?", "Which place is the birth place of a Belgian office holder?", "Which place is the birth place of Belgian office holders?", "Which place was the birth place of a Belgian office holder?", "Which place was the birth place of Belgian office holders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "136",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian agent?", "Give me the birth place of Belgian agents?", "Tell me the birth place of a Belgian agent?", "Tell me the birth place of Belgian agents?", "What is the birth place of a Belgian agent?", "What is the birth place of Belgian agents?", "What was the birth place of a Belgian agent?", "What was the birth place of Belgian agents?", "Which place is the birth place of a Belgian agent?", "Which place is the birth place of Belgian agents?", "Which place was the birth place of a Belgian agent?", "Which place was the birth place of Belgian agents?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Agent>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "137",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian economist?", "Give me the birth place of Belgian economists?", "Tell me the birth place of a Belgian economist?", "Tell me the birth place of Belgian economists?", "What is the birth place of a Belgian economist?", "What is the birth place of Belgian economists?", "What was the birth place of a Belgian economist?", "What was the birth place of Belgian economists?", "Which place is the birth place of a Belgian economist?", "Which place is the birth place of Belgian economists?", "Which place was the birth place of a Belgian economist?", "Which place was the birth place of Belgian economists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Economist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "138",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian motorcycle rider?", "Give me the birth place of Belgian motorcycle riders?", "Tell me the birth place of a Belgian motorcycle rider?", "Tell me the birth place of Belgian motorcycle riders?", "What is the birth place of a Belgian motorcycle rider?", "What is the birth place of Belgian motorcycle riders?", "What was the birth place of a Belgian motorcycle rider?", "What was the birth place of Belgian motorcycle riders?", "Which place is the birth place of a Belgian motorcycle rider?", "Which place is the birth place of Belgian motorcycle riders?", "Which place was the birth place of a Belgian motorcycle rider?", "Which place was the birth place of Belgian motorcycle riders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorcycleRider>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "139",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian artist?", "Give me the birth place of Belgian artists?", "Tell me the birth place of a Belgian artist?", "Tell me the birth place of Belgian artists?", "What is the birth place of a Belgian artist?", "What is the birth place of Belgian artists?", "What was the birth place of a Belgian artist?", "What was the birth place of Belgian artists?", "Which place is the birth place of a Belgian artist?", "Which place is the birth place of Belgian artists?", "Which place was the birth place of a Belgian artist?", "Which place was the birth place of Belgian artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "140",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian athlete?", "Give me the birth place of Belgian athletes?", "Tell me the birth place of a Belgian athlete?", "Tell me the birth place of Belgian athletes?", "What is the birth place of a Belgian athlete?", "What is the birth place of Belgian athletes?", "What was the birth place of a Belgian athlete?", "What was the birth place of Belgian athletes?", "Which place is the birth place of a Belgian athlete?", "Which place is the birth place of Belgian athletes?", "Which place was the birth place of a Belgian athlete?", "Which place was the birth place of Belgian athletes?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "141",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian scientist?", "Give me the birth place of Belgian scientists?", "Tell me the birth place of a Belgian scientist?", "Tell me the birth place of Belgian scientists?", "What is the birth place of a Belgian scientist?", "What is the birth place of Belgian scientists?", "What was the birth place of a Belgian scientist?", "What was the birth place of Belgian scientists?", "Which place is the birth place of a Belgian scientist?", "Which place is the birth place of Belgian scientists?", "Which place was the birth place of a Belgian scientist?", "Which place was the birth place of Belgian scientists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "142",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian architect?", "Give me the birth place of Belgian architects?", "Tell me the birth place of a Belgian architect?", "Tell me the birth place of Belgian architects?", "What is the birth place of a Belgian architect?", "What is the birth place of Belgian architects?", "What was the birth place of a Belgian architect?", "What was the birth place of Belgian architects?", "Which place is the birth place of a Belgian architect?", "Which place is the birth place of Belgian architects?", "Which place was the birth place of a Belgian architect?", "Which place was the birth place of Belgian architects?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "143",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian golf player?", "Give me the birth place of Belgian golf players?", "Tell me the birth place of a Belgian golf player?", "Tell me the birth place of Belgian golf players?", "What is the birth place of a Belgian golf player?", "What is the birth place of Belgian golf players?", "What was the birth place of a Belgian golf player?", "What was the birth place of Belgian golf players?", "Which place is the birth place of a Belgian golf player?", "Which place is the birth place of Belgian golf players?", "Which place was the birth place of a Belgian golf player?", "Which place was the birth place of Belgian golf players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "144",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian racing driver?", "Give me the birth place of Belgian racing drivers?", "Tell me the birth place of a Belgian racing driver?", "Tell me the birth place of Belgian racing drivers?", "What is the birth place of a Belgian racing driver?", "What is the birth place of Belgian racing drivers?", "What was the birth place of a Belgian racing driver?", "What was the birth place of Belgian racing drivers?", "Which place is the birth place of a Belgian racing driver?", "Which place is the birth place of Belgian racing drivers?", "Which place was the birth place of a Belgian racing driver?", "Which place was the birth place of Belgian racing drivers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RacingDriver>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "145",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian politician?", "Give me the birth place of Belgian politicians?", "Tell me the birth place of a Belgian politician?", "Tell me the birth place of Belgian politicians?", "What is the birth place of a Belgian politician?", "What is the birth place of Belgian politicians?", "What was the birth place of a Belgian politician?", "What was the birth place of Belgian politicians?", "Which place is the birth place of a Belgian politician?", "Which place is the birth place of Belgian politicians?", "Which place was the birth place of a Belgian politician?", "Which place was the birth place of Belgian politicians?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "146",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian swimmer?", "Give me the birth place of Belgian swimmers?", "Tell me the birth place of a Belgian swimmer?", "Tell me the birth place of Belgian swimmers?", "What is the birth place of a Belgian swimmer?", "What is the birth place of Belgian swimmers?", "What was the birth place of a Belgian swimmer?", "What was the birth place of Belgian swimmers?", "Which place is the birth place of a Belgian swimmer?", "Which place is the birth place of Belgian swimmers?", "Which place was the birth place of a Belgian swimmer?", "Which place was the birth place of Belgian swimmers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Swimmer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "147",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian volleyball player?", "Give me the birth place of Belgian volleyball players?", "Tell me the birth place of a Belgian volleyball player?", "Tell me the birth place of Belgian volleyball players?", "What is the birth place of a Belgian volleyball player?", "What is the birth place of Belgian volleyball players?", "What was the birth place of a Belgian volleyball player?", "What was the birth place of Belgian volleyball players?", "Which place is the birth place of a Belgian volleyball player?", "Which place is the birth place of Belgian volleyball players?", "Which place was the birth place of a Belgian volleyball player?", "Which place was the birth place of Belgian volleyball players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VolleyballPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "148",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian person?", "Give me the birth place of Belgian persons?", "Tell me the birth place of a Belgian person?", "Tell me the birth place of Belgian persons?", "What is the birth place of a Belgian person?", "What is the birth place of Belgian persons?", "What was the birth place of a Belgian person?", "What was the birth place of Belgian persons?", "Which place is the birth place of a Belgian person?", "Which place is the birth place of Belgian persons?", "Which place was the birth place of a Belgian person?", "Which place was the birth place of Belgian persons?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "149",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian Christian Bishop?", "Give me the birth place of Belgian Christian Bishops?", "Tell me the birth place of a Belgian Christian Bishop?", "Tell me the birth place of Belgian Christian Bishops?", "What is the birth place of a Belgian Christian Bishop?", "What is the birth place of Belgian Christian Bishops?", "What was the birth place of a Belgian Christian Bishop?", "What was the birth place of Belgian Christian Bishops?", "Which place is the birth place of a Belgian Christian Bishop?", "Which place is the birth place of Belgian Christian Bishops?", "Which place was the birth place of a Belgian Christian Bishop?", "Which place was the birth place of Belgian Christian Bishops?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ChristianBishop>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "150",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian comics creator?", "Give me the birth place of Belgian comics creators?", "Tell me the birth place of a Belgian comics creator?", "Tell me the birth place of Belgian comics creators?", "What is the birth place of a Belgian comics creator?", "What is the birth place of Belgian comics creators?", "What was the birth place of a Belgian comics creator?", "What was the birth place of Belgian comics creators?", "Which place is the birth place of a Belgian comics creator?", "Which place is the birth place of Belgian comics creators?", "Which place was the birth place of a Belgian comics creator?", "Which place was the birth place of Belgian comics creators?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCreator>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "151",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian writer?", "Give me the birth place of Belgian writers?", "Tell me the birth place of a Belgian writer?", "Tell me the birth place of Belgian writers?", "What is the birth place of a Belgian writer?", "What is the birth place of Belgian writers?", "What was the birth place of a Belgian writer?", "What was the birth place of Belgian writers?", "Which place is the birth place of a Belgian writer?", "Which place is the birth place of Belgian writers?", "Which place was the birth place of a Belgian writer?", "Which place was the birth place of Belgian writers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "152",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian motorsport racer?", "Give me the birth place of Belgian motorsport racers?", "Tell me the birth place of a Belgian motorsport racer?", "Tell me the birth place of Belgian motorsport racers?", "What is the birth place of a Belgian motorsport racer?", "What is the birth place of Belgian motorsport racers?", "What was the birth place of a Belgian motorsport racer?", "What was the birth place of Belgian motorsport racers?", "Which place is the birth place of a Belgian motorsport racer?", "Which place is the birth place of Belgian motorsport racers?", "Which place was the birth place of a Belgian motorsport racer?", "Which place was the birth place of Belgian motorsport racers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorsportRacer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "153",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of a Belgian musical artist?", "Give me the birth place of Belgian musical artists?", "Tell me the birth place of a Belgian musical artist?", "Tell me the birth place of Belgian musical artists?", "What is the birth place of a Belgian musical artist?", "What is the birth place of Belgian musical artists?", "What was the birth place of a Belgian musical artist?", "What was the birth place of Belgian musical artists?", "Which place is the birth place of a Belgian musical artist?", "Which place is the birth place of Belgian musical artists?", "Which place was the birth place of a Belgian musical artist?", "Which place was the birth place of Belgian musical artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "154",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "LOCATION",
    "frameType" : "NPP",
    "sentences" : [ "Give me the birth place of persons born by $x?", "Tell me the birth place of persons born by $x?", "What is the birth place of persons born by $x?", "What was the birth place of persons born by $x?", "Which place is the birth place of persons born by $x?", "Which place was the birth place of persons born by $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthPlace> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfPropx)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "1976-11-12",
        "uri" : "1976-11-12"
      }, {
        "label" : "1943-12-29",
        "uri" : "1943-12-29"
      }, {
        "label" : "1896-09-01",
        "uri" : "1896-09-01"
      }, {
        "label" : "1756-02-06",
        "uri" : "1756-02-06"
      }, {
        "label" : "1900-11-14",
        "uri" : "1900-11-14"
      }, {
        "label" : "1936-11-30",
        "uri" : "1936-11-30"
      }, {
        "label" : "1918-10-06",
        "uri" : "1918-10-06"
      }, {
        "label" : "1667-05-26",
        "uri" : "1667-05-26"
      }, {
        "label" : "1779-11-14",
        "uri" : "1779-11-14"
      }, {
        "label" : "1937-01-01",
        "uri" : "1937-01-01"
      }, {
        "label" : "1952-07-06",
        "uri" : "1952-07-06"
      }, {
        "label" : "1900-02-05",
        "uri" : "1900-02-05"
      }, {
        "label" : "1870-12-10",
        "uri" : "1870-12-10"
      }, {
        "label" : "1752-09-18",
        "uri" : "1752-09-18"
      }, {
        "label" : "1929-05-16",
        "uri" : "1929-05-16"
      }, {
        "label" : "1955-02-13",
        "uri" : "1955-02-13"
      }, {
        "label" : "1940-04-25",
        "uri" : "1940-04-25"
      }, {
        "label" : "1946-02-21",
        "uri" : "1946-02-21"
      }, {
        "label" : "1970-08-13",
        "uri" : "1970-08-13"
      }, {
        "label" : "1863-12-08",
        "uri" : "1863-12-08"
      }, {
        "label" : "1936-05-09",
        "uri" : "1936-05-09"
      }, {
        "label" : "1414-11-09",
        "uri" : "1414-11-09"
      }, {
        "label" : "1931-05-03",
        "uri" : "1931-05-03"
      }, {
        "label" : "1950-01-09",
        "uri" : "1950-01-09"
      }, {
        "label" : "1785-03-07",
        "uri" : "1785-03-07"
      }, {
        "label" : "1954-12-15",
        "uri" : "1954-12-15"
      }, {
        "label" : "1941-12-31",
        "uri" : "1941-12-31"
      }, {
        "label" : "1806-07-19",
        "uri" : "1806-07-19"
      }, {
        "label" : "1925-06-17",
        "uri" : "1925-06-17"
      }, {
        "label" : "1820-03-20",
        "uri" : "1820-03-20"
      }, {
        "label" : "1913-12-18",
        "uri" : "1913-12-18"
      }, {
        "label" : "1894-06-23",
        "uri" : "1894-06-23"
      }, {
        "label" : "1842-07-26",
        "uri" : "1842-07-26"
      }, {
        "label" : "1891-10-05",
        "uri" : "1891-10-05"
      }, {
        "label" : "1861-02-15",
        "uri" : "1861-02-15"
      }, {
        "label" : "1893-01-12",
        "uri" : "1893-01-12"
      }, {
        "label" : "1923-01-12",
        "uri" : "1923-01-12"
      }, {
        "label" : "1944-02-09",
        "uri" : "1944-02-09"
      }, {
        "label" : "1819-08-25",
        "uri" : "1819-08-25"
      }, {
        "label" : "1813-11-13",
        "uri" : "1813-11-13"
      }, {
        "label" : "1903-06-14",
        "uri" : "1903-06-14"
      }, {
        "label" : "1974-03-24",
        "uri" : "1974-03-24"
      }, {
        "label" : "1933-11-03",
        "uri" : "1933-11-03"
      } ]
    },
    "combination" : true
  }, {
    "id" : "155",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of the spouse of $x?", "Tell me the spouse of the spouse of $x?", "What is the spouse of the spouse of $x?", "What was the spouse of the spouse of $x?", "Which person is the spouse of the spouse of $x?", "Which person was the spouse of the spouse of $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "Andrzej Wajda",
        "uri" : "http://dbpedia.org/resource/Andrzej_Wajda"
      }, {
        "label" : "Brad Pitt",
        "uri" : "http://dbpedia.org/resource/Brad_Pitt"
      }, {
        "label" : "Carole Lombard",
        "uri" : "http://dbpedia.org/resource/Carole_Lombard"
      }, {
        "label" : "Caroline of Brunswick",
        "uri" : "http://dbpedia.org/resource/Caroline_of_Brunswick"
      }, {
        "label" : "Catherine I of Russia",
        "uri" : "http://dbpedia.org/resource/Catherine_I_of_Russia"
      }, {
        "label" : "Clark Gable",
        "uri" : "http://dbpedia.org/resource/Clark_Gable"
      }, {
        "label" : "Cnut the Great",
        "uri" : "http://dbpedia.org/resource/Cnut_the_Great"
      }, {
        "label" : "Edmond Hamilton",
        "uri" : "http://dbpedia.org/resource/Edmond_Hamilton"
      }, {
        "label" : "Elizabeth Taylor",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Taylor"
      }, {
        "label" : "Elizabeth Woodville",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Woodville"
      }, {
        "label" : "Emma of Normandy",
        "uri" : "http://dbpedia.org/resource/Emma_of_Normandy"
      }, {
        "label" : "George IV of the United Kingdom",
        "uri" : "http://dbpedia.org/resource/George_IV_of_the_United_Kingdom"
      }, {
        "label" : "Gwyneth Paltrow",
        "uri" : "http://dbpedia.org/resource/Gwyneth_Paltrow"
      }, {
        "label" : "Ingrid Bergman",
        "uri" : "http://dbpedia.org/resource/Ingrid_Bergman"
      }, {
        "label" : "Jennifer Aniston",
        "uri" : "http://dbpedia.org/resource/Jennifer_Aniston"
      }, {
        "label" : "Leigh Brackett",
        "uri" : "http://dbpedia.org/resource/Leigh_Brackett"
      }, {
        "label" : "Louis XVI of France",
        "uri" : "http://dbpedia.org/resource/Louis_XVI_of_France"
      }, {
        "label" : "Marie Antoinette",
        "uri" : "http://dbpedia.org/resource/Marie_Antoinette"
      }, {
        "label" : "Peter the Great",
        "uri" : "http://dbpedia.org/resource/Peter_the_Great"
      }, {
        "label" : "Richard Burton",
        "uri" : "http://dbpedia.org/resource/Richard_Burton"
      }, {
        "label" : "Roberto Rossellini",
        "uri" : "http://dbpedia.org/resource/Roberto_Rossellini"
      }, {
        "label" : "Salman Rushdie",
        "uri" : "http://dbpedia.org/resource/Salman_Rushdie"
      }, {
        "label" : "Sylvia Plath",
        "uri" : "http://dbpedia.org/resource/Sylvia_Plath"
      }, {
        "label" : "Ted Hughes",
        "uri" : "http://dbpedia.org/resource/Ted_Hughes"
      }, {
        "label" : "Val Kilmer",
        "uri" : "http://dbpedia.org/resource/Val_Kilmer"
      }, {
        "label" : "Chris Martin",
        "uri" : "http://dbpedia.org/resource/Chris_Martin"
      }, {
        "label" : "Céline Bara",
        "uri" : "http://dbpedia.org/resource/Céline_Bara"
      }, {
        "label" : "Joanne Whalley",
        "uri" : "http://dbpedia.org/resource/Joanne_Whalley"
      }, {
        "label" : "John Grey of Groby",
        "uri" : "http://dbpedia.org/resource/John_Grey_of_Groby"
      }, {
        "label" : "Minnie Maddern Fiske",
        "uri" : "http://dbpedia.org/resource/Minnie_Maddern_Fiske"
      }, {
        "label" : "Padma Lakshmi",
        "uri" : "http://dbpedia.org/resource/Padma_Lakshmi"
      }, {
        "label" : "Savitri (actress)",
        "uri" : "http://dbpedia.org/resource/Savitri_(actress)"
      }, {
        "label" : "Talisa Soto",
        "uri" : "http://dbpedia.org/resource/Talisa_Soto"
      }, {
        "label" : "Aaron Spelling",
        "uri" : "http://dbpedia.org/resource/Aaron_Spelling"
      }, {
        "label" : "Adam Hochschild",
        "uri" : "http://dbpedia.org/resource/Adam_Hochschild"
      }, {
        "label" : "Alastair Dunnett",
        "uri" : "http://dbpedia.org/resource/Alastair_Dunnett"
      }, {
        "label" : "Arlie Russell Hochschild",
        "uri" : "http://dbpedia.org/resource/Arlie_Russell_Hochschild"
      }, {
        "label" : "Barbara Simons",
        "uri" : "http://dbpedia.org/resource/Barbara_Simons"
      }, {
        "label" : "Beata Tyszkiewicz",
        "uri" : "http://dbpedia.org/resource/Beata_Tyszkiewicz"
      }, {
        "label" : "Benjamin Bratt",
        "uri" : "http://dbpedia.org/resource/Benjamin_Bratt"
      }, {
        "label" : "Bermudo II of León",
        "uri" : "http://dbpedia.org/resource/Bermudo_II_of_León"
      }, {
        "label" : "Candy Spelling",
        "uri" : "http://dbpedia.org/resource/Candy_Spelling"
      }, {
        "label" : "Cyrille Bara",
        "uri" : "http://dbpedia.org/resource/Cyrille_Bara"
      }, {
        "label" : "Dorothy Dunnett",
        "uri" : "http://dbpedia.org/resource/Dorothy_Dunnett"
      }, {
        "label" : "Eleanor Silliman Belknap Humphrey",
        "uri" : "http://dbpedia.org/resource/Eleanor_Silliman_Belknap_Humphrey"
      }, {
        "label" : "Elvira of Castile, Queen of León",
        "uri" : "http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_León"
      }, {
        "label" : "Gemini Ganesan",
        "uri" : "http://dbpedia.org/resource/Gemini_Ganesan"
      }, {
        "label" : "James Harris Simons",
        "uri" : "http://dbpedia.org/resource/James_Harris_Simons"
      }, {
        "label" : "Lewis Craig Humphrey",
        "uri" : "http://dbpedia.org/resource/Lewis_Craig_Humphrey"
      }, {
        "label" : "Rolly Bester",
        "uri" : "http://dbpedia.org/resource/Rolly_Bester"
      }, {
        "label" : "Ruy Guerra",
        "uri" : "http://dbpedia.org/resource/Ruy_Guerra"
      }, {
        "label" : "Deborah Walley",
        "uri" : "http://dbpedia.org/resource/Deborah_Walley"
      }, {
        "label" : "Henry Morgenthau Jr.",
        "uri" : "http://dbpedia.org/resource/Henry_Morgenthau_Jr."
      }, {
        "label" : "Maxwell Reed",
        "uri" : "http://dbpedia.org/resource/Maxwell_Reed"
      }, {
        "label" : "Sigrid the Haughty",
        "uri" : "http://dbpedia.org/resource/Sigrid_the_Haughty"
      }, {
        "label" : "Elena Ceaușescu",
        "uri" : "http://dbpedia.org/resource/Elena_Ceaușescu"
      }, {
        "label" : "Lydia Clarke",
        "uri" : "http://dbpedia.org/resource/Lydia_Clarke"
      }, {
        "label" : "Eliza Jumel",
        "uri" : "http://dbpedia.org/resource/Eliza_Jumel"
      }, {
        "label" : "Raja Zarith Sofia",
        "uri" : "http://dbpedia.org/resource/Raja_Zarith_Sofia"
      }, {
        "label" : "Lena Herzog",
        "uri" : "http://dbpedia.org/resource/Lena_Herzog"
      }, {
        "label" : "Margaret of Soissons, Queen of Armenia",
        "uri" : "http://dbpedia.org/resource/Margaret_of_Soissons,_Queen_of_Armenia"
      }, {
        "label" : "Constance Towers",
        "uri" : "http://dbpedia.org/resource/Constance_Towers"
      }, {
        "label" : "Elsa Pataky",
        "uri" : "http://dbpedia.org/resource/Elsa_Pataky"
      }, {
        "label" : "Maïwenn",
        "uri" : "http://dbpedia.org/resource/Maïwenn"
      }, {
        "label" : "Christian I of Denmark",
        "uri" : "http://dbpedia.org/resource/Christian_I_of_Denmark"
      }, {
        "label" : "Edward of Westminster, Prince of Wales",
        "uri" : "http://dbpedia.org/resource/Edward_of_Westminster,_Prince_of_Wales"
      }, {
        "label" : "Elizabeth Fry",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Fry"
      }, {
        "label" : "Joanne Woodward",
        "uri" : "http://dbpedia.org/resource/Joanne_Woodward"
      }, {
        "label" : "Lady Caroline Lamb",
        "uri" : "http://dbpedia.org/resource/Lady_Caroline_Lamb"
      }, {
        "label" : "Margaret Sullavan",
        "uri" : "http://dbpedia.org/resource/Margaret_Sullavan"
      }, {
        "label" : "Maria Fitzherbert",
        "uri" : "http://dbpedia.org/resource/Maria_Fitzherbert"
      }, {
        "label" : "Mickey Deans",
        "uri" : "http://dbpedia.org/resource/Mickey_Deans"
      }, {
        "label" : "Gustaf Gründgens",
        "uri" : "http://dbpedia.org/resource/Gustaf_Gründgens"
      }, {
        "label" : "Alice Hathaway Lee Roosevelt",
        "uri" : "http://dbpedia.org/resource/Alice_Hathaway_Lee_Roosevelt"
      }, {
        "label" : "Frank Bunker Gilbreth Sr.",
        "uri" : "http://dbpedia.org/resource/Frank_Bunker_Gilbreth_Sr."
      }, {
        "label" : "Alfred Steele",
        "uri" : "http://dbpedia.org/resource/Alfred_Steele"
      }, {
        "label" : "Ralph Forbes",
        "uri" : "http://dbpedia.org/resource/Ralph_Forbes"
      }, {
        "label" : "Sidney Luft",
        "uri" : "http://dbpedia.org/resource/Sidney_Luft"
      }, {
        "label" : "Sylvia Ashley",
        "uri" : "http://dbpedia.org/resource/Sylvia_Ashley"
      }, {
        "label" : "David Evans Shaw",
        "uri" : "http://dbpedia.org/resource/David_Evans_Shaw"
      }, {
        "label" : "John Jay O'Connor",
        "uri" : "http://dbpedia.org/resource/John_Jay_O'Connor"
      }, {
        "label" : "Marta Fernandez Miranda de Batista",
        "uri" : "http://dbpedia.org/resource/Marta_Fernandez_Miranda_de_Batista"
      }, {
        "label" : "Josephine Dillon",
        "uri" : "http://dbpedia.org/resource/Josephine_Dillon"
      }, {
        "label" : "Lucy Barker",
        "uri" : "http://dbpedia.org/resource/Lucy_Barker"
      }, {
        "label" : "Sunita Deshpande",
        "uri" : "http://dbpedia.org/resource/Sunita_Deshpande"
      }, {
        "label" : "Bettina Gorton",
        "uri" : "http://dbpedia.org/resource/Bettina_Gorton"
      }, {
        "label" : "Luma de Oliveira",
        "uri" : "http://dbpedia.org/resource/Luma_de_Oliveira"
      }, {
        "label" : "Tove of the Obotrites",
        "uri" : "http://dbpedia.org/resource/Tove_of_the_Obotrites"
      }, {
        "label" : "Alice of Korikos",
        "uri" : "http://dbpedia.org/resource/Alice_of_Korikos"
      }, {
        "label" : "Albia Dominica",
        "uri" : "http://dbpedia.org/resource/Albia_Dominica"
      }, {
        "label" : "Amelia Warner",
        "uri" : "http://dbpedia.org/resource/Amelia_Warner"
      }, {
        "label" : "Antony Armstrong-Jones, 1st Earl of Snowdon",
        "uri" : "http://dbpedia.org/resource/Antony_Armstrong-Jones,_1st_Earl_of_Snowdon"
      }, {
        "label" : "Bernadette Chirac",
        "uri" : "http://dbpedia.org/resource/Bernadette_Chirac"
      }, {
        "label" : "Bianca Jagger",
        "uri" : "http://dbpedia.org/resource/Bianca_Jagger"
      }, {
        "label" : "Daniel Massey (actor)",
        "uri" : "http://dbpedia.org/resource/Daniel_Massey_(actor)"
      }, {
        "label" : "Ferdinand III, Holy Roman Emperor",
        "uri" : "http://dbpedia.org/resource/Ferdinand_III,_Holy_Roman_Emperor"
      }, {
        "label" : "Francis I, Holy Roman Emperor",
        "uri" : "http://dbpedia.org/resource/Francis_I,_Holy_Roman_Emperor"
      }, {
        "label" : "Jack Ryan (politician)",
        "uri" : "http://dbpedia.org/resource/Jack_Ryan_(politician)"
      }, {
        "label" : "Jacqueline, Countess of Hainaut",
        "uri" : "http://dbpedia.org/resource/Jacqueline,_Countess_of_Hainaut"
      }, {
        "label" : "Leonard Woolf",
        "uri" : "http://dbpedia.org/resource/Leonard_Woolf"
      } ]
    },
    "combination" : true
  }, {
    "id" : "156",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian cleric?", "Give me the spouse of Belgian clerics?", "Tell me the spouse of a Belgian cleric?", "Tell me the spouse of Belgian clerics?", "What is the spouse of a Belgian cleric?", "What is the spouse of Belgian clerics?", "What was the spouse of a Belgian cleric?", "What was the spouse of Belgian clerics?", "Which person is the spouse of a Belgian cleric?", "Which person is the spouse of Belgian clerics?", "Which person was the spouse of a Belgian cleric?", "Which person was the spouse of Belgian clerics?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cleric>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "157",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian office holder?", "Give me the spouse of Belgian office holders?", "Tell me the spouse of a Belgian office holder?", "Tell me the spouse of Belgian office holders?", "What is the spouse of a Belgian office holder?", "What is the spouse of Belgian office holders?", "What was the spouse of a Belgian office holder?", "What was the spouse of Belgian office holders?", "Which person is the spouse of a Belgian office holder?", "Which person is the spouse of Belgian office holders?", "Which person was the spouse of a Belgian office holder?", "Which person was the spouse of Belgian office holders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "158",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian agent?", "Give me the spouse of Belgian agents?", "Tell me the spouse of a Belgian agent?", "Tell me the spouse of Belgian agents?", "What is the spouse of a Belgian agent?", "What is the spouse of Belgian agents?", "What was the spouse of a Belgian agent?", "What was the spouse of Belgian agents?", "Which person is the spouse of a Belgian agent?", "Which person is the spouse of Belgian agents?", "Which person was the spouse of a Belgian agent?", "Which person was the spouse of Belgian agents?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Agent>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "159",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian economist?", "Give me the spouse of Belgian economists?", "Tell me the spouse of a Belgian economist?", "Tell me the spouse of Belgian economists?", "What is the spouse of a Belgian economist?", "What is the spouse of Belgian economists?", "What was the spouse of a Belgian economist?", "What was the spouse of Belgian economists?", "Which person is the spouse of a Belgian economist?", "Which person is the spouse of Belgian economists?", "Which person was the spouse of a Belgian economist?", "Which person was the spouse of Belgian economists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Economist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "160",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian motorcycle rider?", "Give me the spouse of Belgian motorcycle riders?", "Tell me the spouse of a Belgian motorcycle rider?", "Tell me the spouse of Belgian motorcycle riders?", "What is the spouse of a Belgian motorcycle rider?", "What is the spouse of Belgian motorcycle riders?", "What was the spouse of a Belgian motorcycle rider?", "What was the spouse of Belgian motorcycle riders?", "Which person is the spouse of a Belgian motorcycle rider?", "Which person is the spouse of Belgian motorcycle riders?", "Which person was the spouse of a Belgian motorcycle rider?", "Which person was the spouse of Belgian motorcycle riders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorcycleRider>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "161",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian artist?", "Give me the spouse of Belgian artists?", "Tell me the spouse of a Belgian artist?", "Tell me the spouse of Belgian artists?", "What is the spouse of a Belgian artist?", "What is the spouse of Belgian artists?", "What was the spouse of a Belgian artist?", "What was the spouse of Belgian artists?", "Which person is the spouse of a Belgian artist?", "Which person is the spouse of Belgian artists?", "Which person was the spouse of a Belgian artist?", "Which person was the spouse of Belgian artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "162",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian athlete?", "Give me the spouse of Belgian athletes?", "Tell me the spouse of a Belgian athlete?", "Tell me the spouse of Belgian athletes?", "What is the spouse of a Belgian athlete?", "What is the spouse of Belgian athletes?", "What was the spouse of a Belgian athlete?", "What was the spouse of Belgian athletes?", "Which person is the spouse of a Belgian athlete?", "Which person is the spouse of Belgian athletes?", "Which person was the spouse of a Belgian athlete?", "Which person was the spouse of Belgian athletes?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "163",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian scientist?", "Give me the spouse of Belgian scientists?", "Tell me the spouse of a Belgian scientist?", "Tell me the spouse of Belgian scientists?", "What is the spouse of a Belgian scientist?", "What is the spouse of Belgian scientists?", "What was the spouse of a Belgian scientist?", "What was the spouse of Belgian scientists?", "Which person is the spouse of a Belgian scientist?", "Which person is the spouse of Belgian scientists?", "Which person was the spouse of a Belgian scientist?", "Which person was the spouse of Belgian scientists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "164",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian architect?", "Give me the spouse of Belgian architects?", "Tell me the spouse of a Belgian architect?", "Tell me the spouse of Belgian architects?", "What is the spouse of a Belgian architect?", "What is the spouse of Belgian architects?", "What was the spouse of a Belgian architect?", "What was the spouse of Belgian architects?", "Which person is the spouse of a Belgian architect?", "Which person is the spouse of Belgian architects?", "Which person was the spouse of a Belgian architect?", "Which person was the spouse of Belgian architects?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "165",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian golf player?", "Give me the spouse of Belgian golf players?", "Tell me the spouse of a Belgian golf player?", "Tell me the spouse of Belgian golf players?", "What is the spouse of a Belgian golf player?", "What is the spouse of Belgian golf players?", "What was the spouse of a Belgian golf player?", "What was the spouse of Belgian golf players?", "Which person is the spouse of a Belgian golf player?", "Which person is the spouse of Belgian golf players?", "Which person was the spouse of a Belgian golf player?", "Which person was the spouse of Belgian golf players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "166",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian racing driver?", "Give me the spouse of Belgian racing drivers?", "Tell me the spouse of a Belgian racing driver?", "Tell me the spouse of Belgian racing drivers?", "What is the spouse of a Belgian racing driver?", "What is the spouse of Belgian racing drivers?", "What was the spouse of a Belgian racing driver?", "What was the spouse of Belgian racing drivers?", "Which person is the spouse of a Belgian racing driver?", "Which person is the spouse of Belgian racing drivers?", "Which person was the spouse of a Belgian racing driver?", "Which person was the spouse of Belgian racing drivers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RacingDriver>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "167",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian politician?", "Give me the spouse of Belgian politicians?", "Tell me the spouse of a Belgian politician?", "Tell me the spouse of Belgian politicians?", "What is the spouse of a Belgian politician?", "What is the spouse of Belgian politicians?", "What was the spouse of a Belgian politician?", "What was the spouse of Belgian politicians?", "Which person is the spouse of a Belgian politician?", "Which person is the spouse of Belgian politicians?", "Which person was the spouse of a Belgian politician?", "Which person was the spouse of Belgian politicians?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "168",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian swimmer?", "Give me the spouse of Belgian swimmers?", "Tell me the spouse of a Belgian swimmer?", "Tell me the spouse of Belgian swimmers?", "What is the spouse of a Belgian swimmer?", "What is the spouse of Belgian swimmers?", "What was the spouse of a Belgian swimmer?", "What was the spouse of Belgian swimmers?", "Which person is the spouse of a Belgian swimmer?", "Which person is the spouse of Belgian swimmers?", "Which person was the spouse of a Belgian swimmer?", "Which person was the spouse of Belgian swimmers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Swimmer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "169",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian volleyball player?", "Give me the spouse of Belgian volleyball players?", "Tell me the spouse of a Belgian volleyball player?", "Tell me the spouse of Belgian volleyball players?", "What is the spouse of a Belgian volleyball player?", "What is the spouse of Belgian volleyball players?", "What was the spouse of a Belgian volleyball player?", "What was the spouse of Belgian volleyball players?", "Which person is the spouse of a Belgian volleyball player?", "Which person is the spouse of Belgian volleyball players?", "Which person was the spouse of a Belgian volleyball player?", "Which person was the spouse of Belgian volleyball players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VolleyballPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "170",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian person?", "Give me the spouse of Belgian persons?", "Tell me the spouse of a Belgian person?", "Tell me the spouse of Belgian persons?", "What is the spouse of a Belgian person?", "What is the spouse of Belgian persons?", "What was the spouse of a Belgian person?", "What was the spouse of Belgian persons?", "Which person is the spouse of a Belgian person?", "Which person is the spouse of Belgian persons?", "Which person was the spouse of a Belgian person?", "Which person was the spouse of Belgian persons?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "171",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian Christian Bishop?", "Give me the spouse of Belgian Christian Bishops?", "Tell me the spouse of a Belgian Christian Bishop?", "Tell me the spouse of Belgian Christian Bishops?", "What is the spouse of a Belgian Christian Bishop?", "What is the spouse of Belgian Christian Bishops?", "What was the spouse of a Belgian Christian Bishop?", "What was the spouse of Belgian Christian Bishops?", "Which person is the spouse of a Belgian Christian Bishop?", "Which person is the spouse of Belgian Christian Bishops?", "Which person was the spouse of a Belgian Christian Bishop?", "Which person was the spouse of Belgian Christian Bishops?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ChristianBishop>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "172",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian comics creator?", "Give me the spouse of Belgian comics creators?", "Tell me the spouse of a Belgian comics creator?", "Tell me the spouse of Belgian comics creators?", "What is the spouse of a Belgian comics creator?", "What is the spouse of Belgian comics creators?", "What was the spouse of a Belgian comics creator?", "What was the spouse of Belgian comics creators?", "Which person is the spouse of a Belgian comics creator?", "Which person is the spouse of Belgian comics creators?", "Which person was the spouse of a Belgian comics creator?", "Which person was the spouse of Belgian comics creators?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCreator>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "173",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian writer?", "Give me the spouse of Belgian writers?", "Tell me the spouse of a Belgian writer?", "Tell me the spouse of Belgian writers?", "What is the spouse of a Belgian writer?", "What is the spouse of Belgian writers?", "What was the spouse of a Belgian writer?", "What was the spouse of Belgian writers?", "Which person is the spouse of a Belgian writer?", "Which person is the spouse of Belgian writers?", "Which person was the spouse of a Belgian writer?", "Which person was the spouse of Belgian writers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "174",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian motorsport racer?", "Give me the spouse of Belgian motorsport racers?", "Tell me the spouse of a Belgian motorsport racer?", "Tell me the spouse of Belgian motorsport racers?", "What is the spouse of a Belgian motorsport racer?", "What is the spouse of Belgian motorsport racers?", "What was the spouse of a Belgian motorsport racer?", "What was the spouse of Belgian motorsport racers?", "Which person is the spouse of a Belgian motorsport racer?", "Which person is the spouse of Belgian motorsport racers?", "Which person was the spouse of a Belgian motorsport racer?", "Which person was the spouse of Belgian motorsport racers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorsportRacer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "175",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of a Belgian musical artist?", "Give me the spouse of Belgian musical artists?", "Tell me the spouse of a Belgian musical artist?", "Tell me the spouse of Belgian musical artists?", "What is the spouse of a Belgian musical artist?", "What is the spouse of Belgian musical artists?", "What was the spouse of a Belgian musical artist?", "What was the spouse of Belgian musical artists?", "Which person is the spouse of a Belgian musical artist?", "Which person is the spouse of Belgian musical artists?", "Which person was the spouse of a Belgian musical artist?", "Which person was the spouse of Belgian musical artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "176",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "NPP",
    "sentences" : [ "Give me the spouse of persons born by $x?", "Tell me the spouse of persons born by $x?", "What is the spouse of persons born by $x?", "What was the spouse of persons born by $x?", "Which person is the spouse of persons born by $x?", "Which person was the spouse of persons born by $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/spouse> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfPropx)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "1756-02-06",
        "uri" : "1756-02-06"
      }, {
        "label" : "1929-05-16",
        "uri" : "1929-05-16"
      }, {
        "label" : "1946-02-21",
        "uri" : "1946-02-21"
      }, {
        "label" : "1936-05-09",
        "uri" : "1936-05-09"
      }, {
        "label" : "1414-11-09",
        "uri" : "1414-11-09"
      }, {
        "label" : "1820-03-20",
        "uri" : "1820-03-20"
      }, {
        "label" : "1913-12-18",
        "uri" : "1913-12-18"
      }, {
        "label" : "1974-03-24",
        "uri" : "1974-03-24"
      }, {
        "label" : "1948-03-22",
        "uri" : "1948-03-22"
      }, {
        "label" : "1928-10-31",
        "uri" : "1928-10-31"
      }, {
        "label" : "1926-03-06",
        "uri" : "1926-03-06"
      }, {
        "label" : "1940-11-22",
        "uri" : "1940-11-22"
      }, {
        "label" : "1896-02-19",
        "uri" : "1896-02-19"
      }, {
        "label" : "1901-11-03",
        "uri" : "1901-11-03"
      }, {
        "label" : "1693-02-07",
        "uri" : "1693-02-07"
      }, {
        "label" : "1665-02-06",
        "uri" : "1665-02-06"
      }, {
        "label" : "1456-06-11",
        "uri" : "1456-06-11"
      }, {
        "label" : "1515-09-22",
        "uri" : "1515-09-22"
      }, {
        "label" : "1574-12-12",
        "uri" : "1574-12-12"
      }, {
        "label" : "1917-02-25",
        "uri" : "1917-02-25"
      }, {
        "label" : "1960-08-10",
        "uri" : "1960-08-10"
      }, {
        "label" : "1918-12-25",
        "uri" : "1918-12-25"
      }, {
        "label" : "1968-04-19",
        "uri" : "1968-04-19"
      }, {
        "label" : "1849-01-22",
        "uri" : "1849-01-22"
      }, {
        "label" : "0214-09-09",
        "uri" : "0214-09-09"
      }, {
        "label" : "1922-12-24",
        "uri" : "1922-12-24"
      }, {
        "label" : "1885-09-22",
        "uri" : "1885-09-22"
      }, {
        "label" : "1949-10-21",
        "uri" : "1949-10-21"
      }, {
        "label" : "1922-07-26",
        "uri" : "1922-07-26"
      }, {
        "label" : "1923-07-22",
        "uri" : "1923-07-22"
      }, {
        "label" : "1856-04-05",
        "uri" : "1856-04-05"
      }, {
        "label" : "1894-01-30",
        "uri" : "1894-01-30"
      }, {
        "label" : "1963-12-18",
        "uri" : "1963-12-18"
      }, {
        "label" : "1940-11-27",
        "uri" : "1940-11-27"
      }, {
        "label" : "1895-10-04",
        "uri" : "1895-10-04"
      }, {
        "label" : "1972-08-30",
        "uri" : "1972-08-30"
      }, {
        "label" : "1949-07-15",
        "uri" : "1949-07-15"
      }, {
        "label" : "1930-07-02",
        "uri" : "1930-07-02"
      }, {
        "label" : "1893-10-15",
        "uri" : "1893-10-15"
      }, {
        "label" : "1908-10-06",
        "uri" : "1908-10-06"
      }, {
        "label" : "1683-03-01",
        "uri" : "1683-03-01"
      }, {
        "label" : "1768-05-17",
        "uri" : "1768-05-17"
      }, {
        "label" : "1860-04-23",
        "uri" : "1860-04-23"
      }, {
        "label" : "1427-11-30",
        "uri" : "1427-11-30"
      }, {
        "label" : "1943-10-22",
        "uri" : "1943-10-22"
      }, {
        "label" : "1684-04-15",
        "uri" : "1684-04-15"
      }, {
        "label" : "1519-04-13",
        "uri" : "1519-04-13"
      }, {
        "label" : "1401-10-27",
        "uri" : "1401-10-27"
      }, {
        "label" : "1754-02-02",
        "uri" : "1754-02-02"
      }, {
        "label" : "1868-06-07",
        "uri" : "1868-06-07"
      }, {
        "label" : "1697-08-06",
        "uri" : "1697-08-06"
      }, {
        "label" : "1923-10-04",
        "uri" : "1923-10-04"
      }, {
        "label" : "1950-10-12",
        "uri" : "1950-10-12"
      }, {
        "label" : "1943-07-12",
        "uri" : "1943-07-12"
      } ]
    },
    "combination" : true
  }, {
    "id" : "177",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bordered the birth date of $x?", "What borders the birth date of $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/State> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/birthDate> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "178",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bordered the occupation of $x?", "What borders the occupation of $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/State> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/occupation> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "179",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bordered a Belgian human?", "What bordered Belgian humans?", "What borders a Belgian human?", "What borders Belgian humans?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/State> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.wikidata.org/entity/Q5>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "180",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What bordered a Belgian golfer?", "What bordered Belgian golfers?", "What borders a Belgian golfer?", "What borders Belgian golfers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/State> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.wikidata.org/entity/Q13156709>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "181",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born the spouse of $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/spouse> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "Andrzej Wajda",
        "uri" : "http://dbpedia.org/resource/Andrzej_Wajda"
      }, {
        "label" : "Brad Pitt",
        "uri" : "http://dbpedia.org/resource/Brad_Pitt"
      }, {
        "label" : "Carole Lombard",
        "uri" : "http://dbpedia.org/resource/Carole_Lombard"
      }, {
        "label" : "Caroline of Brunswick",
        "uri" : "http://dbpedia.org/resource/Caroline_of_Brunswick"
      }, {
        "label" : "Catherine I of Russia",
        "uri" : "http://dbpedia.org/resource/Catherine_I_of_Russia"
      }, {
        "label" : "Christopher Lambert",
        "uri" : "http://dbpedia.org/resource/Christopher_Lambert"
      }, {
        "label" : "Clark Gable",
        "uri" : "http://dbpedia.org/resource/Clark_Gable"
      }, {
        "label" : "Cnut the Great",
        "uri" : "http://dbpedia.org/resource/Cnut_the_Great"
      }, {
        "label" : "Edmond Hamilton",
        "uri" : "http://dbpedia.org/resource/Edmond_Hamilton"
      }, {
        "label" : "Elizabeth Taylor",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Taylor"
      }, {
        "label" : "Elizabeth Woodville",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Woodville"
      }, {
        "label" : "Emma of Normandy",
        "uri" : "http://dbpedia.org/resource/Emma_of_Normandy"
      }, {
        "label" : "George IV of the United Kingdom",
        "uri" : "http://dbpedia.org/resource/George_IV_of_the_United_Kingdom"
      }, {
        "label" : "Gwyneth Paltrow",
        "uri" : "http://dbpedia.org/resource/Gwyneth_Paltrow"
      }, {
        "label" : "Ingrid Bergman",
        "uri" : "http://dbpedia.org/resource/Ingrid_Bergman"
      }, {
        "label" : "Jennifer Aniston",
        "uri" : "http://dbpedia.org/resource/Jennifer_Aniston"
      }, {
        "label" : "Leigh Brackett",
        "uri" : "http://dbpedia.org/resource/Leigh_Brackett"
      }, {
        "label" : "Louis XVI of France",
        "uri" : "http://dbpedia.org/resource/Louis_XVI_of_France"
      }, {
        "label" : "Marie Antoinette",
        "uri" : "http://dbpedia.org/resource/Marie_Antoinette"
      }, {
        "label" : "Peter the Great",
        "uri" : "http://dbpedia.org/resource/Peter_the_Great"
      }, {
        "label" : "Richard Burton",
        "uri" : "http://dbpedia.org/resource/Richard_Burton"
      }, {
        "label" : "Roberto Rossellini",
        "uri" : "http://dbpedia.org/resource/Roberto_Rossellini"
      }, {
        "label" : "Salman Rushdie",
        "uri" : "http://dbpedia.org/resource/Salman_Rushdie"
      }, {
        "label" : "Sylvia Plath",
        "uri" : "http://dbpedia.org/resource/Sylvia_Plath"
      }, {
        "label" : "Ted Hughes",
        "uri" : "http://dbpedia.org/resource/Ted_Hughes"
      }, {
        "label" : "Theophanu",
        "uri" : "http://dbpedia.org/resource/Theophanu"
      }, {
        "label" : "Val Kilmer",
        "uri" : "http://dbpedia.org/resource/Val_Kilmer"
      }, {
        "label" : "Vivien Leigh",
        "uri" : "http://dbpedia.org/resource/Vivien_Leigh"
      }, {
        "label" : "Camille Flammarion",
        "uri" : "http://dbpedia.org/resource/Camille_Flammarion"
      }, {
        "label" : "Chris Martin",
        "uri" : "http://dbpedia.org/resource/Chris_Martin"
      }, {
        "label" : "Céline Bara",
        "uri" : "http://dbpedia.org/resource/Céline_Bara"
      }, {
        "label" : "Dennis Quaid",
        "uri" : "http://dbpedia.org/resource/Dennis_Quaid"
      }, {
        "label" : "Joanne Whalley",
        "uri" : "http://dbpedia.org/resource/Joanne_Whalley"
      }, {
        "label" : "John Grey of Groby",
        "uri" : "http://dbpedia.org/resource/John_Grey_of_Groby"
      }, {
        "label" : "Minnie Maddern Fiske",
        "uri" : "http://dbpedia.org/resource/Minnie_Maddern_Fiske"
      }, {
        "label" : "Padma Lakshmi",
        "uri" : "http://dbpedia.org/resource/Padma_Lakshmi"
      }, {
        "label" : "Talisa Soto",
        "uri" : "http://dbpedia.org/resource/Talisa_Soto"
      }, {
        "label" : "Aaron Spelling",
        "uri" : "http://dbpedia.org/resource/Aaron_Spelling"
      }, {
        "label" : "Adam Hochschild",
        "uri" : "http://dbpedia.org/resource/Adam_Hochschild"
      }, {
        "label" : "Alastair Dunnett",
        "uri" : "http://dbpedia.org/resource/Alastair_Dunnett"
      }, {
        "label" : "Arlie Russell Hochschild",
        "uri" : "http://dbpedia.org/resource/Arlie_Russell_Hochschild"
      }, {
        "label" : "Beata Tyszkiewicz",
        "uri" : "http://dbpedia.org/resource/Beata_Tyszkiewicz"
      }, {
        "label" : "Benjamin Bratt",
        "uri" : "http://dbpedia.org/resource/Benjamin_Bratt"
      }, {
        "label" : "Bunker Roy",
        "uri" : "http://dbpedia.org/resource/Bunker_Roy"
      }, {
        "label" : "Candy Spelling",
        "uri" : "http://dbpedia.org/resource/Candy_Spelling"
      }, {
        "label" : "Cyrille Bara",
        "uri" : "http://dbpedia.org/resource/Cyrille_Bara"
      }, {
        "label" : "Dorothy Dunnett",
        "uri" : "http://dbpedia.org/resource/Dorothy_Dunnett"
      }, {
        "label" : "Ehud Olmert",
        "uri" : "http://dbpedia.org/resource/Ehud_Olmert"
      }, {
        "label" : "Elvira of Castile, Queen of León",
        "uri" : "http://dbpedia.org/resource/Elvira_of_Castile,_Queen_of_León"
      }, {
        "label" : "Gemini Ganesan",
        "uri" : "http://dbpedia.org/resource/Gemini_Ganesan"
      }, {
        "label" : "Harriet Smithson",
        "uri" : "http://dbpedia.org/resource/Harriet_Smithson"
      }, {
        "label" : "James Harris Simons",
        "uri" : "http://dbpedia.org/resource/James_Harris_Simons"
      }, {
        "label" : "Lewis Craig Humphrey",
        "uri" : "http://dbpedia.org/resource/Lewis_Craig_Humphrey"
      }, {
        "label" : "Paul Hasluck",
        "uri" : "http://dbpedia.org/resource/Paul_Hasluck"
      }, {
        "label" : "Paula Dockery",
        "uri" : "http://dbpedia.org/resource/Paula_Dockery"
      }, {
        "label" : "Robert Sidney, 2nd Earl of Leicester",
        "uri" : "http://dbpedia.org/resource/Robert_Sidney,_2nd_Earl_of_Leicester"
      }, {
        "label" : "Rolly Bester",
        "uri" : "http://dbpedia.org/resource/Rolly_Bester"
      }, {
        "label" : "Ruy Guerra",
        "uri" : "http://dbpedia.org/resource/Ruy_Guerra"
      }, {
        "label" : "Clara McMillen",
        "uri" : "http://dbpedia.org/resource/Clara_McMillen"
      }, {
        "label" : "Diana Gould (dancer)",
        "uri" : "http://dbpedia.org/resource/Diana_Gould_(dancer)"
      }, {
        "label" : "Sidney Miller (actor)",
        "uri" : "http://dbpedia.org/resource/Sidney_Miller_(actor)"
      }, {
        "label" : "Sir Edward Burgh",
        "uri" : "http://dbpedia.org/resource/Sir_Edward_Burgh"
      }, {
        "label" : "Henry Morgenthau Jr.",
        "uri" : "http://dbpedia.org/resource/Henry_Morgenthau_Jr."
      }, {
        "label" : "Lydia Lopokova",
        "uri" : "http://dbpedia.org/resource/Lydia_Lopokova"
      }, {
        "label" : "Maxwell Reed",
        "uri" : "http://dbpedia.org/resource/Maxwell_Reed"
      }, {
        "label" : "Sigrid the Haughty",
        "uri" : "http://dbpedia.org/resource/Sigrid_the_Haughty"
      }, {
        "label" : "Elena Ceaușescu",
        "uri" : "http://dbpedia.org/resource/Elena_Ceaușescu"
      }, {
        "label" : "Lydia Clarke",
        "uri" : "http://dbpedia.org/resource/Lydia_Clarke"
      }, {
        "label" : "Ruqaiya Sultan Begum",
        "uri" : "http://dbpedia.org/resource/Ruqaiya_Sultan_Begum"
      }, {
        "label" : "Eliza Jumel",
        "uri" : "http://dbpedia.org/resource/Eliza_Jumel"
      }, {
        "label" : "Lena Herzog",
        "uri" : "http://dbpedia.org/resource/Lena_Herzog"
      }, {
        "label" : "Katie Lee (chef)",
        "uri" : "http://dbpedia.org/resource/Katie_Lee_(chef)"
      }, {
        "label" : "Elsa Pataky",
        "uri" : "http://dbpedia.org/resource/Elsa_Pataky"
      }, {
        "label" : "Maïwenn",
        "uri" : "http://dbpedia.org/resource/Maïwenn"
      }, {
        "label" : "Tom Courtenay",
        "uri" : "http://dbpedia.org/resource/Tom_Courtenay"
      }, {
        "label" : "Christian I of Denmark",
        "uri" : "http://dbpedia.org/resource/Christian_I_of_Denmark"
      }, {
        "label" : "Edward of Westminster, Prince of Wales",
        "uri" : "http://dbpedia.org/resource/Edward_of_Westminster,_Prince_of_Wales"
      }, {
        "label" : "Joanne Woodward",
        "uri" : "http://dbpedia.org/resource/Joanne_Woodward"
      }, {
        "label" : "Lady Caroline Lamb",
        "uri" : "http://dbpedia.org/resource/Lady_Caroline_Lamb"
      }, {
        "label" : "Margaret Sullavan",
        "uri" : "http://dbpedia.org/resource/Margaret_Sullavan"
      }, {
        "label" : "Maria Fitzherbert",
        "uri" : "http://dbpedia.org/resource/Maria_Fitzherbert"
      }, {
        "label" : "Mickey Deans",
        "uri" : "http://dbpedia.org/resource/Mickey_Deans"
      }, {
        "label" : "Alice Hathaway Lee Roosevelt",
        "uri" : "http://dbpedia.org/resource/Alice_Hathaway_Lee_Roosevelt"
      }, {
        "label" : "Frank Bunker Gilbreth Sr.",
        "uri" : "http://dbpedia.org/resource/Frank_Bunker_Gilbreth_Sr."
      }, {
        "label" : "Alfred Steele",
        "uri" : "http://dbpedia.org/resource/Alfred_Steele"
      }, {
        "label" : "Barbara Hutton",
        "uri" : "http://dbpedia.org/resource/Barbara_Hutton"
      }, {
        "label" : "Sidney Luft",
        "uri" : "http://dbpedia.org/resource/Sidney_Luft"
      }, {
        "label" : "Sylvia Ashley",
        "uri" : "http://dbpedia.org/resource/Sylvia_Ashley"
      }, {
        "label" : "Salima Sultan Begum",
        "uri" : "http://dbpedia.org/resource/Salima_Sultan_Begum"
      }, {
        "label" : "Cecily Neville, Duchess of Warwick",
        "uri" : "http://dbpedia.org/resource/Cecily_Neville,_Duchess_of_Warwick"
      }, {
        "label" : "David Evans Shaw",
        "uri" : "http://dbpedia.org/resource/David_Evans_Shaw"
      }, {
        "label" : "John Jay O'Connor",
        "uri" : "http://dbpedia.org/resource/John_Jay_O'Connor"
      }, {
        "label" : "Marta Fernandez Miranda de Batista",
        "uri" : "http://dbpedia.org/resource/Marta_Fernandez_Miranda_de_Batista"
      }, {
        "label" : "Josephine Dillon",
        "uri" : "http://dbpedia.org/resource/Josephine_Dillon"
      }, {
        "label" : "Sunita Deshpande",
        "uri" : "http://dbpedia.org/resource/Sunita_Deshpande"
      }, {
        "label" : "Bettina Gorton",
        "uri" : "http://dbpedia.org/resource/Bettina_Gorton"
      }, {
        "label" : "Luma de Oliveira",
        "uri" : "http://dbpedia.org/resource/Luma_de_Oliveira"
      }, {
        "label" : "Tove of the Obotrites",
        "uri" : "http://dbpedia.org/resource/Tove_of_the_Obotrites"
      }, {
        "label" : "Gelli de Belen",
        "uri" : "http://dbpedia.org/resource/Gelli_de_Belen"
      }, {
        "label" : "Albia Dominica",
        "uri" : "http://dbpedia.org/resource/Albia_Dominica"
      } ]
    },
    "combination" : true
  }, {
    "id" : "182",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian cleric?", "What born Belgian clerics?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cleric>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "183",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian office holder?", "What born Belgian office holders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "184",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian agent?", "What born Belgian agents?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Agent>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "185",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian economist?", "What born Belgian economists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Economist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "186",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian motorcycle rider?", "What born Belgian motorcycle riders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorcycleRider>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "187",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian artist?", "What born Belgian artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "188",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian athlete?", "What born Belgian athletes?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "189",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian scientist?", "What born Belgian scientists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "190",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian architect?", "What born Belgian architects?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "191",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian golf player?", "What born Belgian golf players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "192",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian racing driver?", "What born Belgian racing drivers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RacingDriver>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "193",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian politician?", "What born Belgian politicians?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "194",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian swimmer?", "What born Belgian swimmers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Swimmer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "195",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian volleyball player?", "What born Belgian volleyball players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VolleyballPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "196",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian person?", "What born Belgian persons?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "197",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian Christian Bishop?", "What born Belgian Christian Bishops?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ChristianBishop>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "198",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian comics creator?", "What born Belgian comics creators?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCreator>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "199",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian writer?", "What born Belgian writers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "200",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian motorsport racer?", "What born Belgian motorsport racers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorsportRacer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "201",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born a Belgian musical artist?", "What born Belgian musical artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "202",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "VP",
    "sentences" : [ "What born persons born by $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfPropx)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "1969-12-17",
        "uri" : "1969-12-17"
      }, {
        "label" : "1936-11-30",
        "uri" : "1936-11-30"
      }, {
        "label" : "1990-10-30",
        "uri" : "1990-10-30"
      }, {
        "label" : "1976-11-12",
        "uri" : "1976-11-12"
      }, {
        "label" : "1989-11-29",
        "uri" : "1989-11-29"
      }, {
        "label" : "1943-12-29",
        "uri" : "1943-12-29"
      }, {
        "label" : "1918-12-30",
        "uri" : "1918-12-30"
      }, {
        "label" : "1975-10-13",
        "uri" : "1975-10-13"
      }, {
        "label" : "1896-09-01",
        "uri" : "1896-09-01"
      }, {
        "label" : "1756-02-06",
        "uri" : "1756-02-06"
      }, {
        "label" : "1900-11-14",
        "uri" : "1900-11-14"
      }, {
        "label" : "1918-10-06",
        "uri" : "1918-10-06"
      }, {
        "label" : "1667-05-26",
        "uri" : "1667-05-26"
      }, {
        "label" : "1779-11-14",
        "uri" : "1779-11-14"
      }, {
        "label" : "1937-01-01",
        "uri" : "1937-01-01"
      }, {
        "label" : "1952-07-06",
        "uri" : "1952-07-06"
      }, {
        "label" : "1900-02-05",
        "uri" : "1900-02-05"
      }, {
        "label" : "1870-12-10",
        "uri" : "1870-12-10"
      }, {
        "label" : "1752-09-18",
        "uri" : "1752-09-18"
      }, {
        "label" : "1929-05-16",
        "uri" : "1929-05-16"
      }, {
        "label" : "1955-02-13",
        "uri" : "1955-02-13"
      }, {
        "label" : "1940-04-25",
        "uri" : "1940-04-25"
      }, {
        "label" : "1946-02-21",
        "uri" : "1946-02-21"
      }, {
        "label" : "1970-08-13",
        "uri" : "1970-08-13"
      }, {
        "label" : "1863-12-08",
        "uri" : "1863-12-08"
      }, {
        "label" : "1936-05-09",
        "uri" : "1936-05-09"
      }, {
        "label" : "1414-11-09",
        "uri" : "1414-11-09"
      }, {
        "label" : "1931-05-03",
        "uri" : "1931-05-03"
      }, {
        "label" : "1950-01-09",
        "uri" : "1950-01-09"
      } ]
    },
    "combination" : true
  }, {
    "id" : "203",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "VP",
    "sentences" : [ "What directed movies directed by $x?", "What directs movies directed by $x?", "Which person directed movies directed by $x?", "Which person directs movies directed by $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfPropx)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "Andrzej Wajda",
        "uri" : "http://dbpedia.org/resource/Andrzej_Wajda"
      }, {
        "label" : "Billy Wilder",
        "uri" : "http://dbpedia.org/resource/Billy_Wilder"
      }, {
        "label" : "Blake Edwards",
        "uri" : "http://dbpedia.org/resource/Blake_Edwards"
      }, {
        "label" : "Elia Kazan",
        "uri" : "http://dbpedia.org/resource/Elia_Kazan"
      }, {
        "label" : "Godfrey Reggio",
        "uri" : "http://dbpedia.org/resource/Godfrey_Reggio"
      }, {
        "label" : "John Carpenter",
        "uri" : "http://dbpedia.org/resource/John_Carpenter"
      }, {
        "label" : "Luc Besson",
        "uri" : "http://dbpedia.org/resource/Luc_Besson"
      }, {
        "label" : "Luchino Visconti",
        "uri" : "http://dbpedia.org/resource/Luchino_Visconti"
      }, {
        "label" : "Peter Weir",
        "uri" : "http://dbpedia.org/resource/Peter_Weir"
      }, {
        "label" : "Ted Demme",
        "uri" : "http://dbpedia.org/resource/Ted_Demme"
      }, {
        "label" : "Terry Gilliam",
        "uri" : "http://dbpedia.org/resource/Terry_Gilliam"
      }, {
        "label" : "Tod Browning",
        "uri" : "http://dbpedia.org/resource/Tod_Browning"
      }, {
        "label" : "Tony Richardson",
        "uri" : "http://dbpedia.org/resource/Tony_Richardson"
      }, {
        "label" : "Vittorio De Sica",
        "uri" : "http://dbpedia.org/resource/Vittorio_De_Sica"
      }, {
        "label" : "Wim Wenders",
        "uri" : "http://dbpedia.org/resource/Wim_Wenders"
      }, {
        "label" : "Woody Allen",
        "uri" : "http://dbpedia.org/resource/Woody_Allen"
      }, {
        "label" : "Marcello Albani",
        "uri" : "http://dbpedia.org/resource/Marcello_Albani"
      }, {
        "label" : "Charles McDougall",
        "uri" : "http://dbpedia.org/resource/Charles_McDougall"
      }, {
        "label" : "Griffin Dunne",
        "uri" : "http://dbpedia.org/resource/Griffin_Dunne"
      }, {
        "label" : "Hideo Nakata",
        "uri" : "http://dbpedia.org/resource/Hideo_Nakata"
      }, {
        "label" : "James Kirkwood, Sr.",
        "uri" : "http://dbpedia.org/resource/James_Kirkwood,_Sr."
      }, {
        "label" : "John Landis",
        "uri" : "http://dbpedia.org/resource/John_Landis"
      }, {
        "label" : "Kimio Yabuki",
        "uri" : "http://dbpedia.org/resource/Kimio_Yabuki"
      }, {
        "label" : "Koichi Ishii",
        "uri" : "http://dbpedia.org/resource/Koichi_Ishii"
      }, {
        "label" : "Krzysztof Zanussi",
        "uri" : "http://dbpedia.org/resource/Krzysztof_Zanussi"
      }, {
        "label" : "Maher Sabry",
        "uri" : "http://dbpedia.org/resource/Maher_Sabry"
      }, {
        "label" : "Nanni Moretti",
        "uri" : "http://dbpedia.org/resource/Nanni_Moretti"
      }, {
        "label" : "Paul Lynch (director)",
        "uri" : "http://dbpedia.org/resource/Paul_Lynch_(director)"
      }, {
        "label" : "Tony Giglio",
        "uri" : "http://dbpedia.org/resource/Tony_Giglio"
      }, {
        "label" : "Walt Becker",
        "uri" : "http://dbpedia.org/resource/Walt_Becker"
      }, {
        "label" : "Walter Grauman",
        "uri" : "http://dbpedia.org/resource/Walter_Grauman"
      }, {
        "label" : "Oliver Stone",
        "uri" : "http://dbpedia.org/resource/Oliver_Stone"
      }, {
        "label" : "John Behring",
        "uri" : "http://dbpedia.org/resource/John_Behring"
      }, {
        "label" : "Bruno Corbucci",
        "uri" : "http://dbpedia.org/resource/Bruno_Corbucci"
      }, {
        "label" : "Dan Riba",
        "uri" : "http://dbpedia.org/resource/Dan_Riba"
      }, {
        "label" : "David Zucker (filmmaker)",
        "uri" : "http://dbpedia.org/resource/David_Zucker_(filmmaker)"
      }, {
        "label" : "George Sherman",
        "uri" : "http://dbpedia.org/resource/George_Sherman"
      }, {
        "label" : "Jan Hřebejk",
        "uri" : "http://dbpedia.org/resource/Jan_Hřebejk"
      }, {
        "label" : "Karl Brown (cinematographer)",
        "uri" : "http://dbpedia.org/resource/Karl_Brown_(cinematographer)"
      }, {
        "label" : "Mike Figgis",
        "uri" : "http://dbpedia.org/resource/Mike_Figgis"
      }, {
        "label" : "Zhao Liang (director)",
        "uri" : "http://dbpedia.org/resource/Zhao_Liang_(director)"
      }, {
        "label" : "Stanley Donen",
        "uri" : "http://dbpedia.org/resource/Stanley_Donen"
      }, {
        "label" : "George Archainbaud",
        "uri" : "http://dbpedia.org/resource/George_Archainbaud"
      }, {
        "label" : "J. Searle Dawley",
        "uri" : "http://dbpedia.org/resource/J._Searle_Dawley"
      }, {
        "label" : "Michael Grossman",
        "uri" : "http://dbpedia.org/resource/Michael_Grossman"
      }, {
        "label" : "Peter Graham Scott",
        "uri" : "http://dbpedia.org/resource/Peter_Graham_Scott"
      }, {
        "label" : "Brenton Spencer",
        "uri" : "http://dbpedia.org/resource/Brenton_Spencer"
      }, {
        "label" : "Paul Alter",
        "uri" : "http://dbpedia.org/resource/Paul_Alter"
      }, {
        "label" : "Jason Winer",
        "uri" : "http://dbpedia.org/resource/Jason_Winer"
      }, {
        "label" : "Kamalakara Kameswara Rao",
        "uri" : "http://dbpedia.org/resource/Kamalakara_Kameswara_Rao"
      }, {
        "label" : "Lewis Teague",
        "uri" : "http://dbpedia.org/resource/Lewis_Teague"
      }, {
        "label" : "Donna Deitch",
        "uri" : "http://dbpedia.org/resource/Donna_Deitch"
      }, {
        "label" : "Leslie H. Martinson",
        "uri" : "http://dbpedia.org/resource/Leslie_H._Martinson"
      }, {
        "label" : "Sidney Olcott",
        "uri" : "http://dbpedia.org/resource/Sidney_Olcott"
      }, {
        "label" : "Dan Curtis",
        "uri" : "http://dbpedia.org/resource/Dan_Curtis"
      }, {
        "label" : "Wayne Wang",
        "uri" : "http://dbpedia.org/resource/Wayne_Wang"
      }, {
        "label" : "Mehboob Khan",
        "uri" : "http://dbpedia.org/resource/Mehboob_Khan"
      }, {
        "label" : "Lloyd Bacon",
        "uri" : "http://dbpedia.org/resource/Lloyd_Bacon"
      }, {
        "label" : "John Francis Dillon (director)",
        "uri" : "http://dbpedia.org/resource/John_Francis_Dillon_(director)"
      }, {
        "label" : "Mac Alejandre",
        "uri" : "http://dbpedia.org/resource/Mac_Alejandre"
      }, {
        "label" : "Alexander Gruszynski",
        "uri" : "http://dbpedia.org/resource/Alexander_Gruszynski"
      }, {
        "label" : "Georgi Djulgerov",
        "uri" : "http://dbpedia.org/resource/Georgi_Djulgerov"
      }, {
        "label" : "Jeff Nichols",
        "uri" : "http://dbpedia.org/resource/Jeff_Nichols"
      }, {
        "label" : "Antonio Nuić",
        "uri" : "http://dbpedia.org/resource/Antonio_Nuić"
      }, {
        "label" : "Lev Atamanov",
        "uri" : "http://dbpedia.org/resource/Lev_Atamanov"
      }, {
        "label" : "Reginald Fogwell",
        "uri" : "http://dbpedia.org/resource/Reginald_Fogwell"
      }, {
        "label" : "Jeffrey Reiner",
        "uri" : "http://dbpedia.org/resource/Jeffrey_Reiner"
      }, {
        "label" : "Tom Terriss",
        "uri" : "http://dbpedia.org/resource/Tom_Terriss"
      }, {
        "label" : "Ralph Murphy",
        "uri" : "http://dbpedia.org/resource/Ralph_Murphy"
      }, {
        "label" : "Barbet Schroeder",
        "uri" : "http://dbpedia.org/resource/Barbet_Schroeder"
      }, {
        "label" : "Frank Thomas (animator)",
        "uri" : "http://dbpedia.org/resource/Frank_Thomas_(animator)"
      }, {
        "label" : "Henry King (director)",
        "uri" : "http://dbpedia.org/resource/Henry_King_(director)"
      }, {
        "label" : "Matt Piedmont",
        "uri" : "http://dbpedia.org/resource/Matt_Piedmont"
      }, {
        "label" : "Merian C. Cooper",
        "uri" : "http://dbpedia.org/resource/Merian_C._Cooper"
      }, {
        "label" : "Michael Moore",
        "uri" : "http://dbpedia.org/resource/Michael_Moore"
      }, {
        "label" : "Michael Powell",
        "uri" : "http://dbpedia.org/resource/Michael_Powell"
      }, {
        "label" : "Richard Kelly (director)",
        "uri" : "http://dbpedia.org/resource/Richard_Kelly_(director)"
      }, {
        "label" : "Richard Lester",
        "uri" : "http://dbpedia.org/resource/Richard_Lester"
      }, {
        "label" : "Ringo Lam",
        "uri" : "http://dbpedia.org/resource/Ringo_Lam"
      }, {
        "label" : "Robert Zemeckis",
        "uri" : "http://dbpedia.org/resource/Robert_Zemeckis"
      }, {
        "label" : "Roger Donaldson",
        "uri" : "http://dbpedia.org/resource/Roger_Donaldson"
      }, {
        "label" : "Shigeru Miyamoto",
        "uri" : "http://dbpedia.org/resource/Shigeru_Miyamoto"
      }, {
        "label" : "Tetsuya Takahashi",
        "uri" : "http://dbpedia.org/resource/Tetsuya_Takahashi"
      }, {
        "label" : "Douglas Sirk",
        "uri" : "http://dbpedia.org/resource/Douglas_Sirk"
      }, {
        "label" : "Fred Zinnemann",
        "uri" : "http://dbpedia.org/resource/Fred_Zinnemann"
      }, {
        "label" : "John Hughes (filmmaker)",
        "uri" : "http://dbpedia.org/resource/John_Hughes_(filmmaker)"
      }, {
        "label" : "Kenneth Branagh",
        "uri" : "http://dbpedia.org/resource/Kenneth_Branagh"
      }, {
        "label" : "Anurag Basu",
        "uri" : "http://dbpedia.org/resource/Anurag_Basu"
      }, {
        "label" : "Arthur Davis (animator)",
        "uri" : "http://dbpedia.org/resource/Arthur_Davis_(animator)"
      }, {
        "label" : "Constantine Makris",
        "uri" : "http://dbpedia.org/resource/Constantine_Makris"
      }, {
        "label" : "J. P. McGowan",
        "uri" : "http://dbpedia.org/resource/J._P._McGowan"
      }, {
        "label" : "Michael Kennedy (director)",
        "uri" : "http://dbpedia.org/resource/Michael_Kennedy_(director)"
      }, {
        "label" : "Prakash Raj",
        "uri" : "http://dbpedia.org/resource/Prakash_Raj"
      }, {
        "label" : "Robert Z. Leonard",
        "uri" : "http://dbpedia.org/resource/Robert_Z._Leonard"
      }, {
        "label" : "Ross Bagdasarian, Jr.",
        "uri" : "http://dbpedia.org/resource/Ross_Bagdasarian,_Jr."
      }, {
        "label" : "Zac Moncrief",
        "uri" : "http://dbpedia.org/resource/Zac_Moncrief"
      }, {
        "label" : "Frank Borzage",
        "uri" : "http://dbpedia.org/resource/Frank_Borzage"
      }, {
        "label" : "Martin and Osa Johnson",
        "uri" : "http://dbpedia.org/resource/Martin_and_Osa_Johnson"
      }, {
        "label" : "A. Kodandarami Reddy",
        "uri" : "http://dbpedia.org/resource/A._Kodandarami_Reddy"
      }, {
        "label" : "Adolfo Alix Jr.",
        "uri" : "http://dbpedia.org/resource/Adolfo_Alix_Jr."
      } ]
    },
    "combination" : true
  }, {
    "id" : "204",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by the spouse of $x?", "What was directed by the spouse of $x?", "Which movie is directed by the spouse of $x?", "Which movie was directed by the spouse of $x?", "Which movies are directed by the spouse of $x?", "Which movies were directed by the spouse of $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/spouse> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "Brad Pitt",
        "uri" : "http://dbpedia.org/resource/Brad_Pitt"
      }, {
        "label" : "Christopher Lambert",
        "uri" : "http://dbpedia.org/resource/Christopher_Lambert"
      }, {
        "label" : "Elizabeth Taylor",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Taylor"
      }, {
        "label" : "Ingrid Bergman",
        "uri" : "http://dbpedia.org/resource/Ingrid_Bergman"
      }, {
        "label" : "Vivien Leigh",
        "uri" : "http://dbpedia.org/resource/Vivien_Leigh"
      }, {
        "label" : "Dennis Quaid",
        "uri" : "http://dbpedia.org/resource/Dennis_Quaid"
      }, {
        "label" : "Savitri (actress)",
        "uri" : "http://dbpedia.org/resource/Savitri_(actress)"
      }, {
        "label" : "Beata Tyszkiewicz",
        "uri" : "http://dbpedia.org/resource/Beata_Tyszkiewicz"
      }, {
        "label" : "Gemini Ganesan",
        "uri" : "http://dbpedia.org/resource/Gemini_Ganesan"
      }, {
        "label" : "Lydia Clarke",
        "uri" : "http://dbpedia.org/resource/Lydia_Clarke"
      }, {
        "label" : "Lena Herzog",
        "uri" : "http://dbpedia.org/resource/Lena_Herzog"
      }, {
        "label" : "Maïwenn",
        "uri" : "http://dbpedia.org/resource/Maïwenn"
      }, {
        "label" : "Joanne Woodward",
        "uri" : "http://dbpedia.org/resource/Joanne_Woodward"
      }, {
        "label" : "Hank Azaria",
        "uri" : "http://dbpedia.org/resource/Hank_Azaria"
      }, {
        "label" : "Dilys Hamlett",
        "uri" : "http://dbpedia.org/resource/Dilys_Hamlett"
      }, {
        "label" : "Helen Dallimore",
        "uri" : "http://dbpedia.org/resource/Helen_Dallimore"
      }, {
        "label" : "Taryn Simon",
        "uri" : "http://dbpedia.org/resource/Taryn_Simon"
      }, {
        "label" : "Chrissie White",
        "uri" : "http://dbpedia.org/resource/Chrissie_White"
      }, {
        "label" : "Aaliyah",
        "uri" : "http://dbpedia.org/resource/Aaliyah"
      }, {
        "label" : "Evelyn Keyes",
        "uri" : "http://dbpedia.org/resource/Evelyn_Keyes"
      }, {
        "label" : "Bess Houdini",
        "uri" : "http://dbpedia.org/resource/Bess_Houdini"
      }, {
        "label" : "Jill Esmond",
        "uri" : "http://dbpedia.org/resource/Jill_Esmond"
      }, {
        "label" : "Élisabeth Depardieu",
        "uri" : "http://dbpedia.org/resource/Élisabeth_Depardieu"
      }, {
        "label" : "María Mercader",
        "uri" : "http://dbpedia.org/resource/María_Mercader"
      }, {
        "label" : "Viveca Lindfors",
        "uri" : "http://dbpedia.org/resource/Viveca_Lindfors"
      }, {
        "label" : "Robert F. Kennedy Jr.",
        "uri" : "http://dbpedia.org/resource/Robert_F._Kennedy_Jr."
      }, {
        "label" : "Judith Holzmeister",
        "uri" : "http://dbpedia.org/resource/Judith_Holzmeister"
      }, {
        "label" : "Doe Avedon",
        "uri" : "http://dbpedia.org/resource/Doe_Avedon"
      }, {
        "label" : "Virginie Besson-Silla",
        "uri" : "http://dbpedia.org/resource/Virginie_Besson-Silla"
      }, {
        "label" : "Enrica Soma",
        "uri" : "http://dbpedia.org/resource/Enrica_Soma"
      }, {
        "label" : "Susan Bay",
        "uri" : "http://dbpedia.org/resource/Susan_Bay"
      }, {
        "label" : "Samantha Juste",
        "uri" : "http://dbpedia.org/resource/Samantha_Juste"
      }, {
        "label" : "Molly Kazan",
        "uri" : "http://dbpedia.org/resource/Molly_Kazan"
      }, {
        "label" : "Vaishali Kasaravalli",
        "uri" : "http://dbpedia.org/resource/Vaishali_Kasaravalli"
      }, {
        "label" : "Andrea Kelly (actress)",
        "uri" : "http://dbpedia.org/resource/Andrea_Kelly_(actress)"
      }, {
        "label" : "Allan McKeown",
        "uri" : "http://dbpedia.org/resource/Allan_McKeown"
      }, {
        "label" : "Melanie Griffith",
        "uri" : "http://dbpedia.org/resource/Melanie_Griffith"
      }, {
        "label" : "Polly Platt",
        "uri" : "http://dbpedia.org/resource/Polly_Platt"
      }, {
        "label" : "Sybil Christopher",
        "uri" : "http://dbpedia.org/resource/Sybil_Christopher"
      }, {
        "label" : "Julie Andrews",
        "uri" : "http://dbpedia.org/resource/Julie_Andrews"
      }, {
        "label" : "Liza Minnelli",
        "uri" : "http://dbpedia.org/resource/Liza_Minnelli"
      }, {
        "label" : "Vanessa Redgrave",
        "uri" : "http://dbpedia.org/resource/Vanessa_Redgrave"
      }, {
        "label" : "Eva Bartok",
        "uri" : "http://dbpedia.org/resource/Eva_Bartok"
      }, {
        "label" : "Jana Brejchová",
        "uri" : "http://dbpedia.org/resource/Jana_Brejchová"
      }, {
        "label" : "Amy Leslie",
        "uri" : "http://dbpedia.org/resource/Amy_Leslie"
      }, {
        "label" : "Pushpavalli",
        "uri" : "http://dbpedia.org/resource/Pushpavalli"
      }, {
        "label" : "Shelley Winters",
        "uri" : "http://dbpedia.org/resource/Shelley_Winters"
      }, {
        "label" : "Louise Lasser",
        "uri" : "http://dbpedia.org/resource/Louise_Lasser"
      }, {
        "label" : "Adrienne Barbeau",
        "uri" : "http://dbpedia.org/resource/Adrienne_Barbeau"
      }, {
        "label" : "Jesse James (customizer)",
        "uri" : "http://dbpedia.org/resource/Jesse_James_(customizer)"
      }, {
        "label" : "Milla Jovovich",
        "uri" : "http://dbpedia.org/resource/Milla_Jovovich"
      }, {
        "label" : "Linda Lee Cadwell",
        "uri" : "http://dbpedia.org/resource/Linda_Lee_Cadwell"
      }, {
        "label" : "Mayte Garcia",
        "uri" : "http://dbpedia.org/resource/Mayte_Garcia"
      }, {
        "label" : "Nicole Farhi",
        "uri" : "http://dbpedia.org/resource/Nicole_Farhi"
      }, {
        "label" : "Anouk Aimée",
        "uri" : "http://dbpedia.org/resource/Anouk_Aimée"
      }, {
        "label" : "Joan Plowright",
        "uri" : "http://dbpedia.org/resource/Joan_Plowright"
      }, {
        "label" : "Zoë Ball",
        "uri" : "http://dbpedia.org/resource/Zoë_Ball"
      }, {
        "label" : "Amanda Demme",
        "uri" : "http://dbpedia.org/resource/Amanda_Demme"
      }, {
        "label" : "Sandra Zober",
        "uri" : "http://dbpedia.org/resource/Sandra_Zober"
      }, {
        "label" : "Natalie Talmadge",
        "uri" : "http://dbpedia.org/resource/Natalie_Talmadge"
      }, {
        "label" : "Jacqueline Beer",
        "uri" : "http://dbpedia.org/resource/Jacqueline_Beer"
      }, {
        "label" : "Barbara Loden",
        "uri" : "http://dbpedia.org/resource/Barbara_Loden"
      }, {
        "label" : "Małgorzata Braunek",
        "uri" : "http://dbpedia.org/resource/Małgorzata_Braunek"
      }, {
        "label" : "Rima Horton",
        "uri" : "http://dbpedia.org/resource/Rima_Horton"
      }, {
        "label" : "Lisa Hoffman",
        "uri" : "http://dbpedia.org/resource/Lisa_Hoffman"
      }, {
        "label" : "Carey Lowell",
        "uri" : "http://dbpedia.org/resource/Carey_Lowell"
      }, {
        "label" : "Rita Wilson",
        "uri" : "http://dbpedia.org/resource/Rita_Wilson"
      }, {
        "label" : "Katherine DeMille",
        "uri" : "http://dbpedia.org/resource/Katherine_DeMille"
      }, {
        "label" : "Nicoletta Braschi",
        "uri" : "http://dbpedia.org/resource/Nicoletta_Braschi"
      }, {
        "label" : "Justin Theroux",
        "uri" : "http://dbpedia.org/resource/Justin_Theroux"
      }, {
        "label" : "Helene Thimig",
        "uri" : "http://dbpedia.org/resource/Helene_Thimig"
      }, {
        "label" : "Jane Wenham (actress)",
        "uri" : "http://dbpedia.org/resource/Jane_Wenham_(actress)"
      }, {
        "label" : "Donna Dixon",
        "uri" : "http://dbpedia.org/resource/Donna_Dixon"
      }, {
        "label" : "Tutte Lemkow",
        "uri" : "http://dbpedia.org/resource/Tutte_Lemkow"
      }, {
        "label" : "Dina Eastwood",
        "uri" : "http://dbpedia.org/resource/Dina_Eastwood"
      }, {
        "label" : "Lila Lee",
        "uri" : "http://dbpedia.org/resource/Lila_Lee"
      }, {
        "label" : "Clyde Klotz",
        "uri" : "http://dbpedia.org/resource/Clyde_Klotz"
      }, {
        "label" : "Ronee Blakley",
        "uri" : "http://dbpedia.org/resource/Ronee_Blakley"
      }, {
        "label" : "Wendy Stites",
        "uri" : "http://dbpedia.org/resource/Wendy_Stites"
      }, {
        "label" : "Giuditta Rissone",
        "uri" : "http://dbpedia.org/resource/Giuditta_Rissone"
      }, {
        "label" : "Martha Stewart (actress)",
        "uri" : "http://dbpedia.org/resource/Martha_Stewart_(actress)"
      }, {
        "label" : "Anne Byrne (actress)",
        "uri" : "http://dbpedia.org/resource/Anne_Byrne_(actress)"
      }, {
        "label" : "Kiran Juneja",
        "uri" : "http://dbpedia.org/resource/Kiran_Juneja"
      }, {
        "label" : "Amy Holden Jones",
        "uri" : "http://dbpedia.org/resource/Amy_Holden_Jones"
      }, {
        "label" : "Carl Koch (director)",
        "uri" : "http://dbpedia.org/resource/Carl_Koch_(director)"
      }, {
        "label" : "Gauri Shinde",
        "uri" : "http://dbpedia.org/resource/Gauri_Shinde"
      }, {
        "label" : "Sonam (actress)",
        "uri" : "http://dbpedia.org/resource/Sonam_(actress)"
      }, {
        "label" : "Zhao Tao",
        "uri" : "http://dbpedia.org/resource/Zhao_Tao"
      }, {
        "label" : "Pawan Kalyan",
        "uri" : "http://dbpedia.org/resource/Pawan_Kalyan"
      }, {
        "label" : "Senta Berger",
        "uri" : "http://dbpedia.org/resource/Senta_Berger"
      }, {
        "label" : "Susan Harris",
        "uri" : "http://dbpedia.org/resource/Susan_Harris"
      }, {
        "label" : "Miklós Jancsó",
        "uri" : "http://dbpedia.org/resource/Miklós_Jancsó"
      }, {
        "label" : "Clara Kimball Young",
        "uri" : "http://dbpedia.org/resource/Clara_Kimball_Young"
      }, {
        "label" : "Dorothy Hyson",
        "uri" : "http://dbpedia.org/resource/Dorothy_Hyson"
      }, {
        "label" : "Joseph Bologna",
        "uri" : "http://dbpedia.org/resource/Joseph_Bologna"
      }, {
        "label" : "Lisa Joy",
        "uri" : "http://dbpedia.org/resource/Lisa_Joy"
      }, {
        "label" : "Cláudia Ohana",
        "uri" : "http://dbpedia.org/resource/Cláudia_Ohana"
      }, {
        "label" : "Judy Goffman Cutler",
        "uri" : "http://dbpedia.org/resource/Judy_Goffman_Cutler"
      }, {
        "label" : "Laurence S. Cutler",
        "uri" : "http://dbpedia.org/resource/Laurence_S._Cutler"
      }, {
        "label" : "Lorenda Starfelt",
        "uri" : "http://dbpedia.org/resource/Lorenda_Starfelt"
      } ]
    },
    "combination" : true
  }, {
    "id" : "205",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian cleric?", "What is directed by Belgian clerics?", "What was directed by a Belgian cleric?", "What was directed by Belgian clerics?", "Which movie is directed by a Belgian cleric?", "Which movie is directed by Belgian clerics?", "Which movie was directed by a Belgian cleric?", "Which movie was directed by Belgian clerics?", "Which movies are directed by a Belgian cleric?", "Which movies are directed by Belgian clerics?", "Which movies were directed by a Belgian cleric?", "Which movies were directed by Belgian clerics?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cleric>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "206",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian office holder?", "What is directed by Belgian office holders?", "What was directed by a Belgian office holder?", "What was directed by Belgian office holders?", "Which movie is directed by a Belgian office holder?", "Which movie is directed by Belgian office holders?", "Which movie was directed by a Belgian office holder?", "Which movie was directed by Belgian office holders?", "Which movies are directed by a Belgian office holder?", "Which movies are directed by Belgian office holders?", "Which movies were directed by a Belgian office holder?", "Which movies were directed by Belgian office holders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "207",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian agent?", "What is directed by Belgian agents?", "What was directed by a Belgian agent?", "What was directed by Belgian agents?", "Which movie is directed by a Belgian agent?", "Which movie is directed by Belgian agents?", "Which movie was directed by a Belgian agent?", "Which movie was directed by Belgian agents?", "Which movies are directed by a Belgian agent?", "Which movies are directed by Belgian agents?", "Which movies were directed by a Belgian agent?", "Which movies were directed by Belgian agents?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Agent>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "208",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian economist?", "What is directed by Belgian economists?", "What was directed by a Belgian economist?", "What was directed by Belgian economists?", "Which movie is directed by a Belgian economist?", "Which movie is directed by Belgian economists?", "Which movie was directed by a Belgian economist?", "Which movie was directed by Belgian economists?", "Which movies are directed by a Belgian economist?", "Which movies are directed by Belgian economists?", "Which movies were directed by a Belgian economist?", "Which movies were directed by Belgian economists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Economist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "209",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian motorcycle rider?", "What is directed by Belgian motorcycle riders?", "What was directed by a Belgian motorcycle rider?", "What was directed by Belgian motorcycle riders?", "Which movie is directed by a Belgian motorcycle rider?", "Which movie is directed by Belgian motorcycle riders?", "Which movie was directed by a Belgian motorcycle rider?", "Which movie was directed by Belgian motorcycle riders?", "Which movies are directed by a Belgian motorcycle rider?", "Which movies are directed by Belgian motorcycle riders?", "Which movies were directed by a Belgian motorcycle rider?", "Which movies were directed by Belgian motorcycle riders?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorcycleRider>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "210",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian artist?", "What is directed by Belgian artists?", "What was directed by a Belgian artist?", "What was directed by Belgian artists?", "Which movie is directed by a Belgian artist?", "Which movie is directed by Belgian artists?", "Which movie was directed by a Belgian artist?", "Which movie was directed by Belgian artists?", "Which movies are directed by a Belgian artist?", "Which movies are directed by Belgian artists?", "Which movies were directed by a Belgian artist?", "Which movies were directed by Belgian artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "211",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian athlete?", "What is directed by Belgian athletes?", "What was directed by a Belgian athlete?", "What was directed by Belgian athletes?", "Which movie is directed by a Belgian athlete?", "Which movie is directed by Belgian athletes?", "Which movie was directed by a Belgian athlete?", "Which movie was directed by Belgian athletes?", "Which movies are directed by a Belgian athlete?", "Which movies are directed by Belgian athletes?", "Which movies were directed by a Belgian athlete?", "Which movies were directed by Belgian athletes?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "212",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian scientist?", "What is directed by Belgian scientists?", "What was directed by a Belgian scientist?", "What was directed by Belgian scientists?", "Which movie is directed by a Belgian scientist?", "Which movie is directed by Belgian scientists?", "Which movie was directed by a Belgian scientist?", "Which movie was directed by Belgian scientists?", "Which movies are directed by a Belgian scientist?", "Which movies are directed by Belgian scientists?", "Which movies were directed by a Belgian scientist?", "Which movies were directed by Belgian scientists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "213",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian architect?", "What is directed by Belgian architects?", "What was directed by a Belgian architect?", "What was directed by Belgian architects?", "Which movie is directed by a Belgian architect?", "Which movie is directed by Belgian architects?", "Which movie was directed by a Belgian architect?", "Which movie was directed by Belgian architects?", "Which movies are directed by a Belgian architect?", "Which movies are directed by Belgian architects?", "Which movies were directed by a Belgian architect?", "Which movies were directed by Belgian architects?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "214",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian golf player?", "What is directed by Belgian golf players?", "What was directed by a Belgian golf player?", "What was directed by Belgian golf players?", "Which movie is directed by a Belgian golf player?", "Which movie is directed by Belgian golf players?", "Which movie was directed by a Belgian golf player?", "Which movie was directed by Belgian golf players?", "Which movies are directed by a Belgian golf player?", "Which movies are directed by Belgian golf players?", "Which movies were directed by a Belgian golf player?", "Which movies were directed by Belgian golf players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "215",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian racing driver?", "What is directed by Belgian racing drivers?", "What was directed by a Belgian racing driver?", "What was directed by Belgian racing drivers?", "Which movie is directed by a Belgian racing driver?", "Which movie is directed by Belgian racing drivers?", "Which movie was directed by a Belgian racing driver?", "Which movie was directed by Belgian racing drivers?", "Which movies are directed by a Belgian racing driver?", "Which movies are directed by Belgian racing drivers?", "Which movies were directed by a Belgian racing driver?", "Which movies were directed by Belgian racing drivers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RacingDriver>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "216",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian politician?", "What is directed by Belgian politicians?", "What was directed by a Belgian politician?", "What was directed by Belgian politicians?", "Which movie is directed by a Belgian politician?", "Which movie is directed by Belgian politicians?", "Which movie was directed by a Belgian politician?", "Which movie was directed by Belgian politicians?", "Which movies are directed by a Belgian politician?", "Which movies are directed by Belgian politicians?", "Which movies were directed by a Belgian politician?", "Which movies were directed by Belgian politicians?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "217",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian swimmer?", "What is directed by Belgian swimmers?", "What was directed by a Belgian swimmer?", "What was directed by Belgian swimmers?", "Which movie is directed by a Belgian swimmer?", "Which movie is directed by Belgian swimmers?", "Which movie was directed by a Belgian swimmer?", "Which movie was directed by Belgian swimmers?", "Which movies are directed by a Belgian swimmer?", "Which movies are directed by Belgian swimmers?", "Which movies were directed by a Belgian swimmer?", "Which movies were directed by Belgian swimmers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Swimmer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "218",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian volleyball player?", "What is directed by Belgian volleyball players?", "What was directed by a Belgian volleyball player?", "What was directed by Belgian volleyball players?", "Which movie is directed by a Belgian volleyball player?", "Which movie is directed by Belgian volleyball players?", "Which movie was directed by a Belgian volleyball player?", "Which movie was directed by Belgian volleyball players?", "Which movies are directed by a Belgian volleyball player?", "Which movies are directed by Belgian volleyball players?", "Which movies were directed by a Belgian volleyball player?", "Which movies were directed by Belgian volleyball players?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VolleyballPlayer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "219",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian person?", "What is directed by Belgian persons?", "What was directed by a Belgian person?", "What was directed by Belgian persons?", "Which movie is directed by a Belgian person?", "Which movie is directed by Belgian persons?", "Which movie was directed by a Belgian person?", "Which movie was directed by Belgian persons?", "Which movies are directed by a Belgian person?", "Which movies are directed by Belgian persons?", "Which movies were directed by a Belgian person?", "Which movies were directed by Belgian persons?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "220",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian Christian Bishop?", "What is directed by Belgian Christian Bishops?", "What was directed by a Belgian Christian Bishop?", "What was directed by Belgian Christian Bishops?", "Which movie is directed by a Belgian Christian Bishop?", "Which movie is directed by Belgian Christian Bishops?", "Which movie was directed by a Belgian Christian Bishop?", "Which movie was directed by Belgian Christian Bishops?", "Which movies are directed by a Belgian Christian Bishop?", "Which movies are directed by Belgian Christian Bishops?", "Which movies were directed by a Belgian Christian Bishop?", "Which movies were directed by Belgian Christian Bishops?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ChristianBishop>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "221",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian comics creator?", "What is directed by Belgian comics creators?", "What was directed by a Belgian comics creator?", "What was directed by Belgian comics creators?", "Which movie is directed by a Belgian comics creator?", "Which movie is directed by Belgian comics creators?", "Which movie was directed by a Belgian comics creator?", "Which movie was directed by Belgian comics creators?", "Which movies are directed by a Belgian comics creator?", "Which movies are directed by Belgian comics creators?", "Which movies were directed by a Belgian comics creator?", "Which movies were directed by Belgian comics creators?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCreator>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "222",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian writer?", "What is directed by Belgian writers?", "What was directed by a Belgian writer?", "What was directed by Belgian writers?", "Which movie is directed by a Belgian writer?", "Which movie is directed by Belgian writers?", "Which movie was directed by a Belgian writer?", "Which movie was directed by Belgian writers?", "Which movies are directed by a Belgian writer?", "Which movies are directed by Belgian writers?", "Which movies were directed by a Belgian writer?", "Which movies were directed by Belgian writers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "223",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian motorsport racer?", "What is directed by Belgian motorsport racers?", "What was directed by a Belgian motorsport racer?", "What was directed by Belgian motorsport racers?", "Which movie is directed by a Belgian motorsport racer?", "Which movie is directed by Belgian motorsport racers?", "Which movie was directed by a Belgian motorsport racer?", "Which movie was directed by Belgian motorsport racers?", "Which movies are directed by a Belgian motorsport racer?", "Which movies are directed by Belgian motorsport racers?", "Which movies were directed by a Belgian motorsport racer?", "Which movies were directed by Belgian motorsport racers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MotorsportRacer>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "224",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by a Belgian musical artist?", "What is directed by Belgian musical artists?", "What was directed by a Belgian musical artist?", "What was directed by Belgian musical artists?", "Which movie is directed by a Belgian musical artist?", "Which movie is directed by Belgian musical artists?", "Which movie was directed by a Belgian musical artist?", "Which movie was directed by Belgian musical artists?", "Which movies are directed by a Belgian musical artist?", "Which movies are directed by Belgian musical artists?", "Which movies were directed by a Belgian musical artist?", "Which movies were directed by Belgian musical artists?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "225",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "FILM",
    "frameType" : "APP",
    "sentences" : [ "What is directed by persons born by $x?", "What was directed by persons born by $x?", "Which movie is directed by persons born by $x?", "Which movie was directed by persons born by $x?", "Which movies are directed by persons born by $x?", "Which movies were directed by persons born by $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/director> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/birthDate> ?objOfPropx)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "objOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "1940-04-25",
        "uri" : "1940-04-25"
      }, {
        "label" : "1946-02-21",
        "uri" : "1946-02-21"
      }, {
        "label" : "1936-05-09",
        "uri" : "1936-05-09"
      }, {
        "label" : "1954-12-15",
        "uri" : "1954-12-15"
      }, {
        "label" : "1926-03-06",
        "uri" : "1926-03-06"
      }, {
        "label" : "1940-11-22",
        "uri" : "1940-11-22"
      }, {
        "label" : "1901-11-03",
        "uri" : "1901-11-03"
      }, {
        "label" : "1915-04-21",
        "uri" : "1915-04-21"
      }, {
        "label" : "1960-08-10",
        "uri" : "1960-08-10"
      }, {
        "label" : "1968-04-19",
        "uri" : "1968-04-19"
      }, {
        "label" : "1959-05-03",
        "uri" : "1959-05-03"
      }, {
        "label" : "1940-03-16",
        "uri" : "1940-03-16"
      }, {
        "label" : "1961-12-16",
        "uri" : "1961-12-16"
      }, {
        "label" : "1906-06-22",
        "uri" : "1906-06-22"
      }, {
        "label" : "1922-07-26",
        "uri" : "1922-07-26"
      }, {
        "label" : "1940-11-27",
        "uri" : "1940-11-27"
      }, {
        "label" : "1895-10-04",
        "uri" : "1895-10-04"
      }, {
        "label" : "1902-09-20",
        "uri" : "1902-09-20"
      }, {
        "label" : "1923-10-04",
        "uri" : "1923-10-04"
      }, {
        "label" : "1930-05-31",
        "uri" : "1930-05-31"
      }, {
        "label" : "1952-07-01",
        "uri" : "1952-07-01"
      }, {
        "label" : "1912-10-26",
        "uri" : "1912-10-26"
      }, {
        "label" : "1937-08-08",
        "uri" : "1937-08-08"
      }, {
        "label" : "1909-09-07",
        "uri" : "1909-09-07"
      }, {
        "label" : "1943-03-29",
        "uri" : "1943-03-29"
      }, {
        "label" : "1923-02-12",
        "uri" : "1923-02-12"
      }, {
        "label" : "1880-12-31",
        "uri" : "1880-12-31"
      }, {
        "label" : "1936-03-07",
        "uri" : "1936-03-07"
      }, {
        "label" : "1968-08-09",
        "uri" : "1968-08-09"
      }, {
        "label" : "1940-03-29",
        "uri" : "1940-03-29"
      }, {
        "label" : "1948-12-27",
        "uri" : "1948-12-27"
      }, {
        "label" : "1888-04-06",
        "uri" : "1888-04-06"
      }, {
        "label" : "1961-05-30",
        "uri" : "1961-05-30"
      }, {
        "label" : "1874-03-24",
        "uri" : "1874-03-24"
      }, {
        "label" : "1963-06-15",
        "uri" : "1963-06-15"
      }, {
        "label" : "1969-02-11",
        "uri" : "1969-02-11"
      }, {
        "label" : "1970-08-20",
        "uri" : "1970-08-20"
      }, {
        "label" : "1948-01-16",
        "uri" : "1948-01-16"
      }, {
        "label" : "1906-08-05",
        "uri" : "1906-08-05"
      }, {
        "label" : "1978-05-11",
        "uri" : "1978-05-11"
      }, {
        "label" : "1928-02-25",
        "uri" : "1928-02-25"
      }, {
        "label" : "1931-03-26",
        "uri" : "1931-03-26"
      }, {
        "label" : "1963-09-29",
        "uri" : "1963-09-29"
      }, {
        "label" : "1959-03-18",
        "uri" : "1959-03-18"
      }, {
        "label" : "1906-11-02",
        "uri" : "1906-11-02"
      }, {
        "label" : "1925-05-24",
        "uri" : "1925-05-24"
      }, {
        "label" : "1890-12-13",
        "uri" : "1890-12-13"
      }, {
        "label" : "1934-07-08",
        "uri" : "1934-07-08"
      }, {
        "label" : "1873-09-09",
        "uri" : "1873-09-09"
      }, {
        "label" : "1961-11-19",
        "uri" : "1961-11-19"
      }, {
        "label" : "1956-01-03",
        "uri" : "1956-01-03"
      }, {
        "label" : "1912-09-29",
        "uri" : "1912-09-29"
      }, {
        "label" : "1945-03-08",
        "uri" : "1945-03-08"
      }, {
        "label" : "1932-02-18",
        "uri" : "1932-02-18"
      } ]
    },
    "combination" : true
  }, {
    "id" : "226",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "What is born by the birth date of $x?", "What was born by the birth date of $x?", "Which person is born by the birth date of $x?", "Which person was born by the birth date of $x?", "Which persons are born by the birth date of $x?", "Which persons were born by the birth date of $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ {
        "label" : "Aurelian",
        "uri" : "http://dbpedia.org/resource/Aurelian"
      }, {
        "label" : "Averroes",
        "uri" : "http://dbpedia.org/resource/Averroes"
      }, {
        "label" : "Commodus",
        "uri" : "http://dbpedia.org/resource/Commodus"
      }, {
        "label" : "Edmund Rich",
        "uri" : "http://dbpedia.org/resource/Edmund_Rich"
      }, {
        "label" : "Emperor Go-Daigo",
        "uri" : "http://dbpedia.org/resource/Emperor_Go-Daigo"
      }, {
        "label" : "Emperor Go-Ichijō",
        "uri" : "http://dbpedia.org/resource/Emperor_Go-Ichijō"
      }, {
        "label" : "Emperor Go-Uda",
        "uri" : "http://dbpedia.org/resource/Emperor_Go-Uda"
      }, {
        "label" : "Emperor Juntoku",
        "uri" : "http://dbpedia.org/resource/Emperor_Juntoku"
      }, {
        "label" : "Gian Galeazzo Visconti",
        "uri" : "http://dbpedia.org/resource/Gian_Galeazzo_Visconti"
      }, {
        "label" : "Gregory of Tours",
        "uri" : "http://dbpedia.org/resource/Gregory_of_Tours"
      }, {
        "label" : "History of Portugal",
        "uri" : "http://dbpedia.org/resource/History_of_Portugal"
      }, {
        "label" : "James I of Scotland",
        "uri" : "http://dbpedia.org/resource/James_I_of_Scotland"
      }, {
        "label" : "John of Bohemia",
        "uri" : "http://dbpedia.org/resource/John_of_Bohemia"
      }, {
        "label" : "John of Gaunt",
        "uri" : "http://dbpedia.org/resource/John_of_Gaunt"
      }, {
        "label" : "Lothair II, Holy Roman Emperor",
        "uri" : "http://dbpedia.org/resource/Lothair_II,_Holy_Roman_Emperor"
      }, {
        "label" : "Louis I of Hungary",
        "uri" : "http://dbpedia.org/resource/Louis_I_of_Hungary"
      }, {
        "label" : "Manuel I Komnenos",
        "uri" : "http://dbpedia.org/resource/Manuel_I_Komnenos"
      }, {
        "label" : "Margaret, Maid of Norway",
        "uri" : "http://dbpedia.org/resource/Margaret,_Maid_of_Norway"
      }, {
        "label" : "Philippa of Hainault",
        "uri" : "http://dbpedia.org/resource/Philippa_of_Hainault"
      }, {
        "label" : "Pope Gregory I",
        "uri" : "http://dbpedia.org/resource/Pope_Gregory_I"
      }, {
        "label" : "Pope Nicholas IV",
        "uri" : "http://dbpedia.org/resource/Pope_Nicholas_IV"
      }, {
        "label" : "Richard II of England",
        "uri" : "http://dbpedia.org/resource/Richard_II_of_England"
      }, {
        "label" : "Rudolf I of Germany",
        "uri" : "http://dbpedia.org/resource/Rudolf_I_of_Germany"
      }, {
        "label" : "Rupert, King of Germany",
        "uri" : "http://dbpedia.org/resource/Rupert,_King_of_Germany"
      }, {
        "label" : "Saint Nicholas",
        "uri" : "http://dbpedia.org/resource/Saint_Nicholas"
      }, {
        "label" : "Sima Guang",
        "uri" : "http://dbpedia.org/resource/Sima_Guang"
      }, {
        "label" : "Titus",
        "uri" : "http://dbpedia.org/resource/Titus"
      }, {
        "label" : "Ulugh Beg",
        "uri" : "http://dbpedia.org/resource/Ulugh_Beg"
      }, {
        "label" : "Vespasian",
        "uri" : "http://dbpedia.org/resource/Vespasian"
      }, {
        "label" : "Vitellius",
        "uri" : "http://dbpedia.org/resource/Vitellius"
      }, {
        "label" : "Wenceslaus IV of Bohemia",
        "uri" : "http://dbpedia.org/resource/Wenceslaus_IV_of_Bohemia"
      }, {
        "label" : "Humphrey, Duke of Gloucester",
        "uri" : "http://dbpedia.org/resource/Humphrey,_Duke_of_Gloucester"
      }, {
        "label" : "Josef Wagner (cyclist)",
        "uri" : "http://dbpedia.org/resource/Josef_Wagner_(cyclist)"
      }, {
        "label" : "Malo (saint)",
        "uri" : "http://dbpedia.org/resource/Malo_(saint)"
      }, {
        "label" : "Muhammad al-Mahdi",
        "uri" : "http://dbpedia.org/resource/Muhammad_al-Mahdi"
      }, {
        "label" : "Nerva",
        "uri" : "http://dbpedia.org/resource/Nerva"
      }, {
        "label" : "Philippa of Lancaster",
        "uri" : "http://dbpedia.org/resource/Philippa_of_Lancaster"
      }, {
        "label" : "Saint Maurus",
        "uri" : "http://dbpedia.org/resource/Saint_Maurus"
      }, {
        "label" : "Tiberius Gemellus",
        "uri" : "http://dbpedia.org/resource/Tiberius_Gemellus"
      }, {
        "label" : "Zbigniew Oleśnicki (cardinal)",
        "uri" : "http://dbpedia.org/resource/Zbigniew_Oleśnicki_(cardinal)"
      }, {
        "label" : "Asmita Marwa",
        "uri" : "http://dbpedia.org/resource/Asmita_Marwa"
      }, {
        "label" : "Adolph I, Duke of Cleves",
        "uri" : "http://dbpedia.org/resource/Adolph_I,_Duke_of_Cleves"
      }, {
        "label" : "Elizabeth Darcy, Countess of Ormond",
        "uri" : "http://dbpedia.org/resource/Elizabeth_Darcy,_Countess_of_Ormond"
      }, {
        "label" : "Emperor Xizong of Jin",
        "uri" : "http://dbpedia.org/resource/Emperor_Xizong_of_Jin"
      }, {
        "label" : "Emperor Xizong of Tang",
        "uri" : "http://dbpedia.org/resource/Emperor_Xizong_of_Tang"
      }, {
        "label" : "Fadrique Alfonso, Lord of Haro",
        "uri" : "http://dbpedia.org/resource/Fadrique_Alfonso,_Lord_of_Haro"
      }, {
        "label" : "John of Matha",
        "uri" : "http://dbpedia.org/resource/John_of_Matha"
      }, {
        "label" : "K'inich Yo'nal Ahk II",
        "uri" : "http://dbpedia.org/resource/K'inich_Yo'nal_Ahk_II"
      }, {
        "label" : "Saw Zein",
        "uri" : "http://dbpedia.org/resource/Saw_Zein"
      }, {
        "label" : "Sviatopolk II of Kiev",
        "uri" : "http://dbpedia.org/resource/Sviatopolk_II_of_Kiev"
      }, {
        "label" : "Violant of Aragon",
        "uri" : "http://dbpedia.org/resource/Violant_of_Aragon"
      }, {
        "label" : "William Bardolf, 4th Baron Bardolf",
        "uri" : "http://dbpedia.org/resource/William_Bardolf,_4th_Baron_Bardolf"
      }, {
        "label" : "Zein Pun",
        "uri" : "http://dbpedia.org/resource/Zein_Pun"
      }, {
        "label" : "Jianwen Emperor",
        "uri" : "http://dbpedia.org/resource/Jianwen_Emperor"
      }, {
        "label" : "John the Fearless",
        "uri" : "http://dbpedia.org/resource/John_the_Fearless"
      }, {
        "label" : "Louis I, Duke of Anjou",
        "uri" : "http://dbpedia.org/resource/Louis_I,_Duke_of_Anjou"
      }, {
        "label" : "Philip I, Count of Auvergne",
        "uri" : "http://dbpedia.org/resource/Philip_I,_Count_of_Auvergne"
      }, {
        "label" : "Ibn abd al-Malik al-Marrakushi",
        "uri" : "http://dbpedia.org/resource/Ibn_abd_al-Malik_al-Marrakushi"
      }, {
        "label" : "Yolanda of Lusignan",
        "uri" : "http://dbpedia.org/resource/Yolanda_of_Lusignan"
      }, {
        "label" : "Alix of Brittany, Dame de Pontarcy",
        "uri" : "http://dbpedia.org/resource/Alix_of_Brittany,_Dame_de_Pontarcy"
      }, {
        "label" : "Elizabeth de Comyn",
        "uri" : "http://dbpedia.org/resource/Elizabeth_de_Comyn"
      }, {
        "label" : "Crypt the Warchild",
        "uri" : "http://dbpedia.org/resource/Crypt_the_Warchild"
      }, {
        "label" : "Conrad IV of Germany",
        "uri" : "http://dbpedia.org/resource/Conrad_IV_of_Germany"
      }, {
        "label" : "Elizabeth de Clare",
        "uri" : "http://dbpedia.org/resource/Elizabeth_de_Clare"
      }, {
        "label" : "Hongwu Emperor",
        "uri" : "http://dbpedia.org/resource/Hongwu_Emperor"
      }, {
        "label" : "Ladislaus IV of Hungary",
        "uri" : "http://dbpedia.org/resource/Ladislaus_IV_of_Hungary"
      }, {
        "label" : "Philomena",
        "uri" : "http://dbpedia.org/resource/Philomena"
      }, {
        "label" : "Valdemar II of Denmark",
        "uri" : "http://dbpedia.org/resource/Valdemar_II_of_Denmark"
      }, {
        "label" : "Arthur I, Duke of Brittany",
        "uri" : "http://dbpedia.org/resource/Arthur_I,_Duke_of_Brittany"
      }, {
        "label" : "Constance of Burgundy",
        "uri" : "http://dbpedia.org/resource/Constance_of_Burgundy"
      }, {
        "label" : "Eanflæd",
        "uri" : "http://dbpedia.org/resource/Eanflæd"
      }, {
        "label" : "Emperor Antoku",
        "uri" : "http://dbpedia.org/resource/Emperor_Antoku"
      }, {
        "label" : "Emperor Chūkyō",
        "uri" : "http://dbpedia.org/resource/Emperor_Chūkyō"
      }, {
        "label" : "Emperor Go-Shirakawa",
        "uri" : "http://dbpedia.org/resource/Emperor_Go-Shirakawa"
      }, {
        "label" : "Thomas de Mowbray, 1st Duke of Norfolk",
        "uri" : "http://dbpedia.org/resource/Thomas_de_Mowbray,_1st_Duke_of_Norfolk"
      }, {
        "label" : "Güyük Khan",
        "uri" : "http://dbpedia.org/resource/Güyük_Khan"
      }, {
        "label" : "Rudolf IV, Duke of Austria",
        "uri" : "http://dbpedia.org/resource/Rudolf_IV,_Duke_of_Austria"
      }, {
        "label" : "Yared",
        "uri" : "http://dbpedia.org/resource/Yared"
      }, {
        "label" : "Ögedei Khan",
        "uri" : "http://dbpedia.org/resource/Ögedei_Khan"
      }, {
        "label" : "Joanna II of Naples",
        "uri" : "http://dbpedia.org/resource/Joanna_II_of_Naples"
      }, {
        "label" : "Lu You",
        "uri" : "http://dbpedia.org/resource/Lu_You"
      }, {
        "label" : "Mstislav I of Kiev",
        "uri" : "http://dbpedia.org/resource/Mstislav_I_of_Kiev"
      }, {
        "label" : "Richard I of Normandy",
        "uri" : "http://dbpedia.org/resource/Richard_I_of_Normandy"
      }, {
        "label" : "John of Castile, Lord of Valencia de Campos",
        "uri" : "http://dbpedia.org/resource/John_of_Castile,_Lord_of_Valencia_de_Campos"
      }, {
        "label" : "Sunjong of Goryeo",
        "uri" : "http://dbpedia.org/resource/Sunjong_of_Goryeo"
      }, {
        "label" : "Alice de Lacy, 4th Countess of Lincoln",
        "uri" : "http://dbpedia.org/resource/Alice_de_Lacy,_4th_Countess_of_Lincoln"
      }, {
        "label" : "Matilda of Hainaut",
        "uri" : "http://dbpedia.org/resource/Matilda_of_Hainaut"
      }, {
        "label" : "Henry of Opole",
        "uri" : "http://dbpedia.org/resource/Henry_of_Opole"
      }, {
        "label" : "Joan of Armagnac",
        "uri" : "http://dbpedia.org/resource/Joan_of_Armagnac"
      }, {
        "label" : "John, 3rd Earl of Kent",
        "uri" : "http://dbpedia.org/resource/John,_3rd_Earl_of_Kent"
      }, {
        "label" : "Maud de Lacy, Countess of Hertford and Gloucester",
        "uri" : "http://dbpedia.org/resource/Maud_de_Lacy,_Countess_of_Hertford_and_Gloucester"
      }, {
        "label" : "Przemysław of Racibórz",
        "uri" : "http://dbpedia.org/resource/Przemysław_of_Racibórz"
      }, {
        "label" : "Ha Ryun",
        "uri" : "http://dbpedia.org/resource/Ha_Ryun"
      }, {
        "label" : "Valter hugo mãe",
        "uri" : "http://dbpedia.org/resource/Valter_hugo_mãe"
      }, {
        "label" : "Anna of Trebizond, Queen of Georgia",
        "uri" : "http://dbpedia.org/resource/Anna_of_Trebizond,_Queen_of_Georgia"
      }, {
        "label" : "Juan Alonso de Guzmán, 1st Count of Niebla",
        "uri" : "http://dbpedia.org/resource/Juan_Alonso_de_Guzmán,_1st_Count_of_Niebla"
      }, {
        "label" : "Annia Aurelia Galeria Faustina",
        "uri" : "http://dbpedia.org/resource/Annia_Aurelia_Galeria_Faustina"
      }, {
        "label" : "Anthony of Padua",
        "uri" : "http://dbpedia.org/resource/Anthony_of_Padua"
      }, {
        "label" : "Antipope Benedict XIII",
        "uri" : "http://dbpedia.org/resource/Antipope_Benedict_XIII"
      }, {
        "label" : "Berengaria of Portugal",
        "uri" : "http://dbpedia.org/resource/Berengaria_of_Portugal"
      } ]
    },
    "combination" : true
  }, {
    "id" : "227",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "What is born by the occupation of $x?", "What was born by the occupation of $x?", "Which person is born by the occupation of $x?", "Which person was born by the occupation of $x?", "Which persons are born by the occupation of $x?", "Which persons were born by the occupation of $x?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/occupation> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "228",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "What is born by a Belgian human?", "What is born by Belgian humans?", "What was born by a Belgian human?", "What was born by Belgian humans?", "Which person is born by a Belgian human?", "Which person is born by Belgian humans?", "Which person was born by a Belgian human?", "Which person was born by Belgian humans?", "Which persons are born by a Belgian human?", "Which persons are born by Belgian humans?", "Which persons were born by a Belgian human?", "Which persons were born by Belgian humans?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.wikidata.org/entity/Q5>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "229",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "PERSON",
    "frameType" : "APP",
    "sentences" : [ "What is born by a Belgian golfer?", "What is born by Belgian golfers?", "What was born by a Belgian golfer?", "What was born by Belgian golfers?", "Which person is born by a Belgian golfer?", "Which person is born by Belgian golfers?", "Which person was born by a Belgian golfer?", "Which person was born by Belgian golfers?", "Which persons are born by a Belgian golfer?", "Which persons are born by Belgian golfers?", "Which persons were born by a Belgian golfer?", "Which persons were born by Belgian golfers?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.wikidata.org/entity/Q13156709>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "230",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "THING",
    "frameType" : "IPP",
    "sentences" : [ "When was the the birth date of $x belonged?", "When was the the birth date of $x belongs?", "When were the the birth date of $x belonged?", "When were the the birth date of $x belongs?", "Which species was the the birth date of $x belonged?", "Which species was the the birth date of $x belongs?", "Which species were the the birth date of $x belonged?", "Which species were the the birth date of $x belongs?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/Animal> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/birthDate> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "231",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "THING",
    "frameType" : "IPP",
    "sentences" : [ "When was the the occupation of $x belonged?", "When was the the occupation of $x belongs?", "When were the the occupation of $x belonged?", "When were the the occupation of $x belongs?", "Which species was the the occupation of $x belonged?", "Which species was the the occupation of $x belongs?", "Which species were the the occupation of $x belonged?", "Which species were the the occupation of $x belongs?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/Animal> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/occupation> ?objOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "232",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "IPP",
    "sentences" : [ "When was the a Belgian human belonged?", "When was the Belgian humans belonged?", "When was the a Belgian human belongs?", "When was the Belgian humans belongs?", "When were the a Belgian human belonged?", "When were the Belgian humans belonged?", "When were the a Belgian human belongs?", "When were the Belgian humans belongs?", "Which species was the a Belgian human belonged?", "Which species was the Belgian humans belonged?", "Which species was the a Belgian human belongs?", "Which species was the Belgian humans belongs?", "Which species were the a Belgian human belonged?", "Which species were the Belgian humans belonged?", "Which species were the a Belgian human belongs?", "Which species were the Belgian humans belongs?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/Animal> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.wikidata.org/entity/Q5>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "233",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "IPP",
    "sentences" : [ "When was the a Belgian golfer belonged?", "When was the Belgian golfers belonged?", "When was the a Belgian golfer belongs?", "When was the Belgian golfers belongs?", "When were the a Belgian golfer belonged?", "When were the Belgian golfers belonged?", "When were the a Belgian golfer belongs?", "When were the Belgian golfers belongs?", "Which species was the a Belgian golfer belonged?", "Which species was the Belgian golfers belonged?", "Which species was the a Belgian golfer belongs?", "Which species was the Belgian golfers belongs?", "Which species were the a Belgian golfer belonged?", "Which species were the Belgian golfers belonged?", "Which species were the a Belgian golfer belongs?", "Which species were the Belgian golfers belongs?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/Animal> ?objOfProp)\n  (triple ?objOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?objOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.wikidata.org/entity/Q13156709>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "subjOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "234",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "THING",
    "frameType" : "IPP",
    "sentences" : [ "When was the the birth date of $x built?", "When were the the birth date of $x built?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/beginningDate> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/birthDate> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "235",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "PERSON",
    "returnType" : "THING",
    "frameType" : "IPP",
    "sentences" : [ "When was the the occupation of $x built?", "When were the the occupation of $x built?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/beginningDate> ?objOfProp)\n  (triple ?subjOfPropx <http://dbpedia.org/ontology/occupation> ?subjOfProp)\n)\n",
    "sentenceToSparqlParameterMapping" : {
      "$x" : "subjOfPropx"
    },
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "$x",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "236",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "IPP",
    "sentences" : [ "When was the a Belgian human built?", "When was the Belgian humans built?", "When were the a Belgian human built?", "When were the Belgian humans built?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/beginningDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.wikidata.org/entity/Q5>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  }, {
    "id" : "237",
    "language" : "EN",
    "type" : "SENTENCE",
    "bindingType" : "THING",
    "returnType" : "THING",
    "frameType" : "IPP",
    "sentences" : [ "When was the a Belgian golfer built?", "When was the Belgian golfers built?", "When were the a Belgian golfer built?", "When were the Belgian golfers built?" ],
    "queryType" : "SELECT",
    "sparqlQuery" : "(bgp\n  (triple ?subjOfProp <http://dbpedia.org/ontology/beginningDate> ?objOfProp)\n  (triple ?subjOfProp <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Belgium>)\n  (triple ?subjOfProp <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.wikidata.org/entity/Q13156709>)\n)\n",
    "sentenceToSparqlParameterMapping" : null,
    "returnVariable" : "objOfProp",
    "sentenceBindings" : {
      "bindingVariableName" : "NONE",
      "bindingList" : [ ]
    },
    "combination" : true
  } ]
}